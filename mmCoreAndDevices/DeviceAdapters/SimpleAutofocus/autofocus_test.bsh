// 
// Script to test Autofocus alogrithms by testing them agains the exisitng autofocus 
// Prashanth
//

import java.io.FileWriter;
import java.io.IOException;
import javax.swing.JTextField;
import javax.swing.JLabel;
import javax.swing.JFrame;
import java.awt.Container;
import java.awt.FlowLayout;
import java.lang.Math;
import mmcorej.StrVector;
// Force load of the java plugin if not installed
//acq.installAutofocusPlugin("Autofocus_"); 

int 	maxDisplacement 				= 			150.0;
int	numTests		  					= 			11;
String 	outputfilePath 				= 			"C://projects//micromanager1.3//DeviceAdapters//SimpleAF//autofocus_output.txt";
Double 	scalingFactor 					= 			0.135;	// For some z-drives 1 unit != 1 - micron, so here enter the value for microns/unit 
// For some z-drives 1 unit != 1 - micron, so here enter the value for microns/unit 

try
{
	String autofocusname = mmc.getProperty("Core",mmc.getDevicePropertyNames("Core").get(0));
	String ZStage = mmc.getFocusDevice();
	//gui.message(ZStage);
	FileWriter writer = new FileWriter(outputfilePath,true);	// Which file to write that data into
	double manualFocus = mmc.getPosition(ZStage);		// Enter the point of manual focus here
	
	String Mesg = "Test - All measurements of errors and error statistics in microns, other such as observed poitions in native units\n------------------------------------------------------------------------------------------------------------------";
   Mesg += "\nManual best focus is : "+(Math.round(scalingFactor*manualFocus*10)/10)+" microns"
				//+" ( "+(Math.round(manualFocus*10)/10)+"  units)"
				+"\n";
	Double [] displacements = new Double[numTests];
	double step			  = (2*(double)maxDisplacement)/(double)numTests;
	Double [] err = new Double[numTests];
	boolean addoneFlag = false;
	double displacement;
	// Calculate the standard deviation
	Double [] residuals = new Double[numTests];
	Double sd = 0;
	// Calculate mean error
	Double signedmean = 0;
	// Calculate minimum error and maximum error
	Double minerror = 500000000.0;
   	Double maxerror = 0;
	// Create the displacement array that the script willl have to run
	for(int i = 0; i < numTests; ++i)
	{
		displacement = (manualFocus - maxDisplacement) + i*(step);
		if(displacement == 0 || addoneFlag)
		{
			displacement = ((i+1)*step -maxDisplacement);
			addoneFlag = true;
		}
		displacements[i] = displacement;
		z_stagedispfrombest = (- maxDisplacement) + i*(step);
		mmc.setPosition(ZStage,(displacement));
		double start = System.currentTimeMillis();
		//mmc.fullFocus();
		//mmc.incrementalFocus();
		gui.autofocus(); 
		double stop = System.currentTimeMillis();
		double pos = mmc.getPosition(ZStage);
		err[i] = manualFocus - pos;
		Mesg+="z-displacement : "+((float)Math.round((scalingFactor*z_stagedispfrombest)*10)/10)+" microns "+
				//"("+(float)(Math.round(z_stagedispfrombest*10)/10)+" units)"+
				"\tz-error : "+((float)Math.round(scalingFactor*(err[i]*10))/10)+" microns "+
				"\tz-autofocus : "+(float)(Math.round(scalingFactor*pos*10)/10)+" microns"+
				//"( "+(float)(Math.round(pos*10)/10)+" units) "+
				"\tTime Taken : "+((double)(stop-start)/1000)+" secs"+
				"\n";
	}
	
	for(int i = 0; i < numTests; ++i)
	{
		signedmean += err[i]/numTests;
	}
	
	for(int i = 0; i < numTests; i++)
	{
			if(Math.abs(err[i]) < minerror)
				minerror = err[i];
			if(Math.abs(err[i]) > maxerror)
				maxerror = err[i];		
	}
   Mesg += "Run report : ("+autofocusname+")\n************\n";
	Mesg += "Average focus : "+(signedmean + manualFocus)+"\n";
	Mesg += "Mean error : "+(scalingFactor*signedmean)+" microns \n";
	Mesg += "Best Focus Estimate : "+((manualFocus - minerror))+" units\n";
	Mesg += "Worst Focus Estimate : "+((manualFocus - maxerror))+" units \n";

	for(int i = 0; i < numTests; ++i)
	{	
		residuals[i] = (err[i] - signedmean)*(err[i] - signedmean);
	}
	for(int i = 0; i < numTests; ++i)
	{
		sd += residuals[i]/numTests;
	}
	sd = Math.sqrt(sd);
	Mesg += "The standard deviation of the errors (calculated with the signed mean) is : "+(scalingFactor*sd)+" microns \n\n\n";
	Mesg+= "Properties for the device are: \n";
	String autofocusname = mmc.getProperty("Core",mmc.getDevicePropertyNames("Core").get(0));
	StrVector properties = mmc.getDevicePropertyNames(autofocusname);
	//properties = mmc.getDevicePropertyNames(getProperty(properties.get(0));
	for (int i=0; i<properties.size(); i++) {
	 //String Mesg;
    String prop = properties.get(i);
	 String val = mmc.getProperty(autofocusname, prop);
    Mesg += "\tProperty Name : \t" + prop + "\n\tProperty value: \t" + val + "\n";
}

	gui.message(Mesg);
	writer.append(Mesg);
	writer.flush();
	writer.close();
}
catch(Exception e)
{
	e.printStackTrace();
}

