/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.0
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#define SWIGPYTHON
#define SWIG_DIRECTORS
#define SWIG_PYTHON_DIRECTOR_NO_VTABLE


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__)) 
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__)) 
# else
#   define SWIGUNUSED 
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif 
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif



/* Python.h has to appear first */
#include <Python.h>

/* -----------------------------------------------------------------------------
 * swigrun.swg
 *
 * This file contains generic C API SWIG runtime support for pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

/* This should only be incremented when either the layout of swig_type_info changes,
   or for whatever reason, the runtime changes incompatibly */
#define SWIG_RUNTIME_VERSION "4"

/* define SWIG_TYPE_TABLE_NAME as "SWIG_TYPE_TABLE" */
#ifdef SWIG_TYPE_TABLE
# define SWIG_QUOTE_STRING(x) #x
# define SWIG_EXPAND_AND_QUOTE_STRING(x) SWIG_QUOTE_STRING(x)
# define SWIG_TYPE_TABLE_NAME SWIG_EXPAND_AND_QUOTE_STRING(SWIG_TYPE_TABLE)
#else
# define SWIG_TYPE_TABLE_NAME
#endif

/*
  You can use the SWIGRUNTIME and SWIGRUNTIMEINLINE macros for
  creating a static or dynamic library from the SWIG runtime code.
  In 99.9% of the cases, SWIG just needs to declare them as 'static'.
  
  But only do this if strictly necessary, ie, if you have problems
  with your compiler or suchlike.
*/

#ifndef SWIGRUNTIME
# define SWIGRUNTIME SWIGINTERN
#endif

#ifndef SWIGRUNTIMEINLINE
# define SWIGRUNTIMEINLINE SWIGRUNTIME SWIGINLINE
#endif

/*  Generic buffer size */
#ifndef SWIG_BUFFER_SIZE
# define SWIG_BUFFER_SIZE 1024
#endif

/* Flags for pointer conversions */
#define SWIG_POINTER_DISOWN        0x1
#define SWIG_CAST_NEW_MEMORY       0x2

/* Flags for new pointer objects */
#define SWIG_POINTER_OWN           0x1


/* 
   Flags/methods for returning states.
   
   The SWIG conversion methods, as ConvertPtr, return and integer 
   that tells if the conversion was successful or not. And if not,
   an error code can be returned (see swigerrors.swg for the codes).
   
   Use the following macros/flags to set or process the returning
   states.
   
   In old versions of SWIG, code such as the following was usually written:

     if (SWIG_ConvertPtr(obj,vptr,ty.flags) != -1) {
       // success code
     } else {
       //fail code
     }

   Now you can be more explicit:

    int res = SWIG_ConvertPtr(obj,vptr,ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
    } else {
      // fail code
    }

   which is the same really, but now you can also do

    Type *ptr;
    int res = SWIG_ConvertPtr(obj,(void **)(&ptr),ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
      if (SWIG_IsNewObj(res) {
        ...
	delete *ptr;
      } else {
        ...
      }
    } else {
      // fail code
    }
    
   I.e., now SWIG_ConvertPtr can return new objects and you can
   identify the case and take care of the deallocation. Of course that
   also requires SWIG_ConvertPtr to return new result values, such as

      int SWIG_ConvertPtr(obj, ptr,...) {         
        if (<obj is ok>) {			       
          if (<need new object>) {		       
            *ptr = <ptr to new allocated object>; 
            return SWIG_NEWOBJ;		       
          } else {				       
            *ptr = <ptr to old object>;	       
            return SWIG_OLDOBJ;		       
          } 				       
        } else {				       
          return SWIG_BADOBJ;		       
        }					       
      }

   Of course, returning the plain '0(success)/-1(fail)' still works, but you can be
   more explicit by returning SWIG_BADOBJ, SWIG_ERROR or any of the
   SWIG errors code.

   Finally, if the SWIG_CASTRANK_MODE is enabled, the result code
   allows to return the 'cast rank', for example, if you have this

       int food(double)
       int fooi(int);

   and you call
 
      food(1)   // cast rank '1'  (1 -> 1.0)
      fooi(1)   // cast rank '0'

   just use the SWIG_AddCast()/SWIG_CheckState()
*/

#define SWIG_OK                    (0) 
#define SWIG_ERROR                 (-1)
#define SWIG_IsOK(r)               (r >= 0)
#define SWIG_ArgError(r)           ((r != SWIG_ERROR) ? r : SWIG_TypeError)  

/* The CastRankLimit says how many bits are used for the cast rank */
#define SWIG_CASTRANKLIMIT         (1 << 8)
/* The NewMask denotes the object was created (using new/malloc) */
#define SWIG_NEWOBJMASK            (SWIG_CASTRANKLIMIT  << 1)
/* The TmpMask is for in/out typemaps that use temporal objects */
#define SWIG_TMPOBJMASK            (SWIG_NEWOBJMASK << 1)
/* Simple returning values */
#define SWIG_BADOBJ                (SWIG_ERROR)
#define SWIG_OLDOBJ                (SWIG_OK)
#define SWIG_NEWOBJ                (SWIG_OK | SWIG_NEWOBJMASK)
#define SWIG_TMPOBJ                (SWIG_OK | SWIG_TMPOBJMASK)
/* Check, add and del mask methods */
#define SWIG_AddNewMask(r)         (SWIG_IsOK(r) ? (r | SWIG_NEWOBJMASK) : r)
#define SWIG_DelNewMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_NEWOBJMASK) : r)
#define SWIG_IsNewObj(r)           (SWIG_IsOK(r) && (r & SWIG_NEWOBJMASK))
#define SWIG_AddTmpMask(r)         (SWIG_IsOK(r) ? (r | SWIG_TMPOBJMASK) : r)
#define SWIG_DelTmpMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_TMPOBJMASK) : r)
#define SWIG_IsTmpObj(r)           (SWIG_IsOK(r) && (r & SWIG_TMPOBJMASK))

/* Cast-Rank Mode */
#if defined(SWIG_CASTRANK_MODE)
#  ifndef SWIG_TypeRank
#    define SWIG_TypeRank             unsigned long
#  endif
#  ifndef SWIG_MAXCASTRANK            /* Default cast allowed */
#    define SWIG_MAXCASTRANK          (2)
#  endif
#  define SWIG_CASTRANKMASK          ((SWIG_CASTRANKLIMIT) -1)
#  define SWIG_CastRank(r)           (r & SWIG_CASTRANKMASK)
SWIGINTERNINLINE int SWIG_AddCast(int r) { 
  return SWIG_IsOK(r) ? ((SWIG_CastRank(r) < SWIG_MAXCASTRANK) ? (r + 1) : SWIG_ERROR) : r;
}
SWIGINTERNINLINE int SWIG_CheckState(int r) { 
  return SWIG_IsOK(r) ? SWIG_CastRank(r) + 1 : 0; 
}
#else /* no cast-rank mode */
#  define SWIG_AddCast
#  define SWIG_CheckState(r) (SWIG_IsOK(r) ? 1 : 0)
#endif


#include <string.h>

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *, int *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

/* Structure to store information on one type */
typedef struct swig_type_info {
  const char             *name;			/* mangled name of this type */
  const char             *str;			/* human readable name of this type */
  swig_dycast_func        dcast;		/* dynamic cast function down a hierarchy */
  struct swig_cast_info  *cast;			/* linked list of types that can cast into this type */
  void                   *clientdata;		/* language specific type data */
  int                    owndata;		/* flag if the structure owns the clientdata */
} swig_type_info;

/* Structure to store a type and conversion function used for casting */
typedef struct swig_cast_info {
  swig_type_info         *type;			/* pointer to type that is equivalent to this type */
  swig_converter_func     converter;		/* function to cast the void pointers */
  struct swig_cast_info  *next;			/* pointer to next cast in linked list */
  struct swig_cast_info  *prev;			/* pointer to the previous cast */
} swig_cast_info;

/* Structure used to store module information
 * Each module generates one structure like this, and the runtime collects
 * all of these structures and stores them in a circularly linked list.*/
typedef struct swig_module_info {
  swig_type_info         **types;		/* Array of pointers to swig_type_info structures that are in this module */
  size_t                 size;		        /* Number of types in this module */
  struct swig_module_info *next;		/* Pointer to next element in circularly linked list */
  swig_type_info         **type_initial;	/* Array of initially generated type structures */
  swig_cast_info         **cast_initial;	/* Array of initially generated casting structures */
  void                    *clientdata;		/* Language specific module data */
} swig_module_info;

/* 
  Compare two type names skipping the space characters, therefore
  "char*" == "char *" and "Class<int>" == "Class<int >", etc.

  Return 0 when the two name types are equivalent, as in
  strncmp, but skipping ' '.
*/
SWIGRUNTIME int
SWIG_TypeNameComp(const char *f1, const char *l1,
		  const char *f2, const char *l2) {
  for (;(f1 != l1) && (f2 != l2); ++f1, ++f2) {
    while ((*f1 == ' ') && (f1 != l1)) ++f1;
    while ((*f2 == ' ') && (f2 != l2)) ++f2;
    if (*f1 != *f2) return (*f1 > *f2) ? 1 : -1;
  }
  return (int)((l1 - f1) - (l2 - f2));
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if not equal, 1 if equal
*/
SWIGRUNTIME int
SWIG_TypeEquiv(const char *nb, const char *tb) {
  int equiv = 0;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (!equiv && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = (SWIG_TypeNameComp(nb, ne, tb, te) == 0) ? 1 : 0;
    if (*ne) ++ne;
  }
  return equiv;
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if equal, -1 if nb < tb, 1 if nb > tb
*/
SWIGRUNTIME int
SWIG_TypeCompare(const char *nb, const char *tb) {
  int equiv = 0;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (!equiv && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = (SWIG_TypeNameComp(nb, ne, tb, te) == 0) ? 1 : 0;
    if (*ne) ++ne;
  }
  return equiv;
}


/*
  Check the typename
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheck(const char *c, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (strcmp(iter->type->name, c) == 0) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/* 
  Identical to SWIG_TypeCheck, except strcmp is replaced with a pointer comparison
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheckStruct(swig_type_info *from, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (iter->type == from) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Cast a pointer up an inheritance hierarchy
*/
SWIGRUNTIMEINLINE void *
SWIG_TypeCast(swig_cast_info *ty, void *ptr, int *newmemory) {
  return ((!ty) || (!ty->converter)) ? ptr : (*ty->converter)(ptr, newmemory);
}

/* 
   Dynamic pointer casting. Down an inheritance hierarchy
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) {
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
    ty = (*ty->dcast)(ptr);
    if (ty) lastty = ty;
  }
  return lastty;
}

/*
  Return the name associated with this type
*/
SWIGRUNTIMEINLINE const char *
SWIG_TypeName(const swig_type_info *ty) {
  return ty->name;
}

/*
  Return the pretty name associated with this type,
  that is an unmangled type name in a form presentable to the user.
*/
SWIGRUNTIME const char *
SWIG_TypePrettyName(const swig_type_info *type) {
  /* The "str" field contains the equivalent pretty names of the
     type, separated by vertical-bar characters.  We choose
     to print the last name, as it is often (?) the most
     specific. */
  if (!type) return NULL;
  if (type->str != NULL) {
    const char *last_name = type->str;
    const char *s;
    for (s = type->str; *s; s++)
      if (*s == '|') last_name = s+1;
    return last_name;
  }
  else
    return type->name;
}

/* 
   Set the clientdata field for a type
*/
SWIGRUNTIME void
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  swig_cast_info *cast = ti->cast;
  /* if (ti->clientdata == clientdata) return; */
  ti->clientdata = clientdata;
  
  while (cast) {
    if (!cast->converter) {
      swig_type_info *tc = cast->type;
      if (!tc->clientdata) {
	SWIG_TypeClientData(tc, clientdata);
      }
    }    
    cast = cast->next;
  }
}
SWIGRUNTIME void
SWIG_TypeNewClientData(swig_type_info *ti, void *clientdata) {
  SWIG_TypeClientData(ti, clientdata);
  ti->owndata = 1;
}
  
/*
  Search for a swig_type_info structure only by mangled name
  Search is a O(log #types)
  
  We start searching at module start, and finish searching when start == end.  
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_MangledTypeQueryModule(swig_module_info *start, 
                            swig_module_info *end, 
		            const char *name) {
  swig_module_info *iter = start;
  do {
    if (iter->size) {
      register size_t l = 0;
      register size_t r = iter->size - 1;
      do {
	/* since l+r >= 0, we can (>> 1) instead (/ 2) */
	register size_t i = (l + r) >> 1; 
	const char *iname = iter->types[i]->name;
	if (iname) {
	  register int compare = strcmp(name, iname);
	  if (compare == 0) {	    
	    return iter->types[i];
	  } else if (compare < 0) {
	    if (i) {
	      r = i - 1;
	    } else {
	      break;
	    }
	  } else if (compare > 0) {
	    l = i + 1;
	  }
	} else {
	  break; /* should never happen */
	}
      } while (l <= r);
    }
    iter = iter->next;
  } while (iter != end);
  return 0;
}

/*
  Search for a swig_type_info structure for either a mangled name or a human readable name.
  It first searches the mangled names of the types, which is a O(log #types)
  If a type is not found it then searches the human readable names, which is O(#types).
  
  We start searching at module start, and finish searching when start == end.  
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeQueryModule(swig_module_info *start, 
                     swig_module_info *end, 
		     const char *name) {
  /* STEP 1: Search the name field using binary search */
  swig_type_info *ret = SWIG_MangledTypeQueryModule(start, end, name);
  if (ret) {
    return ret;
  } else {
    /* STEP 2: If the type hasn't been found, do a complete search
       of the str field (the human readable name) */
    swig_module_info *iter = start;
    do {
      register size_t i = 0;
      for (; i < iter->size; ++i) {
	if (iter->types[i]->str && (SWIG_TypeEquiv(iter->types[i]->str, name)))
	  return iter->types[i];
      }
      iter = iter->next;
    } while (iter != end);
  }
  
  /* neither found a match */
  return 0;
}

/* 
   Pack binary data into a string
*/
SWIGRUNTIME char *
SWIG_PackData(char *c, void *ptr, size_t sz) {
  static const char hex[17] = "0123456789abcdef";
  register const unsigned char *u = (unsigned char *) ptr;
  register const unsigned char *eu =  u + sz;
  for (; u != eu; ++u) {
    register unsigned char uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/* 
   Unpack binary data from a string
*/
SWIGRUNTIME const char *
SWIG_UnpackData(const char *c, void *ptr, size_t sz) {
  register unsigned char *u = (unsigned char *) ptr;
  register const unsigned char *eu = u + sz;
  for (; u != eu; ++u) {
    register char d = *(c++);
    register unsigned char uu;
    if ((d >= '0') && (d <= '9'))
      uu = ((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = ((d - ('a'-10)) << 4);
    else 
      return (char *) 0;
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (d - ('a'-10));
    else 
      return (char *) 0;
    *u = uu;
  }
  return c;
}

/* 
   Pack 'void *' into a string buffer.
*/
SWIGRUNTIME char *
SWIG_PackVoidPtr(char *buff, void *ptr, const char *name, size_t bsz) {
  char *r = buff;
  if ((2*sizeof(void *) + 2) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,&ptr,sizeof(void *));
  if (strlen(name) + 1 > (bsz - (r - buff))) return 0;
  strcpy(r,name);
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackVoidPtr(const char *c, void **ptr, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      *ptr = (void *) 0;
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sizeof(void *));
}

SWIGRUNTIME char *
SWIG_PackDataName(char *buff, void *ptr, size_t sz, const char *name, size_t bsz) {
  char *r = buff;
  size_t lname = (name ? strlen(name) : 0);
  if ((2*sz + 2 + lname) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  if (lname) {
    strncpy(r,name,lname+1);
  } else {
    *r = 0;
  }
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackDataName(const char *c, void *ptr, size_t sz, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      memset(ptr,0,sz);
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sz);
}

#ifdef __cplusplus
}
#endif

/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1 
#define  SWIG_IOError        	   -2 
#define  SWIG_RuntimeError   	   -3 
#define  SWIG_IndexError     	   -4 
#define  SWIG_TypeError      	   -5 
#define  SWIG_DivisionByZero 	   -6 
#define  SWIG_OverflowError  	   -7 
#define  SWIG_SyntaxError    	   -8 
#define  SWIG_ValueError     	   -9 
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12 
#define  SWIG_NullReferenceError   -13



/* Compatibility macros for Python 3 */
#if PY_VERSION_HEX >= 0x03000000

#define PyClass_Check(obj) PyObject_IsInstance(obj, (PyObject *)&PyType_Type)
#define PyInt_Check(x) PyLong_Check(x)
#define PyInt_AsLong(x) PyLong_AsLong(x)
#define PyInt_FromLong(x) PyLong_FromLong(x)
#define PyString_Format(fmt, args)  PyUnicode_Format(fmt, args)

#endif

#ifndef Py_TYPE
#  define Py_TYPE(op) ((op)->ob_type)
#endif

/* SWIG APIs for compatibility of both Python 2 & 3 */

#if PY_VERSION_HEX >= 0x03000000
#  define SWIG_Python_str_FromFormat PyUnicode_FromFormat
#else
#  define SWIG_Python_str_FromFormat PyString_FromFormat
#endif


/* Warning: This function will allocate a new string in Python 3,
 * so please call SWIG_Python_str_DelForPy3(x) to free the space.
 */
SWIGINTERN char*
SWIG_Python_str_AsChar(PyObject *str)
{
#if PY_VERSION_HEX >= 0x03000000
  char *cstr;
  char *newstr;
  Py_ssize_t len;
  str = PyUnicode_AsUTF8String(str);
  PyBytes_AsStringAndSize(str, &cstr, &len);
  newstr = (char *) malloc(len+1);
  memcpy(newstr, cstr, len+1);
  Py_XDECREF(str);
  return newstr;
#else
  return PyString_AsString(str);
#endif
}

#if PY_VERSION_HEX >= 0x03000000
#  define SWIG_Python_str_DelForPy3(x) free( (void*) (x) )
#else
#  define SWIG_Python_str_DelForPy3(x) 
#endif


SWIGINTERN PyObject*
SWIG_Python_str_FromChar(const char *c)
{
#if PY_VERSION_HEX >= 0x03000000
  return PyUnicode_FromString(c); 
#else
  return PyString_FromString(c);
#endif
}

/* Add PyOS_snprintf for old Pythons */
#if PY_VERSION_HEX < 0x02020000
# if defined(_MSC_VER) || defined(__BORLANDC__) || defined(_WATCOM)
#  define PyOS_snprintf _snprintf
# else
#  define PyOS_snprintf snprintf
# endif
#endif

/* A crude PyString_FromFormat implementation for old Pythons */
#if PY_VERSION_HEX < 0x02020000

#ifndef SWIG_PYBUFFER_SIZE
# define SWIG_PYBUFFER_SIZE 1024
#endif

static PyObject *
PyString_FromFormat(const char *fmt, ...) {
  va_list ap;
  char buf[SWIG_PYBUFFER_SIZE * 2];
  int res;
  va_start(ap, fmt);
  res = vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return (res < 0 || res >= (int)sizeof(buf)) ? 0 : PyString_FromString(buf);
}
#endif

/* Add PyObject_Del for old Pythons */
#if PY_VERSION_HEX < 0x01060000
# define PyObject_Del(op) PyMem_DEL((op))
#endif
#ifndef PyObject_DEL
# define PyObject_DEL PyObject_Del
#endif

/* A crude PyExc_StopIteration exception for old Pythons */
#if PY_VERSION_HEX < 0x02020000
# ifndef PyExc_StopIteration
#  define PyExc_StopIteration PyExc_RuntimeError
# endif
# ifndef PyObject_GenericGetAttr
#  define PyObject_GenericGetAttr 0
# endif
#endif

/* Py_NotImplemented is defined in 2.1 and up. */
#if PY_VERSION_HEX < 0x02010000
# ifndef Py_NotImplemented
#  define Py_NotImplemented PyExc_RuntimeError
# endif
#endif

/* A crude PyString_AsStringAndSize implementation for old Pythons */
#if PY_VERSION_HEX < 0x02010000
# ifndef PyString_AsStringAndSize
#  define PyString_AsStringAndSize(obj, s, len) {*s = PyString_AsString(obj); *len = *s ? strlen(*s) : 0;}
# endif
#endif

/* PySequence_Size for old Pythons */
#if PY_VERSION_HEX < 0x02000000
# ifndef PySequence_Size
#  define PySequence_Size PySequence_Length
# endif
#endif

/* PyBool_FromLong for old Pythons */
#if PY_VERSION_HEX < 0x02030000
static
PyObject *PyBool_FromLong(long ok)
{
  PyObject *result = ok ? Py_True : Py_False;
  Py_INCREF(result);
  return result;
}
#endif

/* Py_ssize_t for old Pythons */
/* This code is as recommended by: */
/* http://www.python.org/dev/peps/pep-0353/#conversion-guidelines */
#if PY_VERSION_HEX < 0x02050000 && !defined(PY_SSIZE_T_MIN)
typedef int Py_ssize_t;
# define PY_SSIZE_T_MAX INT_MAX
# define PY_SSIZE_T_MIN INT_MIN
#endif

/* -----------------------------------------------------------------------------
 * error manipulation
 * ----------------------------------------------------------------------------- */

SWIGRUNTIME PyObject*
SWIG_Python_ErrorType(int code) {
  PyObject* type = 0;
  switch(code) {
  case SWIG_MemoryError:
    type = PyExc_MemoryError;
    break;
  case SWIG_IOError:
    type = PyExc_IOError;
    break;
  case SWIG_RuntimeError:
    type = PyExc_RuntimeError;
    break;
  case SWIG_IndexError:
    type = PyExc_IndexError;
    break;
  case SWIG_TypeError:
    type = PyExc_TypeError;
    break;
  case SWIG_DivisionByZero:
    type = PyExc_ZeroDivisionError;
    break;
  case SWIG_OverflowError:
    type = PyExc_OverflowError;
    break;
  case SWIG_SyntaxError:
    type = PyExc_SyntaxError;
    break;
  case SWIG_ValueError:
    type = PyExc_ValueError;
    break;
  case SWIG_SystemError:
    type = PyExc_SystemError;
    break;
  case SWIG_AttributeError:
    type = PyExc_AttributeError;
    break;
  default:
    type = PyExc_RuntimeError;
  }
  return type;
}


SWIGRUNTIME void
SWIG_Python_AddErrorMsg(const char* mesg)
{
  PyObject *type = 0;
  PyObject *value = 0;
  PyObject *traceback = 0;

  if (PyErr_Occurred()) PyErr_Fetch(&type, &value, &traceback);
  if (value) {
    char *tmp;
    PyObject *old_str = PyObject_Str(value);
    PyErr_Clear();
    Py_XINCREF(type);

    PyErr_Format(type, "%s %s", tmp = SWIG_Python_str_AsChar(old_str), mesg);
    SWIG_Python_str_DelForPy3(tmp);
    Py_DECREF(old_str);
    Py_DECREF(value);
  } else {
    PyErr_SetString(PyExc_RuntimeError, mesg);
  }
}

#if defined(SWIG_PYTHON_NO_THREADS)
#  if defined(SWIG_PYTHON_THREADS)
#    undef SWIG_PYTHON_THREADS
#  endif
#endif
#if defined(SWIG_PYTHON_THREADS) /* Threading support is enabled */
#  if !defined(SWIG_PYTHON_USE_GIL) && !defined(SWIG_PYTHON_NO_USE_GIL)
#    if (PY_VERSION_HEX >= 0x02030000) /* For 2.3 or later, use the PyGILState calls */
#      define SWIG_PYTHON_USE_GIL
#    endif
#  endif
#  if defined(SWIG_PYTHON_USE_GIL) /* Use PyGILState threads calls */
#    ifndef SWIG_PYTHON_INITIALIZE_THREADS
#     define SWIG_PYTHON_INITIALIZE_THREADS  PyEval_InitThreads() 
#    endif
#    ifdef __cplusplus /* C++ code */
       class SWIG_Python_Thread_Block {
         bool status;
         PyGILState_STATE state;
       public:
         void end() { if (status) { PyGILState_Release(state); status = false;} }
         SWIG_Python_Thread_Block() : status(true), state(PyGILState_Ensure()) {}
         ~SWIG_Python_Thread_Block() { end(); }
       };
       class SWIG_Python_Thread_Allow {
         bool status;
         PyThreadState *save;
       public:
         void end() { if (status) { PyEval_RestoreThread(save); status = false; }}
         SWIG_Python_Thread_Allow() : status(true), save(PyEval_SaveThread()) {}
         ~SWIG_Python_Thread_Allow() { end(); }
       };
#      define SWIG_PYTHON_THREAD_BEGIN_BLOCK   SWIG_Python_Thread_Block _swig_thread_block
#      define SWIG_PYTHON_THREAD_END_BLOCK     _swig_thread_block.end()
#      define SWIG_PYTHON_THREAD_BEGIN_ALLOW   SWIG_Python_Thread_Allow _swig_thread_allow
#      define SWIG_PYTHON_THREAD_END_ALLOW     _swig_thread_allow.end()
#    else /* C code */
#      define SWIG_PYTHON_THREAD_BEGIN_BLOCK   PyGILState_STATE _swig_thread_block = PyGILState_Ensure()
#      define SWIG_PYTHON_THREAD_END_BLOCK     PyGILState_Release(_swig_thread_block)
#      define SWIG_PYTHON_THREAD_BEGIN_ALLOW   PyThreadState *_swig_thread_allow = PyEval_SaveThread()
#      define SWIG_PYTHON_THREAD_END_ALLOW     PyEval_RestoreThread(_swig_thread_allow)
#    endif
#  else /* Old thread way, not implemented, user must provide it */
#    if !defined(SWIG_PYTHON_INITIALIZE_THREADS)
#      define SWIG_PYTHON_INITIALIZE_THREADS
#    endif
#    if !defined(SWIG_PYTHON_THREAD_BEGIN_BLOCK)
#      define SWIG_PYTHON_THREAD_BEGIN_BLOCK
#    endif
#    if !defined(SWIG_PYTHON_THREAD_END_BLOCK)
#      define SWIG_PYTHON_THREAD_END_BLOCK
#    endif
#    if !defined(SWIG_PYTHON_THREAD_BEGIN_ALLOW)
#      define SWIG_PYTHON_THREAD_BEGIN_ALLOW
#    endif
#    if !defined(SWIG_PYTHON_THREAD_END_ALLOW)
#      define SWIG_PYTHON_THREAD_END_ALLOW
#    endif
#  endif
#else /* No thread support */
#  define SWIG_PYTHON_INITIALIZE_THREADS
#  define SWIG_PYTHON_THREAD_BEGIN_BLOCK
#  define SWIG_PYTHON_THREAD_END_BLOCK
#  define SWIG_PYTHON_THREAD_BEGIN_ALLOW
#  define SWIG_PYTHON_THREAD_END_ALLOW
#endif

/* -----------------------------------------------------------------------------
 * Python API portion that goes into the runtime
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#if 0
} /* cc-mode */
#endif
#endif

/* -----------------------------------------------------------------------------
 * Constant declarations
 * ----------------------------------------------------------------------------- */

/* Constant Types */
#define SWIG_PY_POINTER 4
#define SWIG_PY_BINARY  5

/* Constant information structure */
typedef struct swig_const_info {
  int type;
  char *name;
  long lvalue;
  double dvalue;
  void   *pvalue;
  swig_type_info **ptype;
} swig_const_info;


/* -----------------------------------------------------------------------------
 * Wrapper of PyInstanceMethod_New() used in Python 3
 * It is exported to the generated module, used for -fastproxy
 * ----------------------------------------------------------------------------- */
SWIGRUNTIME PyObject* SWIG_PyInstanceMethod_New(PyObject *self, PyObject *func)
{
#if PY_VERSION_HEX >= 0x03000000
  return PyInstanceMethod_New(func);
#else
  return NULL;
#endif
}

#ifdef __cplusplus
#if 0
{ /* cc-mode */
#endif
}
#endif


/* -----------------------------------------------------------------------------
 * pyrun.swg
 *
 * This file contains the runtime support for Python modules
 * and includes code for managing global variables and pointer
 * type checking.
 *
 * ----------------------------------------------------------------------------- */

/* Common SWIG API */

/* for raw pointers */
#define SWIG_Python_ConvertPtr(obj, pptr, type, flags)  SWIG_Python_ConvertPtrAndOwn(obj, pptr, type, flags, 0)
#define SWIG_ConvertPtr(obj, pptr, type, flags)         SWIG_Python_ConvertPtr(obj, pptr, type, flags)
#define SWIG_ConvertPtrAndOwn(obj,pptr,type,flags,own)  SWIG_Python_ConvertPtrAndOwn(obj, pptr, type, flags, own)
#define SWIG_NewPointerObj(ptr, type, flags)            SWIG_Python_NewPointerObj(ptr, type, flags)
#define SWIG_CheckImplicit(ty)                          SWIG_Python_CheckImplicit(ty) 
#define SWIG_AcquirePtr(ptr, src)                       SWIG_Python_AcquirePtr(ptr, src)
#define swig_owntype                                    int

/* for raw packed data */
#define SWIG_ConvertPacked(obj, ptr, sz, ty)            SWIG_Python_ConvertPacked(obj, ptr, sz, ty)
#define SWIG_NewPackedObj(ptr, sz, type)                SWIG_Python_NewPackedObj(ptr, sz, type)

/* for class or struct pointers */
#define SWIG_ConvertInstance(obj, pptr, type, flags)    SWIG_ConvertPtr(obj, pptr, type, flags)
#define SWIG_NewInstanceObj(ptr, type, flags)           SWIG_NewPointerObj(ptr, type, flags)

/* for C or C++ function pointers */
#define SWIG_ConvertFunctionPtr(obj, pptr, type)        SWIG_Python_ConvertFunctionPtr(obj, pptr, type)
#define SWIG_NewFunctionPtrObj(ptr, type)               SWIG_Python_NewPointerObj(ptr, type, 0)

/* for C++ member pointers, ie, member methods */
#define SWIG_ConvertMember(obj, ptr, sz, ty)            SWIG_Python_ConvertPacked(obj, ptr, sz, ty)
#define SWIG_NewMemberObj(ptr, sz, type)                SWIG_Python_NewPackedObj(ptr, sz, type)


/* Runtime API */

#define SWIG_GetModule(clientdata)                      SWIG_Python_GetModule()
#define SWIG_SetModule(clientdata, pointer)             SWIG_Python_SetModule(pointer)
#define SWIG_NewClientData(obj)                         SwigPyClientData_New(obj)

#define SWIG_SetErrorObj                                SWIG_Python_SetErrorObj                            
#define SWIG_SetErrorMsg                        	SWIG_Python_SetErrorMsg				   
#define SWIG_ErrorType(code)                    	SWIG_Python_ErrorType(code)                        
#define SWIG_Error(code, msg)            		SWIG_Python_SetErrorMsg(SWIG_ErrorType(code), msg) 
#define SWIG_fail                        		goto fail					   


/* Runtime API implementation */

/* Error manipulation */

SWIGINTERN void 
SWIG_Python_SetErrorObj(PyObject *errtype, PyObject *obj) {
  SWIG_PYTHON_THREAD_BEGIN_BLOCK; 
  PyErr_SetObject(errtype, obj);
  Py_DECREF(obj);
  SWIG_PYTHON_THREAD_END_BLOCK;
}

SWIGINTERN void 
SWIG_Python_SetErrorMsg(PyObject *errtype, const char *msg) {
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  PyErr_SetString(errtype, (char *) msg);
  SWIG_PYTHON_THREAD_END_BLOCK;
}

#define SWIG_Python_Raise(obj, type, desc)  SWIG_Python_SetErrorObj(SWIG_Python_ExceptionType(desc), obj)

/* Set a constant value */

SWIGINTERN void
SWIG_Python_SetConstant(PyObject *d, const char *name, PyObject *obj) {   
  PyDict_SetItemString(d, (char*) name, obj);
  Py_DECREF(obj);                            
}

/* Append a value to the result obj */

SWIGINTERN PyObject*
SWIG_Python_AppendOutput(PyObject* result, PyObject* obj) {
#if !defined(SWIG_PYTHON_OUTPUT_TUPLE)
  if (!result) {
    result = obj;
  } else if (result == Py_None) {
    Py_DECREF(result);
    result = obj;
  } else {
    if (!PyList_Check(result)) {
      PyObject *o2 = result;
      result = PyList_New(1);
      PyList_SetItem(result, 0, o2);
    }
    PyList_Append(result,obj);
    Py_DECREF(obj);
  }
  return result;
#else
  PyObject*   o2;
  PyObject*   o3;
  if (!result) {
    result = obj;
  } else if (result == Py_None) {
    Py_DECREF(result);
    result = obj;
  } else {
    if (!PyTuple_Check(result)) {
      o2 = result;
      result = PyTuple_New(1);
      PyTuple_SET_ITEM(result, 0, o2);
    }
    o3 = PyTuple_New(1);
    PyTuple_SET_ITEM(o3, 0, obj);
    o2 = result;
    result = PySequence_Concat(o2, o3);
    Py_DECREF(o2);
    Py_DECREF(o3);
  }
  return result;
#endif
}

/* Unpack the argument tuple */

SWIGINTERN int
SWIG_Python_UnpackTuple(PyObject *args, const char *name, Py_ssize_t min, Py_ssize_t max, PyObject **objs)
{
  if (!args) {
    if (!min && !max) {
      return 1;
    } else {
      PyErr_Format(PyExc_TypeError, "%s expected %s%d arguments, got none", 
		   name, (min == max ? "" : "at least "), (int)min);
      return 0;
    }
  }  
  if (!PyTuple_Check(args)) {
    PyErr_SetString(PyExc_SystemError, "UnpackTuple() argument list is not a tuple");
    return 0;
  } else {
    register Py_ssize_t l = PyTuple_GET_SIZE(args);
    if (l < min) {
      PyErr_Format(PyExc_TypeError, "%s expected %s%d arguments, got %d", 
		   name, (min == max ? "" : "at least "), (int)min, (int)l);
      return 0;
    } else if (l > max) {
      PyErr_Format(PyExc_TypeError, "%s expected %s%d arguments, got %d", 
		   name, (min == max ? "" : "at most "), (int)max, (int)l);
      return 0;
    } else {
      register int i;
      for (i = 0; i < l; ++i) {
	objs[i] = PyTuple_GET_ITEM(args, i);
      }
      for (; l < max; ++l) {
	objs[l] = 0;
      }
      return i + 1;
    }    
  }
}

/* A functor is a function object with one single object argument */
#if PY_VERSION_HEX >= 0x02020000
#define SWIG_Python_CallFunctor(functor, obj)	        PyObject_CallFunctionObjArgs(functor, obj, NULL);
#else
#define SWIG_Python_CallFunctor(functor, obj)	        PyObject_CallFunction(functor, "O", obj);
#endif

/*
  Helper for static pointer initialization for both C and C++ code, for example
  static PyObject *SWIG_STATIC_POINTER(MyVar) = NewSomething(...);
*/
#ifdef __cplusplus
#define SWIG_STATIC_POINTER(var)  var
#else
#define SWIG_STATIC_POINTER(var)  var = 0; if (!var) var
#endif

/* -----------------------------------------------------------------------------
 * Pointer declarations
 * ----------------------------------------------------------------------------- */

/* Flags for new pointer objects */
#define SWIG_POINTER_NOSHADOW       (SWIG_POINTER_OWN      << 1)
#define SWIG_POINTER_NEW            (SWIG_POINTER_NOSHADOW | SWIG_POINTER_OWN)

#define SWIG_POINTER_IMPLICIT_CONV  (SWIG_POINTER_DISOWN   << 1)

#ifdef __cplusplus
extern "C" {
#if 0
} /* cc-mode */
#endif
#endif

/*  How to access Py_None */
#if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#  ifndef SWIG_PYTHON_NO_BUILD_NONE
#    ifndef SWIG_PYTHON_BUILD_NONE
#      define SWIG_PYTHON_BUILD_NONE
#    endif
#  endif
#endif

#ifdef SWIG_PYTHON_BUILD_NONE
#  ifdef Py_None
#   undef Py_None
#   define Py_None SWIG_Py_None()
#  endif
SWIGRUNTIMEINLINE PyObject * 
_SWIG_Py_None(void)
{
  PyObject *none = Py_BuildValue((char*)"");
  Py_DECREF(none);
  return none;
}
SWIGRUNTIME PyObject * 
SWIG_Py_None(void)
{
  static PyObject *SWIG_STATIC_POINTER(none) = _SWIG_Py_None();
  return none;
}
#endif

/* The python void return value */

SWIGRUNTIMEINLINE PyObject * 
SWIG_Py_Void(void)
{
  PyObject *none = Py_None;
  Py_INCREF(none);
  return none;
}

/* SwigPyClientData */

typedef struct {
  PyObject *klass;
  PyObject *newraw;
  PyObject *newargs;
  PyObject *destroy;
  int delargs;
  int implicitconv;
} SwigPyClientData;

SWIGRUNTIMEINLINE int 
SWIG_Python_CheckImplicit(swig_type_info *ty)
{
  SwigPyClientData *data = (SwigPyClientData *)ty->clientdata;
  return data ? data->implicitconv : 0;
}

SWIGRUNTIMEINLINE PyObject *
SWIG_Python_ExceptionType(swig_type_info *desc) {
  SwigPyClientData *data = desc ? (SwigPyClientData *) desc->clientdata : 0;
  PyObject *klass = data ? data->klass : 0;
  return (klass ? klass : PyExc_RuntimeError);
}


SWIGRUNTIME SwigPyClientData * 
SwigPyClientData_New(PyObject* obj)
{
  if (!obj) {
    return 0;
  } else {
    SwigPyClientData *data = (SwigPyClientData *)malloc(sizeof(SwigPyClientData));
    /* the klass element */
    data->klass = obj;
    Py_INCREF(data->klass);
    /* the newraw method and newargs arguments used to create a new raw instance */
    if (PyClass_Check(obj)) {
      data->newraw = 0;
      data->newargs = obj;
      Py_INCREF(obj);
    } else {
#if (PY_VERSION_HEX < 0x02020000)
      data->newraw = 0;
#else
      data->newraw = PyObject_GetAttrString(data->klass, (char *)"__new__");
#endif
      if (data->newraw) {
	Py_INCREF(data->newraw);
	data->newargs = PyTuple_New(1);
	PyTuple_SetItem(data->newargs, 0, obj);
      } else {
	data->newargs = obj;
      }
      Py_INCREF(data->newargs);
    }
    /* the destroy method, aka as the C++ delete method */
    data->destroy = PyObject_GetAttrString(data->klass, (char *)"__swig_destroy__");
    if (PyErr_Occurred()) {
      PyErr_Clear();
      data->destroy = 0;
    }
    if (data->destroy) {
      int flags;
      Py_INCREF(data->destroy);
      flags = PyCFunction_GET_FLAGS(data->destroy);
#ifdef METH_O
      data->delargs = !(flags & (METH_O));
#else
      data->delargs = 0;
#endif
    } else {
      data->delargs = 0;
    }
    data->implicitconv = 0;
    return data;
  }
}

SWIGRUNTIME void 
SwigPyClientData_Del(SwigPyClientData* data)
{
  Py_XDECREF(data->newraw);
  Py_XDECREF(data->newargs);
  Py_XDECREF(data->destroy);
}

/* =============== SwigPyObject =====================*/

typedef struct {
  PyObject_HEAD
  void *ptr;
  swig_type_info *ty;
  int own;
  PyObject *next;
} SwigPyObject;

SWIGRUNTIME PyObject *
SwigPyObject_long(SwigPyObject *v)
{
  return PyLong_FromVoidPtr(v->ptr);
}

SWIGRUNTIME PyObject *
SwigPyObject_format(const char* fmt, SwigPyObject *v)
{
  PyObject *res = NULL;
  PyObject *args = PyTuple_New(1);
  if (args) {
    if (PyTuple_SetItem(args, 0, SwigPyObject_long(v)) == 0) {
      PyObject *ofmt = SWIG_Python_str_FromChar(fmt);
      if (ofmt) {
#if PY_VERSION_HEX >= 0x03000000
	res = PyUnicode_Format(ofmt,args);
#else
	res = PyString_Format(ofmt,args);
#endif
	Py_DECREF(ofmt);
      }
      Py_DECREF(args);
    }
  }
  return res;
}

SWIGRUNTIME PyObject *
SwigPyObject_oct(SwigPyObject *v)
{
  return SwigPyObject_format("%o",v);
}

SWIGRUNTIME PyObject *
SwigPyObject_hex(SwigPyObject *v)
{
  return SwigPyObject_format("%x",v);
}

SWIGRUNTIME PyObject *
#ifdef METH_NOARGS
SwigPyObject_repr(SwigPyObject *v)
#else
SwigPyObject_repr(SwigPyObject *v, PyObject *args)
#endif
{
  const char *name = SWIG_TypePrettyName(v->ty);
  PyObject *repr = SWIG_Python_str_FromFormat("<Swig Object of type '%s' at %p>", name, v);
  if (v->next) {
#ifdef METH_NOARGS
    PyObject *nrep = SwigPyObject_repr((SwigPyObject *)v->next);
#else
    PyObject *nrep = SwigPyObject_repr((SwigPyObject *)v->next, args);
#endif
#if PY_VERSION_HEX >= 0x03000000
    PyObject *joined = PyUnicode_Concat(repr, nrep);
    Py_DecRef(repr);
    Py_DecRef(nrep);
    repr = joined;
#else
    PyString_ConcatAndDel(&repr,nrep);
#endif
  }
  return repr;  
}

SWIGRUNTIME int
SwigPyObject_print(SwigPyObject *v, FILE *fp, int SWIGUNUSEDPARM(flags))
{
  char *str;
#ifdef METH_NOARGS
  PyObject *repr = SwigPyObject_repr(v);
#else
  PyObject *repr = SwigPyObject_repr(v, NULL);
#endif
  if (repr) {
    str = SWIG_Python_str_AsChar(repr); 
    fputs(str, fp);
    SWIG_Python_str_DelForPy3(str);
    Py_DECREF(repr);
    return 0; 
  } else {
    return 1; 
  }
}

SWIGRUNTIME PyObject *
SwigPyObject_str(SwigPyObject *v)
{
  char result[SWIG_BUFFER_SIZE];
  return SWIG_PackVoidPtr(result, v->ptr, v->ty->name, sizeof(result)) ?
    SWIG_Python_str_FromChar(result) : 0;
}

SWIGRUNTIME int
SwigPyObject_compare(SwigPyObject *v, SwigPyObject *w)
{
  void *i = v->ptr;
  void *j = w->ptr;
  return (i < j) ? -1 : ((i > j) ? 1 : 0);
}

/* Added for Python 3.x, would it also be useful for Python 2.x? */
SWIGRUNTIME PyObject*
SwigPyObject_richcompare(SwigPyObject *v, SwigPyObject *w, int op)
{
  PyObject* res;
  if( op != Py_EQ && op != Py_NE ) {
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
  }
  if( (SwigPyObject_compare(v, w)==0) == (op == Py_EQ) )
    res = Py_True;
  else
    res = Py_False;
  Py_INCREF(res);
  return res;  
}


SWIGRUNTIME PyTypeObject* _PySwigObject_type(void);

SWIGRUNTIME PyTypeObject*
SwigPyObject_type(void) {
  static PyTypeObject *SWIG_STATIC_POINTER(type) = _PySwigObject_type();
  return type;
}

SWIGRUNTIMEINLINE int
SwigPyObject_Check(PyObject *op) {
  return (Py_TYPE(op) == SwigPyObject_type())
    || (strcmp(Py_TYPE(op)->tp_name,"SwigPyObject") == 0);
}

SWIGRUNTIME PyObject *
SwigPyObject_New(void *ptr, swig_type_info *ty, int own);

SWIGRUNTIME void
SwigPyObject_dealloc(PyObject *v)
{
  SwigPyObject *sobj = (SwigPyObject *) v;
  PyObject *next = sobj->next;
  if (sobj->own == SWIG_POINTER_OWN) {
    swig_type_info *ty = sobj->ty;
    SwigPyClientData *data = ty ? (SwigPyClientData *) ty->clientdata : 0;
    PyObject *destroy = data ? data->destroy : 0;
    if (destroy) {
      /* destroy is always a VARARGS method */
      PyObject *res;
      if (data->delargs) {
	/* we need to create a temporary object to carry the destroy operation */
	PyObject *tmp = SwigPyObject_New(sobj->ptr, ty, 0);
	res = SWIG_Python_CallFunctor(destroy, tmp);
	Py_DECREF(tmp);
      } else {
	PyCFunction meth = PyCFunction_GET_FUNCTION(destroy);
	PyObject *mself = PyCFunction_GET_SELF(destroy);
	res = ((*meth)(mself, v));
      }
      Py_XDECREF(res);
    } 
#if !defined(SWIG_PYTHON_SILENT_MEMLEAK)
    else {
      const char *name = SWIG_TypePrettyName(ty);
      printf("swig/python detected a memory leak of type '%s', no destructor found.\n", (name ? name : "unknown"));
    }
#endif
  } 
  Py_XDECREF(next);
  PyObject_DEL(v);
}

SWIGRUNTIME PyObject* 
SwigPyObject_append(PyObject* v, PyObject* next)
{
  SwigPyObject *sobj = (SwigPyObject *) v;
#ifndef METH_O
  PyObject *tmp = 0;
  if (!PyArg_ParseTuple(next,(char *)"O:append", &tmp)) return NULL;
  next = tmp;
#endif
  if (!SwigPyObject_Check(next)) {
    return NULL;
  }
  sobj->next = next;
  Py_INCREF(next);
  return SWIG_Py_Void();
}

SWIGRUNTIME PyObject* 
#ifdef METH_NOARGS
SwigPyObject_next(PyObject* v)
#else
SwigPyObject_next(PyObject* v, PyObject *SWIGUNUSEDPARM(args))
#endif
{
  SwigPyObject *sobj = (SwigPyObject *) v;
  if (sobj->next) {    
    Py_INCREF(sobj->next);
    return sobj->next;
  } else {
    return SWIG_Py_Void();
  }
}

SWIGINTERN PyObject*
#ifdef METH_NOARGS
SwigPyObject_disown(PyObject *v)
#else
SwigPyObject_disown(PyObject* v, PyObject *SWIGUNUSEDPARM(args))
#endif
{
  SwigPyObject *sobj = (SwigPyObject *)v;
  sobj->own = 0;
  return SWIG_Py_Void();
}

SWIGINTERN PyObject*
#ifdef METH_NOARGS
SwigPyObject_acquire(PyObject *v)
#else
SwigPyObject_acquire(PyObject* v, PyObject *SWIGUNUSEDPARM(args))
#endif
{
  SwigPyObject *sobj = (SwigPyObject *)v;
  sobj->own = SWIG_POINTER_OWN;
  return SWIG_Py_Void();
}

SWIGINTERN PyObject*
SwigPyObject_own(PyObject *v, PyObject *args)
{
  PyObject *val = 0;
#if (PY_VERSION_HEX < 0x02020000)
  if (!PyArg_ParseTuple(args,(char *)"|O:own",&val))
#else
  if (!PyArg_UnpackTuple(args, (char *)"own", 0, 1, &val)) 
#endif
    {
      return NULL;
    } 
  else
    {
      SwigPyObject *sobj = (SwigPyObject *)v;
      PyObject *obj = PyBool_FromLong(sobj->own);
      if (val) {
#ifdef METH_NOARGS
	if (PyObject_IsTrue(val)) {
	  SwigPyObject_acquire(v);
	} else {
	  SwigPyObject_disown(v);
	}
#else
	if (PyObject_IsTrue(val)) {
	  SwigPyObject_acquire(v,args);
	} else {
	  SwigPyObject_disown(v,args);
	}
#endif
      } 
      return obj;
    }
}

#ifdef METH_O
static PyMethodDef
swigobject_methods[] = {
  {(char *)"disown",  (PyCFunction)SwigPyObject_disown,  METH_NOARGS,  (char *)"releases ownership of the pointer"},
  {(char *)"acquire", (PyCFunction)SwigPyObject_acquire, METH_NOARGS,  (char *)"aquires ownership of the pointer"},
  {(char *)"own",     (PyCFunction)SwigPyObject_own,     METH_VARARGS, (char *)"returns/sets ownership of the pointer"},
  {(char *)"append",  (PyCFunction)SwigPyObject_append,  METH_O,       (char *)"appends another 'this' object"},
  {(char *)"next",    (PyCFunction)SwigPyObject_next,    METH_NOARGS,  (char *)"returns the next 'this' object"},
  {(char *)"__repr__",(PyCFunction)SwigPyObject_repr,    METH_NOARGS,  (char *)"returns object representation"},
  {0, 0, 0, 0}  
};
#else
static PyMethodDef
swigobject_methods[] = {
  {(char *)"disown",  (PyCFunction)SwigPyObject_disown,  METH_VARARGS,  (char *)"releases ownership of the pointer"},
  {(char *)"acquire", (PyCFunction)SwigPyObject_acquire, METH_VARARGS,  (char *)"aquires ownership of the pointer"},
  {(char *)"own",     (PyCFunction)SwigPyObject_own,     METH_VARARGS,  (char *)"returns/sets ownership of the pointer"},
  {(char *)"append",  (PyCFunction)SwigPyObject_append,  METH_VARARGS,  (char *)"appends another 'this' object"},
  {(char *)"next",    (PyCFunction)SwigPyObject_next,    METH_VARARGS,  (char *)"returns the next 'this' object"},
  {(char *)"__repr__",(PyCFunction)SwigPyObject_repr,   METH_VARARGS,  (char *)"returns object representation"},
  {0, 0, 0, 0}  
};
#endif

#if PY_VERSION_HEX < 0x02020000
SWIGINTERN PyObject *
SwigPyObject_getattr(SwigPyObject *sobj,char *name)
{
  return Py_FindMethod(swigobject_methods, (PyObject *)sobj, name);
}
#endif

SWIGRUNTIME PyTypeObject*
_PySwigObject_type(void) {
  static char swigobject_doc[] = "Swig object carries a C/C++ instance pointer";
  
  static PyNumberMethods SwigPyObject_as_number = {
    (binaryfunc)0, /*nb_add*/
    (binaryfunc)0, /*nb_subtract*/
    (binaryfunc)0, /*nb_multiply*/
    /* nb_divide removed in Python 3 */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc)0, /*nb_divide*/
#endif
    (binaryfunc)0, /*nb_remainder*/
    (binaryfunc)0, /*nb_divmod*/
    (ternaryfunc)0,/*nb_power*/
    (unaryfunc)0,  /*nb_negative*/
    (unaryfunc)0,  /*nb_positive*/
    (unaryfunc)0,  /*nb_absolute*/
    (inquiry)0,    /*nb_nonzero*/
    0,		   /*nb_invert*/
    0,		   /*nb_lshift*/
    0,		   /*nb_rshift*/
    0,		   /*nb_and*/
    0,		   /*nb_xor*/
    0,		   /*nb_or*/
#if PY_VERSION_HEX < 0x03000000
    0,   /*nb_coerce*/
#endif
    (unaryfunc)SwigPyObject_long, /*nb_int*/
#if PY_VERSION_HEX < 0x03000000
    (unaryfunc)SwigPyObject_long, /*nb_long*/
#else
    0, /*nb_reserved*/
#endif
    (unaryfunc)0,                 /*nb_float*/
#if PY_VERSION_HEX < 0x03000000
    (unaryfunc)SwigPyObject_oct,  /*nb_oct*/
    (unaryfunc)SwigPyObject_hex,  /*nb_hex*/
#endif
#if PY_VERSION_HEX >= 0x03000000 /* 3.0 */
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_index, nb_inplace_divide removed */
#elif PY_VERSION_HEX >= 0x02050000 /* 2.5.0 */
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_index */
#elif PY_VERSION_HEX >= 0x02020000 /* 2.2.0 */
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_inplace_true_divide */
#elif PY_VERSION_HEX >= 0x02000000 /* 2.0.0 */
    0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_inplace_or */
#endif
  };

  static PyTypeObject swigpyobject_type;  
  static int type_init = 0;
  if (!type_init) {
    const PyTypeObject tmp
      = {
	/* PyObject header changed in Python 3 */
#if PY_VERSION_HEX >= 0x03000000
	PyVarObject_HEAD_INIT(&PyType_Type, 0)
#else    
	PyObject_HEAD_INIT(NULL)
	0,				    /* ob_size */
#endif
	(char *)"SwigPyObject",		    /* tp_name */
	sizeof(SwigPyObject),		    /* tp_basicsize */
	0,			            /* tp_itemsize */
	(destructor)SwigPyObject_dealloc,   /* tp_dealloc */
	(printfunc)SwigPyObject_print,	    /* tp_print */
#if PY_VERSION_HEX < 0x02020000
	(getattrfunc)SwigPyObject_getattr,  /* tp_getattr */ 
#else
	(getattrfunc)0,			    /* tp_getattr */ 
#endif
	(setattrfunc)0,			    /* tp_setattr */ 
#if PY_VERSION_HEX >= 0x03000000
    0, /* tp_reserved in 3.0.1, tp_compare in 3.0.0 but not used */
#else
	(cmpfunc)SwigPyObject_compare,	    /* tp_compare */
#endif
	(reprfunc)SwigPyObject_repr,	    /* tp_repr */    
	&SwigPyObject_as_number,	    /* tp_as_number */
	0,				    /* tp_as_sequence */
	0,				    /* tp_as_mapping */
	(hashfunc)0,			    /* tp_hash */
	(ternaryfunc)0,			    /* tp_call */
	(reprfunc)SwigPyObject_str,	    /* tp_str */
	PyObject_GenericGetAttr,            /* tp_getattro */
	0,				    /* tp_setattro */
	0,		                    /* tp_as_buffer */
	Py_TPFLAGS_DEFAULT,	            /* tp_flags */
	swigobject_doc, 	            /* tp_doc */        
	0,                                  /* tp_traverse */
	0,                                  /* tp_clear */
	(richcmpfunc)SwigPyObject_richcompare,           /* tp_richcompare */
	0,                                  /* tp_weaklistoffset */
#if PY_VERSION_HEX >= 0x02020000
	0,                                  /* tp_iter */
	0,                                  /* tp_iternext */
	swigobject_methods,		    /* tp_methods */ 
	0,			            /* tp_members */
	0,				    /* tp_getset */	    	
	0,			            /* tp_base */	        
	0,				    /* tp_dict */	    	
	0,				    /* tp_descr_get */  	
	0,				    /* tp_descr_set */  	
	0,				    /* tp_dictoffset */ 	
	0,				    /* tp_init */	    	
	0,				    /* tp_alloc */	    	
	0,			            /* tp_new */	    	
	0,	                            /* tp_free */	   
	0,                                  /* tp_is_gc */  
	0,				    /* tp_bases */   
	0,				    /* tp_mro */
	0,				    /* tp_cache */   
	0,				    /* tp_subclasses */
	0,				    /* tp_weaklist */
#endif
#if PY_VERSION_HEX >= 0x02030000
	0,                                  /* tp_del */
#endif
#ifdef COUNT_ALLOCS
	0,0,0,0                             /* tp_alloc -> tp_next */
#endif
      };
    swigpyobject_type = tmp;
    /* for Python 3 we already assigned ob_type in PyVarObject_HEAD_INIT() */
#if PY_VERSION_HEX < 0x03000000
    swigpyobject_type.ob_type = &PyType_Type;
#endif
    type_init = 1;
  }
  return &swigpyobject_type;
}

SWIGRUNTIME PyObject *
SwigPyObject_New(void *ptr, swig_type_info *ty, int own)
{
  SwigPyObject *sobj = PyObject_NEW(SwigPyObject, SwigPyObject_type());
  if (sobj) {
    sobj->ptr  = ptr;
    sobj->ty   = ty;
    sobj->own  = own;
    sobj->next = 0;
  }
  return (PyObject *)sobj;
}

/* -----------------------------------------------------------------------------
 * Implements a simple Swig Packed type, and use it instead of string
 * ----------------------------------------------------------------------------- */

typedef struct {
  PyObject_HEAD
  void *pack;
  swig_type_info *ty;
  size_t size;
} SwigPyPacked;

SWIGRUNTIME int
SwigPyPacked_print(SwigPyPacked *v, FILE *fp, int SWIGUNUSEDPARM(flags))
{
  char result[SWIG_BUFFER_SIZE];
  fputs("<Swig Packed ", fp); 
  if (SWIG_PackDataName(result, v->pack, v->size, 0, sizeof(result))) {
    fputs("at ", fp); 
    fputs(result, fp); 
  }
  fputs(v->ty->name,fp); 
  fputs(">", fp);
  return 0; 
}
  
SWIGRUNTIME PyObject *
SwigPyPacked_repr(SwigPyPacked *v)
{
  char result[SWIG_BUFFER_SIZE];
  if (SWIG_PackDataName(result, v->pack, v->size, 0, sizeof(result))) {
    return SWIG_Python_str_FromFormat("<Swig Packed at %s%s>", result, v->ty->name);
  } else {
    return SWIG_Python_str_FromFormat("<Swig Packed %s>", v->ty->name);
  }  
}

SWIGRUNTIME PyObject *
SwigPyPacked_str(SwigPyPacked *v)
{
  char result[SWIG_BUFFER_SIZE];
  if (SWIG_PackDataName(result, v->pack, v->size, 0, sizeof(result))){
    return SWIG_Python_str_FromFormat("%s%s", result, v->ty->name);
  } else {
    return SWIG_Python_str_FromChar(v->ty->name);
  }  
}

SWIGRUNTIME int
SwigPyPacked_compare(SwigPyPacked *v, SwigPyPacked *w)
{
  size_t i = v->size;
  size_t j = w->size;
  int s = (i < j) ? -1 : ((i > j) ? 1 : 0);
  return s ? s : strncmp((char *)v->pack, (char *)w->pack, 2*v->size);
}

SWIGRUNTIME PyTypeObject* _PySwigPacked_type(void);

SWIGRUNTIME PyTypeObject*
SwigPyPacked_type(void) {
  static PyTypeObject *SWIG_STATIC_POINTER(type) = _PySwigPacked_type();
  return type;
}

SWIGRUNTIMEINLINE int
SwigPyPacked_Check(PyObject *op) {
  return ((op)->ob_type == _PySwigPacked_type()) 
    || (strcmp((op)->ob_type->tp_name,"SwigPyPacked") == 0);
}

SWIGRUNTIME void
SwigPyPacked_dealloc(PyObject *v)
{
  if (SwigPyPacked_Check(v)) {
    SwigPyPacked *sobj = (SwigPyPacked *) v;
    free(sobj->pack);
  }
  PyObject_DEL(v);
}

SWIGRUNTIME PyTypeObject*
_PySwigPacked_type(void) {
  static char swigpacked_doc[] = "Swig object carries a C/C++ instance pointer";
  static PyTypeObject swigpypacked_type;
  static int type_init = 0;  
  if (!type_init) {
    const PyTypeObject tmp
      = {
    /* PyObject header changed in Python 3 */
#if PY_VERSION_HEX>=0x03000000
    PyVarObject_HEAD_INIT(&PyType_Type, 0)
#else
	PyObject_HEAD_INIT(NULL)
    0,				    /* ob_size */	
#endif
	(char *)"SwigPyPacked",		    /* tp_name */	
	sizeof(SwigPyPacked),		    /* tp_basicsize */	
	0,				    /* tp_itemsize */	
	(destructor)SwigPyPacked_dealloc,   /* tp_dealloc */	
	(printfunc)SwigPyPacked_print,	    /* tp_print */   	
	(getattrfunc)0,			    /* tp_getattr */ 	
	(setattrfunc)0,			    /* tp_setattr */ 	
#if PY_VERSION_HEX>=0x03000000
    0, /* tp_reserved in 3.0.1 */
#else
    (cmpfunc)SwigPyPacked_compare,	    /* tp_compare */
#endif
	(reprfunc)SwigPyPacked_repr,	    /* tp_repr */
	0,	                            /* tp_as_number */
	0,				    /* tp_as_sequence */
	0,				    /* tp_as_mapping */
	(hashfunc)0,			    /* tp_hash */
	(ternaryfunc)0,			    /* tp_call */
	(reprfunc)SwigPyPacked_str,	    /* tp_str */
	PyObject_GenericGetAttr,            /* tp_getattro */
	0,				    /* tp_setattro */
	0,		                    /* tp_as_buffer */
	Py_TPFLAGS_DEFAULT,	            /* tp_flags */
	swigpacked_doc, 	            /* tp_doc */
	0,                                  /* tp_traverse */
	0,                                  /* tp_clear */
	0,                                  /* tp_richcompare */
	0,                                  /* tp_weaklistoffset */
#if PY_VERSION_HEX >= 0x02020000
	0,                                  /* tp_iter */
	0,                                  /* tp_iternext */
	0,		                    /* tp_methods */ 
	0,			            /* tp_members */
	0,				    /* tp_getset */	    	
	0,			            /* tp_base */	        
	0,				    /* tp_dict */	    	
	0,				    /* tp_descr_get */  	
	0,				    /* tp_descr_set */  	
	0,				    /* tp_dictoffset */ 	
	0,				    /* tp_init */	    	
	0,				    /* tp_alloc */	    	
	0,			            /* tp_new */	    	
	0, 	                            /* tp_free */	   
        0,                                  /* tp_is_gc */  
	0,				    /* tp_bases */   
	0,				    /* tp_mro */
	0,				    /* tp_cache */   
 	0,				    /* tp_subclasses */
	0,				    /* tp_weaklist */
#endif
#if PY_VERSION_HEX >= 0x02030000
	0,                                  /* tp_del */
#endif
#ifdef COUNT_ALLOCS
	0,0,0,0                             /* tp_alloc -> tp_next */
#endif
      };
    swigpypacked_type = tmp;
    /* for Python 3 the ob_type already assigned in PyVarObject_HEAD_INIT() */
#if PY_VERSION_HEX < 0x03000000
    swigpypacked_type.ob_type = &PyType_Type;
#endif
    type_init = 1;
  }
  return &swigpypacked_type;
}

SWIGRUNTIME PyObject *
SwigPyPacked_New(void *ptr, size_t size, swig_type_info *ty)
{
  SwigPyPacked *sobj = PyObject_NEW(SwigPyPacked, SwigPyPacked_type());
  if (sobj) {
    void *pack = malloc(size);
    if (pack) {
      memcpy(pack, ptr, size);
      sobj->pack = pack;
      sobj->ty   = ty;
      sobj->size = size;
    } else {
      PyObject_DEL((PyObject *) sobj);
      sobj = 0;
    }
  }
  return (PyObject *) sobj;
}

SWIGRUNTIME swig_type_info *
SwigPyPacked_UnpackData(PyObject *obj, void *ptr, size_t size)
{
  if (SwigPyPacked_Check(obj)) {
    SwigPyPacked *sobj = (SwigPyPacked *)obj;
    if (sobj->size != size) return 0;
    memcpy(ptr, sobj->pack, size);
    return sobj->ty;
  } else {
    return 0;
  }
}

/* -----------------------------------------------------------------------------
 * pointers/data manipulation
 * ----------------------------------------------------------------------------- */

SWIGRUNTIMEINLINE PyObject *
_SWIG_This(void)
{
    return SWIG_Python_str_FromChar("this");
}

SWIGRUNTIME PyObject *
SWIG_This(void)
{
  static PyObject *SWIG_STATIC_POINTER(swig_this) = _SWIG_This();
  return swig_this;
}

/* #define SWIG_PYTHON_SLOW_GETSET_THIS */

/* TODO: I don't know how to implement the fast getset in Python 3 right now */
#if PY_VERSION_HEX>=0x03000000
#define SWIG_PYTHON_SLOW_GETSET_THIS 
#endif

SWIGRUNTIME SwigPyObject *
SWIG_Python_GetSwigThis(PyObject *pyobj) 
{
  if (SwigPyObject_Check(pyobj)) {
    return (SwigPyObject *) pyobj;
  } else {
    PyObject *obj = 0;
#if (!defined(SWIG_PYTHON_SLOW_GETSET_THIS) && (PY_VERSION_HEX >= 0x02030000))
    if (PyInstance_Check(pyobj)) {
      obj = _PyInstance_Lookup(pyobj, SWIG_This());      
    } else {
      PyObject **dictptr = _PyObject_GetDictPtr(pyobj);
      if (dictptr != NULL) {
	PyObject *dict = *dictptr;
	obj = dict ? PyDict_GetItem(dict, SWIG_This()) : 0;
      } else {
#ifdef PyWeakref_CheckProxy
	if (PyWeakref_CheckProxy(pyobj)) {
	  PyObject *wobj = PyWeakref_GET_OBJECT(pyobj);
	  return wobj ? SWIG_Python_GetSwigThis(wobj) : 0;
	}
#endif
	obj = PyObject_GetAttr(pyobj,SWIG_This());
	if (obj) {
	  Py_DECREF(obj);
	} else {
	  if (PyErr_Occurred()) PyErr_Clear();
	  return 0;
	}
      }
    }
#else
    obj = PyObject_GetAttr(pyobj,SWIG_This());
    if (obj) {
      Py_DECREF(obj);
    } else {
      if (PyErr_Occurred()) PyErr_Clear();
      return 0;
    }
#endif
    if (obj && !SwigPyObject_Check(obj)) {
      /* a PyObject is called 'this', try to get the 'real this'
	 SwigPyObject from it */ 
      return SWIG_Python_GetSwigThis(obj);
    }
    return (SwigPyObject *)obj;
  }
}

/* Acquire a pointer value */

SWIGRUNTIME int
SWIG_Python_AcquirePtr(PyObject *obj, int own) {
  if (own == SWIG_POINTER_OWN) {
    SwigPyObject *sobj = SWIG_Python_GetSwigThis(obj);
    if (sobj) {
      int oldown = sobj->own;
      sobj->own = own;
      return oldown;
    }
  }
  return 0;
}

/* Convert a pointer value */

SWIGRUNTIME int
SWIG_Python_ConvertPtrAndOwn(PyObject *obj, void **ptr, swig_type_info *ty, int flags, int *own) {
  if (!obj) return SWIG_ERROR;
  if (obj == Py_None) {
    if (ptr) *ptr = 0;
    return SWIG_OK;
  } else {
    SwigPyObject *sobj = SWIG_Python_GetSwigThis(obj);
    if (own)
      *own = 0;
    while (sobj) {
      void *vptr = sobj->ptr;
      if (ty) {
	swig_type_info *to = sobj->ty;
	if (to == ty) {
	  /* no type cast needed */
	  if (ptr) *ptr = vptr;
	  break;
	} else {
	  swig_cast_info *tc = SWIG_TypeCheck(to->name,ty);
	  if (!tc) {
	    sobj = (SwigPyObject *)sobj->next;
	  } else {
	    if (ptr) {
              int newmemory = 0;
              *ptr = SWIG_TypeCast(tc,vptr,&newmemory);
              if (newmemory == SWIG_CAST_NEW_MEMORY) {
                assert(own); /* badly formed typemap which will lead to a memory leak - it must set and use own to delete *ptr */
                if (own)
                  *own = *own | SWIG_CAST_NEW_MEMORY;
              }
            }
	    break;
	  }
	}
      } else {
	if (ptr) *ptr = vptr;
	break;
      }
    }
    if (sobj) {
      if (own)
        *own = *own | sobj->own;
      if (flags & SWIG_POINTER_DISOWN) {
	sobj->own = 0;
      }
      return SWIG_OK;
    } else {
      int res = SWIG_ERROR;
      if (flags & SWIG_POINTER_IMPLICIT_CONV) {
	SwigPyClientData *data = ty ? (SwigPyClientData *) ty->clientdata : 0;
	if (data && !data->implicitconv) {
	  PyObject *klass = data->klass;
	  if (klass) {
	    PyObject *impconv;
	    data->implicitconv = 1; /* avoid recursion and call 'explicit' constructors*/
	    impconv = SWIG_Python_CallFunctor(klass, obj);
	    data->implicitconv = 0;
	    if (PyErr_Occurred()) {
	      PyErr_Clear();
	      impconv = 0;
	    }
	    if (impconv) {
	      SwigPyObject *iobj = SWIG_Python_GetSwigThis(impconv);
	      if (iobj) {
		void *vptr;
		res = SWIG_Python_ConvertPtrAndOwn((PyObject*)iobj, &vptr, ty, 0, 0);
		if (SWIG_IsOK(res)) {
		  if (ptr) {
		    *ptr = vptr;
		    /* transfer the ownership to 'ptr' */
		    iobj->own = 0;
		    res = SWIG_AddCast(res);
		    res = SWIG_AddNewMask(res);
		  } else {
		    res = SWIG_AddCast(res);		    
		  }
		}
	      }
	      Py_DECREF(impconv);
	    }
	  }
	}
      }
      return res;
    }
  }
}

/* Convert a function ptr value */

SWIGRUNTIME int
SWIG_Python_ConvertFunctionPtr(PyObject *obj, void **ptr, swig_type_info *ty) {
  if (!PyCFunction_Check(obj)) {
    return SWIG_ConvertPtr(obj, ptr, ty, 0);
  } else {
    void *vptr = 0;
    
    /* here we get the method pointer for callbacks */
    const char *doc = (((PyCFunctionObject *)obj) -> m_ml -> ml_doc);
    const char *desc = doc ? strstr(doc, "swig_ptr: ") : 0;
    if (desc)
      desc = ty ? SWIG_UnpackVoidPtr(desc + 10, &vptr, ty->name) : 0;
    if (!desc) 
      return SWIG_ERROR;
    if (ty) {
      swig_cast_info *tc = SWIG_TypeCheck(desc,ty);
      if (tc) {
        int newmemory = 0;
        *ptr = SWIG_TypeCast(tc,vptr,&newmemory);
        assert(!newmemory); /* newmemory handling not yet implemented */
      } else {
        return SWIG_ERROR;
      }
    } else {
      *ptr = vptr;
    }
    return SWIG_OK;
  }
}

/* Convert a packed value value */

SWIGRUNTIME int
SWIG_Python_ConvertPacked(PyObject *obj, void *ptr, size_t sz, swig_type_info *ty) {
  swig_type_info *to = SwigPyPacked_UnpackData(obj, ptr, sz);
  if (!to) return SWIG_ERROR;
  if (ty) {
    if (to != ty) {
      /* check type cast? */
      swig_cast_info *tc = SWIG_TypeCheck(to->name,ty);
      if (!tc) return SWIG_ERROR;
    }
  }
  return SWIG_OK;
}  

/* -----------------------------------------------------------------------------
 * Create a new pointer object
 * ----------------------------------------------------------------------------- */

/*
  Create a new instance object, without calling __init__, and set the
  'this' attribute.
*/

SWIGRUNTIME PyObject* 
SWIG_Python_NewShadowInstance(SwigPyClientData *data, PyObject *swig_this)
{
#if (PY_VERSION_HEX >= 0x02020000)
  PyObject *inst = 0;
  PyObject *newraw = data->newraw;
  if (newraw) {
    inst = PyObject_Call(newraw, data->newargs, NULL);
    if (inst) {
#if !defined(SWIG_PYTHON_SLOW_GETSET_THIS)
      PyObject **dictptr = _PyObject_GetDictPtr(inst);
      if (dictptr != NULL) {
	PyObject *dict = *dictptr;
	if (dict == NULL) {
	  dict = PyDict_New();
	  *dictptr = dict;
	  PyDict_SetItem(dict, SWIG_This(), swig_this);
	}
      }
#else
      PyObject *key = SWIG_This();
      PyObject_SetAttr(inst, key, swig_this);
#endif
    }
  } else {
#if PY_VERSION_HEX >= 0x03000000
    inst = PyBaseObject_Type.tp_new((PyTypeObject*) data->newargs, Py_None, Py_None);
    PyObject_SetAttr(inst, SWIG_This(), swig_this);
    Py_TYPE(inst)->tp_flags &= ~Py_TPFLAGS_VALID_VERSION_TAG;
#else
    PyObject *dict = PyDict_New();
    PyDict_SetItem(dict, SWIG_This(), swig_this);
    inst = PyInstance_NewRaw(data->newargs, dict);
    Py_DECREF(dict);
#endif
  }
  return inst;
#else
#if (PY_VERSION_HEX >= 0x02010000)
  PyObject *inst;
  PyObject *dict = PyDict_New();
  PyDict_SetItem(dict, SWIG_This(), swig_this);
  inst = PyInstance_NewRaw(data->newargs, dict);
  Py_DECREF(dict);
  return (PyObject *) inst;
#else
  PyInstanceObject *inst = PyObject_NEW(PyInstanceObject, &PyInstance_Type);
  if (inst == NULL) {
    return NULL;
  }
  inst->in_class = (PyClassObject *)data->newargs;
  Py_INCREF(inst->in_class);
  inst->in_dict = PyDict_New();
  if (inst->in_dict == NULL) {
    Py_DECREF(inst);
    return NULL;
  }
#ifdef Py_TPFLAGS_HAVE_WEAKREFS
  inst->in_weakreflist = NULL;
#endif
#ifdef Py_TPFLAGS_GC
  PyObject_GC_Init(inst);
#endif
  PyDict_SetItem(inst->in_dict, SWIG_This(), swig_this);
  return (PyObject *) inst;
#endif
#endif
}

SWIGRUNTIME void
SWIG_Python_SetSwigThis(PyObject *inst, PyObject *swig_this)
{
 PyObject *dict;
#if (PY_VERSION_HEX >= 0x02020000) && !defined(SWIG_PYTHON_SLOW_GETSET_THIS)
 PyObject **dictptr = _PyObject_GetDictPtr(inst);
 if (dictptr != NULL) {
   dict = *dictptr;
   if (dict == NULL) {
     dict = PyDict_New();
     *dictptr = dict;
   }
   PyDict_SetItem(dict, SWIG_This(), swig_this);
   return;
 }
#endif
 dict = PyObject_GetAttrString(inst, (char*)"__dict__");
 PyDict_SetItem(dict, SWIG_This(), swig_this);
 Py_DECREF(dict);
} 


SWIGINTERN PyObject *
SWIG_Python_InitShadowInstance(PyObject *args) {
  PyObject *obj[2];
  if (!SWIG_Python_UnpackTuple(args,(char*)"swiginit", 2, 2, obj)) {
    return NULL;
  } else {
    SwigPyObject *sthis = SWIG_Python_GetSwigThis(obj[0]);
    if (sthis) {
      SwigPyObject_append((PyObject*) sthis, obj[1]);
    } else {
      SWIG_Python_SetSwigThis(obj[0], obj[1]);
    }
    return SWIG_Py_Void();
  }
}

/* Create a new pointer object */

SWIGRUNTIME PyObject *
SWIG_Python_NewPointerObj(void *ptr, swig_type_info *type, int flags) {
  if (!ptr) {
    return SWIG_Py_Void();
  } else {
    int own = (flags & SWIG_POINTER_OWN) ? SWIG_POINTER_OWN : 0;
    PyObject *robj = SwigPyObject_New(ptr, type, own);
    SwigPyClientData *clientdata = type ? (SwigPyClientData *)(type->clientdata) : 0;
    if (clientdata && !(flags & SWIG_POINTER_NOSHADOW)) {
      PyObject *inst = SWIG_Python_NewShadowInstance(clientdata, robj);
      if (inst) {
	Py_DECREF(robj);
	robj = inst;
      }
    }
    return robj;
  }
}

/* Create a new packed object */

SWIGRUNTIMEINLINE PyObject *
SWIG_Python_NewPackedObj(void *ptr, size_t sz, swig_type_info *type) {
  return ptr ? SwigPyPacked_New((void *) ptr, sz, type) : SWIG_Py_Void();
}

/* -----------------------------------------------------------------------------*
 *  Get type list 
 * -----------------------------------------------------------------------------*/

#ifdef SWIG_LINK_RUNTIME
void *SWIG_ReturnGlobalTypeList(void *);
#endif

SWIGRUNTIME swig_module_info *
SWIG_Python_GetModule(void) {
  static void *type_pointer = (void *)0;
  /* first check if module already created */
  if (!type_pointer) {
#ifdef SWIG_LINK_RUNTIME
    type_pointer = SWIG_ReturnGlobalTypeList((void *)0);
#else
    type_pointer = PyCObject_Import((char*)"swig_runtime_data" SWIG_RUNTIME_VERSION,
				    (char*)"type_pointer" SWIG_TYPE_TABLE_NAME);
    if (PyErr_Occurred()) {
      PyErr_Clear();
      type_pointer = (void *)0;
    }
#endif
  }
  return (swig_module_info *) type_pointer;
}

#if PY_MAJOR_VERSION < 2
/* PyModule_AddObject function was introduced in Python 2.0.  The following function
   is copied out of Python/modsupport.c in python version 2.3.4 */
SWIGINTERN int
PyModule_AddObject(PyObject *m, char *name, PyObject *o)
{
  PyObject *dict;
  if (!PyModule_Check(m)) {
    PyErr_SetString(PyExc_TypeError,
		    "PyModule_AddObject() needs module as first arg");
    return SWIG_ERROR;
  }
  if (!o) {
    PyErr_SetString(PyExc_TypeError,
		    "PyModule_AddObject() needs non-NULL value");
    return SWIG_ERROR;
  }
  
  dict = PyModule_GetDict(m);
  if (dict == NULL) {
    /* Internal error -- modules must have a dict! */
    PyErr_Format(PyExc_SystemError, "module '%s' has no __dict__",
		 PyModule_GetName(m));
    return SWIG_ERROR;
  }
  if (PyDict_SetItemString(dict, name, o))
    return SWIG_ERROR;
  Py_DECREF(o);
  return SWIG_OK;
}
#endif

SWIGRUNTIME void
SWIG_Python_DestroyModule(void *vptr)
{
  swig_module_info *swig_module = (swig_module_info *) vptr;
  swig_type_info **types = swig_module->types;
  size_t i;
  for (i =0; i < swig_module->size; ++i) {
    swig_type_info *ty = types[i];
    if (ty->owndata) {
      SwigPyClientData *data = (SwigPyClientData *) ty->clientdata;
      if (data) SwigPyClientData_Del(data);
    }
  }
  Py_DECREF(SWIG_This());
}

SWIGRUNTIME void
SWIG_Python_SetModule(swig_module_info *swig_module) {
  static PyMethodDef swig_empty_runtime_method_table[] = { {NULL, NULL, 0, NULL} };/* Sentinel */

#if PY_VERSION_HEX >= 0x03000000
 /* Add a dummy module object into sys.modules */
  PyObject *module = PyImport_AddModule((char*)"swig_runtime_data" SWIG_RUNTIME_VERSION);
#else
  PyObject *module = Py_InitModule((char*)"swig_runtime_data" SWIG_RUNTIME_VERSION,
				   swig_empty_runtime_method_table);
#endif
  PyObject *pointer = PyCObject_FromVoidPtr((void *) swig_module, SWIG_Python_DestroyModule);
  if (pointer && module) {
    PyModule_AddObject(module, (char*)"type_pointer" SWIG_TYPE_TABLE_NAME, pointer);
  } else {
    Py_XDECREF(pointer);
  }
}

/* The python cached type query */
SWIGRUNTIME PyObject *
SWIG_Python_TypeCache(void) {
  static PyObject *SWIG_STATIC_POINTER(cache) = PyDict_New();
  return cache;
}

SWIGRUNTIME swig_type_info *
SWIG_Python_TypeQuery(const char *type)
{
  PyObject *cache = SWIG_Python_TypeCache();
  PyObject *key = SWIG_Python_str_FromChar(type); 
  PyObject *obj = PyDict_GetItem(cache, key);
  swig_type_info *descriptor;
  if (obj) {
    descriptor = (swig_type_info *) PyCObject_AsVoidPtr(obj);
  } else {
    swig_module_info *swig_module = SWIG_Python_GetModule();
    descriptor = SWIG_TypeQueryModule(swig_module, swig_module, type);
    if (descriptor) {
      obj = PyCObject_FromVoidPtr(descriptor, NULL);
      PyDict_SetItem(cache, key, obj);
      Py_DECREF(obj);
    }
  }
  Py_DECREF(key);
  return descriptor;
}

/* 
   For backward compatibility only
*/
#define SWIG_POINTER_EXCEPTION  0
#define SWIG_arg_fail(arg)      SWIG_Python_ArgFail(arg)
#define SWIG_MustGetPtr(p, type, argnum, flags)  SWIG_Python_MustGetPtr(p, type, argnum, flags)

SWIGRUNTIME int
SWIG_Python_AddErrMesg(const char* mesg, int infront)
{  
  if (PyErr_Occurred()) {
    PyObject *type = 0;
    PyObject *value = 0;
    PyObject *traceback = 0;
    PyErr_Fetch(&type, &value, &traceback);
    if (value) {
      char *tmp;
      PyObject *old_str = PyObject_Str(value);
      Py_XINCREF(type);
      PyErr_Clear();
      if (infront) {
	PyErr_Format(type, "%s %s", mesg, tmp = SWIG_Python_str_AsChar(old_str));
      } else {
	PyErr_Format(type, "%s %s", tmp = SWIG_Python_str_AsChar(old_str), mesg);
      }
      SWIG_Python_str_DelForPy3(tmp);
      Py_DECREF(old_str);
    }
    return 1;
  } else {
    return 0;
  }
}
  
SWIGRUNTIME int
SWIG_Python_ArgFail(int argnum)
{
  if (PyErr_Occurred()) {
    /* add information about failing argument */
    char mesg[256];
    PyOS_snprintf(mesg, sizeof(mesg), "argument number %d:", argnum);
    return SWIG_Python_AddErrMesg(mesg, 1);
  } else {
    return 0;
  }
}

SWIGRUNTIMEINLINE const char *
SwigPyObject_GetDesc(PyObject *self)
{
  SwigPyObject *v = (SwigPyObject *)self;
  swig_type_info *ty = v ? v->ty : 0;
  return ty ? ty->str : (char*)"";
}

SWIGRUNTIME void
SWIG_Python_TypeError(const char *type, PyObject *obj)
{
  if (type) {
#if defined(SWIG_COBJECT_TYPES)
    if (obj && SwigPyObject_Check(obj)) {
      const char *otype = (const char *) SwigPyObject_GetDesc(obj);
      if (otype) {
	PyErr_Format(PyExc_TypeError, "a '%s' is expected, 'SwigPyObject(%s)' is received",
		     type, otype);
	return;
      }
    } else 
#endif      
    {
      const char *otype = (obj ? obj->ob_type->tp_name : 0); 
      if (otype) {
	PyObject *str = PyObject_Str(obj);
	const char *cstr = str ? SWIG_Python_str_AsChar(str) : 0;
	if (cstr) {
	  PyErr_Format(PyExc_TypeError, "a '%s' is expected, '%s(%s)' is received",
		       type, otype, cstr);
          SWIG_Python_str_DelForPy3(cstr);
	} else {
	  PyErr_Format(PyExc_TypeError, "a '%s' is expected, '%s' is received",
		       type, otype);
	}
	Py_XDECREF(str);
	return;
      }
    }   
    PyErr_Format(PyExc_TypeError, "a '%s' is expected", type);
  } else {
    PyErr_Format(PyExc_TypeError, "unexpected type is received");
  }
}


/* Convert a pointer value, signal an exception on a type mismatch */
SWIGRUNTIME void *
SWIG_Python_MustGetPtr(PyObject *obj, swig_type_info *ty, int argnum, int flags) {
  void *result;
  if (SWIG_Python_ConvertPtr(obj, &result, ty, flags) == -1) {
    PyErr_Clear();
#if SWIG_POINTER_EXCEPTION
    if (flags) {
      SWIG_Python_TypeError(SWIG_TypePrettyName(ty), obj);
      SWIG_Python_ArgFail(argnum);
    }
#endif
  }
  return result;
}


#ifdef __cplusplus
#if 0
{ /* cc-mode */
#endif
}
#endif



#define SWIG_exception_fail(code, msg) do { SWIG_Error(code, msg); SWIG_fail; } while(0) 

#define SWIG_contract_assert(expr, msg) if (!(expr)) { SWIG_Error(SWIG_RuntimeError, msg); SWIG_fail; } else 



  #define SWIG_exception(code, msg) do { SWIG_Error(code, msg); SWIG_fail;; } while(0) 

/* -----------------------------------------------------------------------------
 * director.swg
 *
 * This file contains support for director classes that proxy
 * method calls from C++ to Python extensions.
 * ----------------------------------------------------------------------------- */

#ifndef SWIG_DIRECTOR_PYTHON_HEADER_
#define SWIG_DIRECTOR_PYTHON_HEADER_

#ifdef __cplusplus

#include <string>
#include <iostream>
#include <exception>
#include <vector>
#include <map>


/*
  Use -DSWIG_PYTHON_DIRECTOR_NO_VTABLE if you don't want to generate a 'virtual
  table', and avoid multiple GetAttr calls to retrieve the python
  methods.
*/

#ifndef SWIG_PYTHON_DIRECTOR_NO_VTABLE
#ifndef SWIG_PYTHON_DIRECTOR_VTABLE
#define SWIG_PYTHON_DIRECTOR_VTABLE
#endif
#endif



/*
  Use -DSWIG_DIRECTOR_NO_UEH if you prefer to avoid the use of the
  Undefined Exception Handler provided by swift
*/
#ifndef SWIG_DIRECTOR_NO_UEH
#ifndef SWIG_DIRECTOR_UEH
#define SWIG_DIRECTOR_UEH
#endif
#endif


/*
  Use -DSWIG_DIRECTOR_STATIC if you prefer to avoid the use of the
  'Swig' namespace. This could be useful for multi-modules projects.
*/
#ifdef SWIG_DIRECTOR_STATIC
/* Force anonymous (static) namespace */
#define Swig
#endif


/*
  Use -DSWIG_DIRECTOR_NORTTI if you prefer to avoid the use of the
  native C++ RTTI and dynamic_cast<>. But be aware that directors
  could stop working when using this option.
*/
#ifdef SWIG_DIRECTOR_NORTTI
/* 
   When we don't use the native C++ RTTI, we implement a minimal one
   only for Directors.
*/
# ifndef SWIG_DIRECTOR_RTDIR
# define SWIG_DIRECTOR_RTDIR
#include <map>

namespace Swig {
  class Director;
  SWIGINTERN std::map<void*,Director*>& get_rtdir_map() {
    static std::map<void*,Director*> rtdir_map;
    return rtdir_map;
  }

  SWIGINTERNINLINE void set_rtdir(void *vptr, Director *rtdir) {
    get_rtdir_map()[vptr] = rtdir;
  }

  SWIGINTERNINLINE Director *get_rtdir(void *vptr) {
    std::map<void*,Director*>::const_iterator pos = get_rtdir_map().find(vptr);
    Director *rtdir = (pos != get_rtdir_map().end()) ? pos->second : 0;
    return rtdir;
  }
}
# endif /* SWIG_DIRECTOR_RTDIR */

# define SWIG_DIRECTOR_CAST(ARG) Swig::get_rtdir(static_cast<void*>(ARG))
# define SWIG_DIRECTOR_RGTR(ARG1, ARG2) Swig::set_rtdir(static_cast<void*>(ARG1), ARG2)

#else

# define SWIG_DIRECTOR_CAST(ARG) dynamic_cast<Swig::Director *>(ARG)
# define SWIG_DIRECTOR_RGTR(ARG1, ARG2)

#endif /* SWIG_DIRECTOR_NORTTI */

extern "C" {
  struct swig_type_info;
}

namespace Swig {  

  /* memory handler */
  struct GCItem 
  {
    virtual ~GCItem() {}

    virtual int get_own() const
    {
      return 0;
    }
  };

  struct GCItem_var
  {
    GCItem_var(GCItem *item = 0) : _item(item)
    {
    }

    GCItem_var& operator=(GCItem *item)
    {
      GCItem *tmp = _item;
      _item = item;
      delete tmp;
      return *this;
    }

    ~GCItem_var() 
    {
      delete _item;
    }
    
    GCItem * operator->() const
    {
      return _item;
    }
    
  private:
    GCItem *_item;
  };
  
  struct GCItem_Object : GCItem
  {
    GCItem_Object(int own) : _own(own)
    {
    }
    
    virtual ~GCItem_Object() 
    {
    }

    int get_own() const
    {
      return _own;
    }
    
  private:
    int _own;
  };

  template <typename Type>
  struct GCItem_T : GCItem
  {
    GCItem_T(Type *ptr) : _ptr(ptr)
    {
    }
    
    virtual ~GCItem_T() 
    {
      delete _ptr;
    }
    
  private:
    Type *_ptr;
  };

  template <typename Type>
  struct GCArray_T : GCItem
  {
    GCArray_T(Type *ptr) : _ptr(ptr)
    {
    }
    
    virtual ~GCArray_T() 
    {
      delete[] _ptr;
    }
    
  private:
    Type *_ptr;
  };

  /* base class for director exceptions */
  class DirectorException {
  protected:
    std::string swig_msg;
  public:
    DirectorException(PyObject *error, const char* hdr ="", const char* msg ="") 
      : swig_msg(hdr)
    {
      SWIG_PYTHON_THREAD_BEGIN_BLOCK; 
      if (strlen(msg)) {
        swig_msg += " ";
        swig_msg += msg;
      }
      if (!PyErr_Occurred()) {
        PyErr_SetString(error, getMessage());
      }
      SWIG_PYTHON_THREAD_END_BLOCK; 
    }

    const char *getMessage() const
    { 
      return swig_msg.c_str(); 
    }

    static void raise(PyObject *error, const char *msg) 
    {
      throw DirectorException(error, msg);
    }

    static void raise(const char *msg) 
    {
      raise(PyExc_RuntimeError, msg);
    }
  };

  /* unknown exception handler  */
  class UnknownExceptionHandler 
  {
#ifdef SWIG_DIRECTOR_UEH
    static void handler()  {
      try {
        throw;
      } catch (DirectorException& e) {
        std::cerr << "SWIG Director exception caught:" << std::endl
                  << e.getMessage() << std::endl;
      } catch (std::exception& e) {
        std::cerr << "std::exception caught: "<< e.what() << std::endl;
      } catch (...) {
        std::cerr << "Unknown exception caught." << std::endl;
      }
      
      std::cerr << std::endl
                << "Python interpreter traceback:" << std::endl;
      PyErr_Print();
      std::cerr << std::endl;
      
      std::cerr << "This exception was caught by the SWIG unexpected exception handler." << std::endl
                << "Try using %feature(\"director:except\") to avoid reaching this point." << std::endl
                << std::endl
                << "Exception is being re-thrown, program will like abort/terminate." << std::endl;
      throw;
    }

  public:
    
    std::unexpected_handler old;
    UnknownExceptionHandler(std::unexpected_handler nh = handler)
    {
      old = std::set_unexpected(nh);
    }

    ~UnknownExceptionHandler()
    {
      std::set_unexpected(old);
    }
#endif
  };

  /* type mismatch in the return value from a python method call */
  class DirectorTypeMismatchException : public Swig::DirectorException {
  public:
    DirectorTypeMismatchException(PyObject *error, const char* msg="") 
      : Swig::DirectorException(error, "SWIG director type mismatch", msg)
    {
    }

    DirectorTypeMismatchException(const char* msg="") 
      : Swig::DirectorException(PyExc_TypeError, "SWIG director type mismatch", msg)
    {
    }

    static void raise(PyObject *error, const char *msg)
    {
      throw DirectorTypeMismatchException(error, msg);
    }

    static void raise(const char *msg)
    {
      throw DirectorTypeMismatchException(msg);
    }
  };

  /* any python exception that occurs during a director method call */
  class DirectorMethodException : public Swig::DirectorException {
  public:
    DirectorMethodException(const char* msg = "") 
      : DirectorException(PyExc_RuntimeError, "SWIG director method error.", msg)
    {
    }    

    static void raise(const char *msg)
    {
      throw DirectorMethodException(msg);
    }
  };

  /* attempt to call a pure virtual method via a director method */
  class DirectorPureVirtualException : public Swig::DirectorException
  {
  public:
    DirectorPureVirtualException(const char* msg = "") 
      : DirectorException(PyExc_RuntimeError, "SWIG director pure virtual method called", msg)
    { 
    }

    static void raise(const char *msg) 
    {
      throw DirectorPureVirtualException(msg);
    }
  };


#if defined(SWIG_PYTHON_THREADS)
/*  __THREAD__ is the old macro to activate some thread support */
# if !defined(__THREAD__)
#   define __THREAD__ 1
# endif
#endif

#ifdef __THREAD__
# include "pythread.h"
  class Guard
  {
    PyThread_type_lock & mutex_;
    
  public:
    Guard(PyThread_type_lock & mutex) : mutex_(mutex)
    {
      PyThread_acquire_lock(mutex_, WAIT_LOCK);
    }
    
    ~Guard()
    {
      PyThread_release_lock(mutex_);
    }
  };
# define SWIG_GUARD(mutex) Guard _guard(mutex)
#else
# define SWIG_GUARD(mutex) 
#endif

  /* director base class */
  class Director {
  private:
    /* pointer to the wrapped python object */
    PyObject* swig_self;
    /* flag indicating whether the object is owned by python or c++ */
    mutable bool swig_disown_flag;

    /* decrement the reference count of the wrapped python object */
    void swig_decref() const { 
      if (swig_disown_flag) {
        SWIG_PYTHON_THREAD_BEGIN_BLOCK; 
        Py_DECREF(swig_self); 
        SWIG_PYTHON_THREAD_END_BLOCK; 
      }
    }

  public:
    /* wrap a python object, optionally taking ownership */
    Director(PyObject* self) : swig_self(self), swig_disown_flag(false) {
      swig_incref();
    }


    /* discard our reference at destruction */
    virtual ~Director() {
      swig_decref(); 
    }


    /* return a pointer to the wrapped python object */
    PyObject *swig_get_self() const { 
      return swig_self; 
    }

    /* acquire ownership of the wrapped python object (the sense of "disown"
     * is from python) */
    void swig_disown() const { 
      if (!swig_disown_flag) { 
        swig_disown_flag=true;
        swig_incref(); 
      } 
    }

    /* increase the reference count of the wrapped python object */
    void swig_incref() const { 
      if (swig_disown_flag) {
        Py_INCREF(swig_self); 
      }
    }

    /* methods to implement pseudo protected director members */
    virtual bool swig_get_inner(const char* /* protected_method_name */) const {
      return true;
    }
    
    virtual void swig_set_inner(const char* /* protected_method_name */, bool /* val */) const {
    }

  /* ownership management */
  private:
    typedef std::map<void*, GCItem_var> swig_ownership_map;
    mutable swig_ownership_map swig_owner;
#ifdef __THREAD__
    static PyThread_type_lock swig_mutex_own;
#endif

  public:
    template <typename Type>
    void swig_acquire_ownership_array(Type *vptr)  const
    {
      if (vptr) {
        SWIG_GUARD(swig_mutex_own);
        swig_owner[vptr] = new GCArray_T<Type>(vptr);
      }
    }
    
    template <typename Type>
    void swig_acquire_ownership(Type *vptr)  const
    {
      if (vptr) {
        SWIG_GUARD(swig_mutex_own);
        swig_owner[vptr] = new GCItem_T<Type>(vptr);
      }
    }

    void swig_acquire_ownership_obj(void *vptr, int own) const
    {
      if (vptr && own) {
        SWIG_GUARD(swig_mutex_own);
        swig_owner[vptr] = new GCItem_Object(own);
      }
    }
    
    int swig_release_ownership(void *vptr) const
    {
      int own = 0;
      if (vptr) {
        SWIG_GUARD(swig_mutex_own);
        swig_ownership_map::iterator iter = swig_owner.find(vptr);
        if (iter != swig_owner.end()) {
          own = iter->second->get_own();
          swig_owner.erase(iter);
        }
      }
      return own;
    }
  };

#ifdef __THREAD__
  PyThread_type_lock Director::swig_mutex_own = PyThread_allocate_lock();
#endif
}

#endif /* __cplusplus */


#endif

/* -------- TYPES TABLE (BEGIN) -------- */

#define SWIGTYPE_p_CMMCore swig_types[0]
#define SWIGTYPE_p_CMMError swig_types[1]
#define SWIGTYPE_p_Code swig_types[2]
#define SWIGTYPE_p_Configuration swig_types[3]
#define SWIGTYPE_p_MMEventCallback swig_types[4]
#define SWIGTYPE_p_Metadata swig_types[5]
#define SWIGTYPE_p_MetadataArrayTag swig_types[6]
#define SWIGTYPE_p_MetadataError swig_types[7]
#define SWIGTYPE_p_MetadataIndexError swig_types[8]
#define SWIGTYPE_p_MetadataKeyError swig_types[9]
#define SWIGTYPE_p_MetadataSingleTag swig_types[10]
#define SWIGTYPE_p_MetadataTag swig_types[11]
#define SWIGTYPE_p_PropertyBlock swig_types[12]
#define SWIGTYPE_p_PropertyPair swig_types[13]
#define SWIGTYPE_p_PropertySetting swig_types[14]
#define SWIGTYPE_p_allocator_type swig_types[15]
#define SWIGTYPE_p_char swig_types[16]
#define SWIGTYPE_p_difference_type swig_types[17]
#define SWIGTYPE_p_double swig_types[18]
#define SWIGTYPE_p_first_type swig_types[19]
#define SWIGTYPE_p_int swig_types[20]
#define SWIGTYPE_p_key_type swig_types[21]
#define SWIGTYPE_p_mapped_type swig_types[22]
#define SWIGTYPE_p_p_PyObject swig_types[23]
#define SWIGTYPE_p_second_type swig_types[24]
#define SWIGTYPE_p_size_type swig_types[25]
#define SWIGTYPE_p_std__exception swig_types[26]
#define SWIGTYPE_p_std__invalid_argument swig_types[27]
#define SWIGTYPE_p_std__istringstream swig_types[28]
#define SWIGTYPE_p_std__lessT_std__string_t swig_types[29]
#define SWIGTYPE_p_std__mapT_std__string_std__string_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_std__string_t_t_t swig_types[30]
#define SWIGTYPE_p_std__mapT_std__string_std__string_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_std__string_t_t_t__allocator_type swig_types[31]
#define SWIGTYPE_p_std__pairT_std__string_std__string_t swig_types[32]
#define SWIGTYPE_p_std__vectorT_char_std__allocatorT_char_t_t swig_types[33]
#define SWIGTYPE_p_std__vectorT_char_std__allocatorT_char_t_t__allocator_type swig_types[34]
#define SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t swig_types[35]
#define SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t__allocator_type swig_types[36]
#define SWIGTYPE_p_std__vectorT_long_std__allocatorT_long_t_t swig_types[37]
#define SWIGTYPE_p_std__vectorT_long_std__allocatorT_long_t_t__allocator_type swig_types[38]
#define SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t swig_types[39]
#define SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t__allocator_type swig_types[40]
#define SWIGTYPE_p_std__vectorT_unsigned_char_p_std__allocatorT_unsigned_char_p_t_t swig_types[41]
#define SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t swig_types[42]
#define SWIGTYPE_p_swig__SwigPyIterator swig_types[43]
#define SWIGTYPE_p_value_type swig_types[44]
static swig_type_info *swig_types[46];
static swig_module_info swig_module = {swig_types, 45, 0, 0, 0, 0};
#define SWIG_TypeQuery(name) SWIG_TypeQueryModule(&swig_module, &swig_module, name)
#define SWIG_MangledTypeQuery(name) SWIG_MangledTypeQueryModule(&swig_module, &swig_module, name)

/* -------- TYPES TABLE (END) -------- */

#if (PY_VERSION_HEX <= 0x02000000)
# if !defined(SWIG_PYTHON_CLASSIC)
#  error "This python version requires swig to be run with the '-classic' option"
# endif
#endif

/*-----------------------------------------------
              @(target):= _MMCorePy.so
  ------------------------------------------------*/
#if PY_VERSION_HEX >= 0x03000000
#  define SWIG_init    PyInit__MMCorePy

#else
#  define SWIG_init    init_MMCorePy

#endif
#define SWIG_name    "_MMCorePy"

#define SWIGVERSION 0x020000 
#define SWIG_VERSION SWIGVERSION


#define SWIG_as_voidptr(a) const_cast< void * >(static_cast< const void * >(a)) 
#define SWIG_as_voidptrptr(a) ((void)SWIG_as_voidptr(*a),reinterpret_cast< void** >(a)) 


#include <stdexcept>


namespace swig {
  class SwigPtr_PyObject {
  protected:
    PyObject *_obj;

  public:
    SwigPtr_PyObject() :_obj(0)
    {
    }

    SwigPtr_PyObject(const SwigPtr_PyObject& item) : _obj(item._obj)
    {
      Py_XINCREF(_obj);      
    }
    
    SwigPtr_PyObject(PyObject *obj, bool initial_ref = true) :_obj(obj)
    {
      if (initial_ref) {
        Py_XINCREF(_obj);
      }
    }
    
    SwigPtr_PyObject & operator=(const SwigPtr_PyObject& item) 
    {
      Py_XINCREF(item._obj);
      Py_XDECREF(_obj);
      _obj = item._obj;
      return *this;      
    }
    
    ~SwigPtr_PyObject() 
    {
      Py_XDECREF(_obj);
    }
    
    operator PyObject *() const
    {
      return _obj;
    }

    PyObject *operator->() const
    {
      return _obj;
    }
  };
}


namespace swig {
  struct SwigVar_PyObject : SwigPtr_PyObject {
    SwigVar_PyObject(PyObject* obj = 0) : SwigPtr_PyObject(obj, false) { }
    
    SwigVar_PyObject & operator = (PyObject* obj)
    {
      Py_XDECREF(_obj);
      _obj = obj;
      return *this;      
    }
  };
}


#include <string>


#include <iostream>


#include <stdexcept>


#if defined(__GNUC__)
#  if __GNUC__ == 2 && __GNUC_MINOR <= 96
#     define SWIG_STD_NOMODERN_STL
#  endif
#endif


#include <string>
#include <stdexcept>

  
namespace swig {
  struct stop_iteration {
  };

  struct SwigPyIterator {
  private:
    SwigPtr_PyObject _seq;

  protected:
    SwigPyIterator(PyObject *seq) : _seq(seq)
    {
    }
      
  public:
    virtual ~SwigPyIterator() {}

    // Access iterator method, required by Python
    virtual PyObject *value() const = 0;

    // Forward iterator method, required by Python
    virtual SwigPyIterator *incr(size_t n = 1) = 0;
    
    // Backward iterator method, very common in C++, but not required in Python
    virtual SwigPyIterator *decr(size_t /*n*/ = 1)
    {
      throw stop_iteration();
    }

    // Random access iterator methods, but not required in Python
    virtual ptrdiff_t distance(const SwigPyIterator &/*x*/) const
    {
      throw std::invalid_argument("operation not supported");
    }

    virtual bool equal (const SwigPyIterator &/*x*/) const
    {
      throw std::invalid_argument("operation not supported");
    }
    
    // C++ common/needed methods
    virtual SwigPyIterator *copy() const = 0;

    PyObject *next()     
    {
      SWIG_PYTHON_THREAD_BEGIN_BLOCK; // disable threads       
      PyObject *obj = value();
      incr();       
      SWIG_PYTHON_THREAD_END_BLOCK; // re-enable threads
      return obj;     
    }

    /* Make an alias for Python 3.x */
    PyObject *__next__()
    {
      return next();
    }

    PyObject *previous()
    {
      SWIG_PYTHON_THREAD_BEGIN_BLOCK; // disable threads       
      decr();
      PyObject *obj = value();
      SWIG_PYTHON_THREAD_END_BLOCK; // re-enable threads       
      return obj;
    }

    SwigPyIterator *advance(ptrdiff_t n)
    {
      return  (n > 0) ?  incr(n) : decr(-n);
    }
      
    bool operator == (const SwigPyIterator& x)  const
    {
      return equal(x);
    }
      
    bool operator != (const SwigPyIterator& x) const
    {
      return ! operator==(x);
    }
      
    SwigPyIterator& operator += (ptrdiff_t n)
    {
      return *advance(n);
    }

    SwigPyIterator& operator -= (ptrdiff_t n)
    {
      return *advance(-n);
    }
      
    SwigPyIterator* operator + (ptrdiff_t n) const
    {
      return copy()->advance(n);
    }

    SwigPyIterator* operator - (ptrdiff_t n) const
    {
      return copy()->advance(-n);
    }
      
    ptrdiff_t operator - (const SwigPyIterator& x) const
    {
      return x.distance(*this);
    }
      
    static swig_type_info* descriptor() {
      static int init = 0;
      static swig_type_info* desc = 0;
      if (!init) {
	desc = SWIG_TypeQuery("swig::SwigPyIterator *");
	init = 1;
      }	
      return desc;
    }    
  };
}


SWIGINTERN int
SWIG_AsVal_double (PyObject *obj, double *val)
{
  int res = SWIG_TypeError;
  if (PyFloat_Check(obj)) {
    if (val) *val = PyFloat_AsDouble(obj);
    return SWIG_OK;
  } else if (PyInt_Check(obj)) {
    if (val) *val = PyInt_AsLong(obj);
    return SWIG_OK;
  } else if (PyLong_Check(obj)) {
    double v = PyLong_AsDouble(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      PyErr_Clear();
    }
  }
#ifdef SWIG_PYTHON_CAST_MODE
  {
    int dispatch = 0;
    double d = PyFloat_AsDouble(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = d;
      return SWIG_AddCast(SWIG_OK);
    } else {
      PyErr_Clear();
    }
    if (!dispatch) {
      long v = PyLong_AsLong(obj);
      if (!PyErr_Occurred()) {
	if (val) *val = v;
	return SWIG_AddCast(SWIG_AddCast(SWIG_OK));
      } else {
	PyErr_Clear();
      }
    }
  }
#endif
  return res;
}


#include <float.h>


#include <math.h>


SWIGINTERNINLINE int
SWIG_CanCastAsInteger(double *d, double min, double max) {
  double x = *d;
  if ((min <= x && x <= max)) {
   double fx = floor(x);
   double cx = ceil(x);
   double rd =  ((x - fx) < 0.5) ? fx : cx; /* simple rint */
   if ((errno == EDOM) || (errno == ERANGE)) {
     errno = 0;
   } else {
     double summ, reps, diff;
     if (rd < x) {
       diff = x - rd;
     } else if (rd > x) {
       diff = rd - x;
     } else {
       return 1;
     }
     summ = rd + x;
     reps = diff/summ;
     if (reps < 8*DBL_EPSILON) {
       *d = rd;
       return 1;
     }
   }
  }
  return 0;
}


SWIGINTERN int
SWIG_AsVal_unsigned_SS_long (PyObject *obj, unsigned long *val) 
{
  if (PyInt_Check(obj)) {
    long v = PyInt_AsLong(obj);
    if (v >= 0) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      return SWIG_OverflowError;
    }
  } else if (PyLong_Check(obj)) {
    unsigned long v = PyLong_AsUnsignedLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      PyErr_Clear();
    }
  }
#ifdef SWIG_PYTHON_CAST_MODE
  {
    int dispatch = 0;
    unsigned long v = PyLong_AsUnsignedLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_AddCast(SWIG_OK);
    } else {
      PyErr_Clear();
    }
    if (!dispatch) {
      double d;
      int res = SWIG_AddCast(SWIG_AsVal_double (obj,&d));
      if (SWIG_IsOK(res) && SWIG_CanCastAsInteger(&d, 0, ULONG_MAX)) {
	if (val) *val = (unsigned long)(d);
	return res;
      }
    }
  }
#endif
  return SWIG_TypeError;
}


SWIGINTERNINLINE int
SWIG_AsVal_size_t (PyObject * obj, size_t *val)
{
  unsigned long v;
  int res = SWIG_AsVal_unsigned_SS_long (obj, val ? &v : 0);
  if (SWIG_IsOK(res) && val) *val = static_cast< size_t >(v);
  return res;
}


  #define SWIG_From_long   PyInt_FromLong 


SWIGINTERNINLINE PyObject *
SWIG_From_ptrdiff_t  (ptrdiff_t value)
{    
  return SWIG_From_long  (static_cast< long >(value));
}


SWIGINTERNINLINE PyObject*
  SWIG_From_bool  (bool value)
{
  return PyBool_FromLong(value ? 1 : 0);
}


SWIGINTERN int
SWIG_AsVal_long (PyObject *obj, long* val)
{
  if (PyInt_Check(obj)) {
    if (val) *val = PyInt_AsLong(obj);
    return SWIG_OK;
  } else if (PyLong_Check(obj)) {
    long v = PyLong_AsLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      PyErr_Clear();
    }
  }
#ifdef SWIG_PYTHON_CAST_MODE
  {
    int dispatch = 0;
    long v = PyInt_AsLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_AddCast(SWIG_OK);
    } else {
      PyErr_Clear();
    }
    if (!dispatch) {
      double d;
      int res = SWIG_AddCast(SWIG_AsVal_double (obj,&d));
      if (SWIG_IsOK(res) && SWIG_CanCastAsInteger(&d, LONG_MIN, LONG_MAX)) {
	if (val) *val = (long)(d);
	return res;
      }
    }
  }
#endif
  return SWIG_TypeError;
}


SWIGINTERNINLINE int
SWIG_AsVal_ptrdiff_t (PyObject * obj, ptrdiff_t *val)
{
  long v;
  int res = SWIG_AsVal_long (obj, val ? &v : 0);
  if (SWIG_IsOK(res) && val) *val = static_cast< ptrdiff_t >(v);
  return res;
}


#include <stdexcept>


#include <algorithm>


#include <vector>


#include <utility>


#include <map>
#include <algorithm>
#include <stdexcept>


#define SWIG_FILE_WITH_INIT


#define NPY_NO_DEPRECATED_API NPY_1_7_API_VERSION
#include "numpy/arrayobject.h"
#include "string.h"


#define SWIG_FILE_WITH_INIT
#include "../MMDevice/MMDeviceConstants.h"
#include "../MMCore/Error.h"
#include "../MMCore/Configuration.h"
#include "../MMDevice/ImageMetadata.h"
#include "../MMCore/MMEventCallback.h"
#include "../MMCore/MMCore.h"


namespace swig {  
  template <class Type>
  struct noconst_traits {
    typedef Type noconst_type;
  };

  template <class Type>
  struct noconst_traits<const Type> {
    typedef Type noconst_type;
  };

  /*
    type categories
  */
  struct pointer_category { };  
  struct value_category { };

  /*
    General traits that provides type_name and type_info
  */
  template <class Type> struct traits { };

  template <class Type>
  inline const char* type_name() {
    return traits<typename noconst_traits<Type >::noconst_type >::type_name();
  }

  template <class Type> 
  struct traits_info {
    static swig_type_info *type_query(std::string name) {
      name += " *";
      return SWIG_TypeQuery(name.c_str());
    }    
    static swig_type_info *type_info() {
      static swig_type_info *info = type_query(type_name<Type>());
      return info;
    }
  };

  template <class Type>
  inline swig_type_info *type_info() {
    return traits_info<Type>::type_info();
  }

  /*
    Partial specialization for pointers
  */
  template <class Type> struct traits <Type *> {
    typedef pointer_category category;
    static std::string make_ptr_name(const char* name) {
      std::string ptrname = name;
      ptrname += " *";
      return ptrname;
    }    
    static const char* type_name() {
      static std::string name = make_ptr_name(swig::type_name<Type>());
      return name.c_str();
    }
  };

  template <class Type, class Category> 
  struct traits_as { };
 
  template <class Type, class Category> 
  struct traits_check { };

}


namespace swig {  
  /*
    Traits that provides the from method
  */
  template <class Type> struct traits_from_ptr {
    static PyObject *from(Type *val, int owner = 0) {
      return SWIG_NewPointerObj(val, type_info<Type>(), owner);
    }
  };

  template <class Type> struct traits_from {
    static PyObject *from(const Type& val) {
      return traits_from_ptr<Type>::from(new Type(val), 1);
    }
  };

  template <class Type> struct traits_from<Type *> {
    static PyObject *from(Type* val) {
      return traits_from_ptr<Type>::from(val, 0);
    }
  };

  template <class Type> struct traits_from<const Type *> {
    static PyObject *from(const Type* val) {
      return traits_from_ptr<Type>::from(const_cast<Type*>(val), 0);
    }
  };


  template <class Type>
  inline PyObject *from(const Type& val) {
    return traits_from<Type>::from(val);
  }

  template <class Type>
  inline PyObject *from_ptr(Type* val, int owner) {
    return traits_from_ptr<Type>::from(val, owner);
  }

  /*
    Traits that provides the asval/as/check method
  */
  template <class Type>
  struct traits_asptr {   
    static int asptr(PyObject *obj, Type **val) {
      Type *p;
      int res = SWIG_ConvertPtr(obj, (void**)&p, type_info<Type>(), 0);
      if (SWIG_IsOK(res)) {
	if (val) *val = p;
      }
      return res;
    }
  }; 

  template <class Type>
  inline int asptr(PyObject *obj, Type **vptr) {
    return traits_asptr<Type>::asptr(obj, vptr);
  }

  template <class Type> 
  struct traits_asval {
    static int asval(PyObject *obj, Type *val) {
      if (val) {
	Type *p = 0;
	int res = traits_asptr<Type>::asptr(obj, &p);
	if (!SWIG_IsOK(res)) return res;	
	if (p) {
	  typedef typename noconst_traits<Type>::noconst_type noconst_type;
	  *(const_cast<noconst_type*>(val)) = *p;
	  if (SWIG_IsNewObj(res)){
	    delete p;
	    res = SWIG_DelNewMask(res);
	  }
	  return res;
	} else {
	  return SWIG_ERROR;
	}
      } else {
	return traits_asptr<Type>::asptr(obj, (Type **)(0));
      }
    }
  };

  template <class Type> struct traits_asval<Type*> {
    static int asval(PyObject *obj, Type **val) {
      if (val) {
        typedef typename noconst_traits<Type>::noconst_type noconst_type;
        noconst_type *p = 0;
        int res = traits_asptr<noconst_type>::asptr(obj,  &p);
        if (SWIG_IsOK(res)) {
          *(const_cast<noconst_type**>(val)) = p;
	}
	return res;
      } else {
	return traits_asptr<Type>::asptr(obj, (Type **)(0));
      }
    }
  };
  
  template <class Type>
  inline int asval(PyObject *obj, Type *val) {
    return traits_asval<Type>::asval(obj, val);
  }

  template <class Type> 
  struct traits_as<Type, value_category> {
    static Type as(PyObject *obj, bool throw_error) {
      Type v;
      int res = asval(obj, &v);
      if (!obj || !SWIG_IsOK(res)) {
	if (!PyErr_Occurred()) {
	  ::SWIG_Error(SWIG_TypeError,  swig::type_name<Type>());
	}
	if (throw_error) throw std::invalid_argument("bad type");
      }
      return v;
    }
  };

  template <class Type> 
  struct traits_as<Type, pointer_category> {
    static Type as(PyObject *obj, bool throw_error) {
      Type *v = 0;      
      int res = (obj ? traits_asptr<Type>::asptr(obj, &v) : SWIG_ERROR);
      if (SWIG_IsOK(res) && v) {
	if (SWIG_IsNewObj(res)) {
	  Type r(*v);
	  delete v;
	  return r;
	} else {
	  return *v;
	}
      } else {
	// Uninitialized return value, no Type() constructor required.
	static Type *v_def = (Type*) malloc(sizeof(Type));
	if (!PyErr_Occurred()) {
	  SWIG_Error(SWIG_TypeError,  swig::type_name<Type>());
	}
	if (throw_error) throw std::invalid_argument("bad type");
	memset(v_def,0,sizeof(Type));
	return *v_def;
      }
    }
  };

  template <class Type> 
  struct traits_as<Type*, pointer_category> {
    static Type* as(PyObject *obj, bool throw_error) {
      Type *v = 0;      
      int res = (obj ? traits_asptr<Type>::asptr(obj, &v) : SWIG_ERROR);
      if (SWIG_IsOK(res)) {
	return v;
      } else {
	if (!PyErr_Occurred()) {
	  SWIG_Error(SWIG_TypeError,  swig::type_name<Type>());
	}
	if (throw_error) throw std::invalid_argument("bad type");
	return 0;
      }
    }
  };
    
  template <class Type>
  inline Type as(PyObject *obj, bool te = false) {
    return traits_as<Type, typename traits<Type>::category>::as(obj, te);
  }

  template <class Type> 
  struct traits_check<Type, value_category> {
    static bool check(PyObject *obj) {
      int res = obj ? asval(obj, (Type *)(0)) : SWIG_ERROR;
      return SWIG_IsOK(res) ? true : false;
    }
  };

  template <class Type> 
  struct traits_check<Type, pointer_category> {
    static bool check(PyObject *obj) {
      int res = obj ? asptr(obj, (Type **)(0)) : SWIG_ERROR;
      return SWIG_IsOK(res) ? true : false;
    }
  };

  template <class Type>
  inline bool check(PyObject *obj) {
    return traits_check<Type, typename traits<Type>::category>::check(obj);
  }
}


#include <functional>

namespace std {
  template <>
  struct less <PyObject *>: public binary_function<PyObject *, PyObject *, bool>
  {
    bool
    operator()(PyObject * v, PyObject *w) const
    { 
      bool res;
      SWIG_PYTHON_THREAD_BEGIN_BLOCK;
      res = PyObject_RichCompareBool(v, w, Py_LT) ? true : false;
      /* This may fall into a case of inconsistent
               eg. ObjA > ObjX > ObjB
               but ObjA < ObjB
      */
      if( PyErr_Occurred() && PyErr_ExceptionMatches(PyExc_TypeError) )
      {
        /* Objects can't be compared, this mostly occurred in Python 3.0 */
        /* Compare their ptr directly for a workaround */
        res = (v < w);
        PyErr_Clear();
      }
      SWIG_PYTHON_THREAD_END_BLOCK;
      return res;
    }
  };

  template <>
  struct less <swig::SwigPtr_PyObject>: public binary_function<swig::SwigPtr_PyObject, swig::SwigPtr_PyObject, bool>
  {
    bool
    operator()(const swig::SwigPtr_PyObject& v, const swig::SwigPtr_PyObject& w) const
    {
      return std::less<PyObject *>()(v, w);
    }
  };

  template <>
  struct less <swig::SwigVar_PyObject>: public binary_function<swig::SwigVar_PyObject, swig::SwigVar_PyObject, bool>
  {
    bool
    operator()(const swig::SwigVar_PyObject& v, const swig::SwigVar_PyObject& w) const
    {
      return std::less<PyObject *>()(v, w);
    }
  };

}

namespace swig {
  template <> struct traits<PyObject *> {
    typedef value_category category;
    static const char* type_name() { return "PyObject *"; }
  };  

  template <>  struct traits_asval<PyObject * > {   
    typedef PyObject * value_type;
    static int asval(PyObject *obj, value_type *val) {
      if (val) *val = obj;
      return SWIG_OK;
    }
  };

  template <> 
  struct traits_check<PyObject *, value_category> {
    static bool check(PyObject *) {
      return true;
    }
  };

  template <>  struct traits_from<PyObject *> {
    typedef PyObject * value_type;
    static PyObject *from(const value_type& val) {
      Py_XINCREF(val);
      return val;
    }
  };
  
}

namespace swig {
  inline size_t
  check_index(ptrdiff_t i, size_t size, bool insert = false) {
    if ( i < 0 ) {
      if ((size_t) (-i) <= size)
	return (size_t) (i + size);
    } else if ( (size_t) i < size ) {
      return (size_t) i;
    } else if (insert && ((size_t) i == size)) {
      return size;
    }
    
    throw std::out_of_range("index out of range");
  }

  inline size_t
  slice_index(ptrdiff_t i, size_t size) {
    if ( i < 0 ) {
      if ((size_t) (-i) <= size) {
	return (size_t) (i + size);
      } else {
	throw std::out_of_range("index out of range");
      }
    } else {
      return ( (size_t) i < size ) ? ((size_t) i) : size;
    }
  }

  template <class Sequence, class Difference>
  inline typename Sequence::iterator
  getpos(Sequence* self, Difference i)  {
    typename Sequence::iterator pos = self->begin();
    std::advance(pos, check_index(i,self->size()));
    return pos;
  }

  template <class Sequence, class Difference>
  inline typename Sequence::const_iterator
  cgetpos(const Sequence* self, Difference i)  {
    typename Sequence::const_iterator pos = self->begin();
    std::advance(pos, check_index(i,self->size()));
    return pos;
  }

  template <class Sequence, class Difference>
  inline Sequence*
  getslice(const Sequence* self, Difference i, Difference j) {
    typename Sequence::size_type size = self->size();
    typename Sequence::size_type ii = swig::check_index(i, size);
    typename Sequence::size_type jj = swig::slice_index(j, size);

    if (jj > ii) {
      typename Sequence::const_iterator vb = self->begin();
      typename Sequence::const_iterator ve = self->begin();
      std::advance(vb,ii);
      std::advance(ve,jj);
      return new Sequence(vb, ve);
    } else {
      return new Sequence();
    }
  }

  template <class Sequence, class Difference, class InputSeq>
  inline void
  setslice(Sequence* self, Difference i, Difference j, const InputSeq& v) {
    typename Sequence::size_type size = self->size();
    typename Sequence::size_type ii = swig::check_index(i, size, true);
    typename Sequence::size_type jj = swig::slice_index(j, size);
    if (jj < ii) jj = ii;
    size_t ssize = jj - ii;
    if (ssize <= v.size()) {
      typename Sequence::iterator sb = self->begin();
      typename InputSeq::const_iterator vmid = v.begin();
      std::advance(sb,ii);
      std::advance(vmid, jj - ii);
      self->insert(std::copy(v.begin(), vmid, sb), vmid, v.end());
    } else {
      typename Sequence::iterator sb = self->begin();
      typename Sequence::iterator se = self->begin();
      std::advance(sb,ii);
      std::advance(se,jj);
      self->erase(sb,se);
      self->insert(sb, v.begin(), v.end());
    }
  }

  template <class Sequence, class Difference>
  inline void
  delslice(Sequence* self, Difference i, Difference j) {
    typename Sequence::size_type size = self->size();
    typename Sequence::size_type ii = swig::check_index(i, size, true);
    typename Sequence::size_type jj = swig::slice_index(j, size);
    if (jj > ii) {
      typename Sequence::iterator sb = self->begin();
      typename Sequence::iterator se = self->begin();
      std::advance(sb,ii);
      std::advance(se,jj);
      self->erase(sb,se);
    }
  }
}


#if defined(__SUNPRO_CC) && defined(_RWSTD_VER)
#  if !defined(SWIG_NO_STD_NOITERATOR_TRAITS_STL)
#    define SWIG_STD_NOITERATOR_TRAITS_STL
#  endif
#endif

#if !defined(SWIG_STD_NOITERATOR_TRAITS_STL)
#include <iterator>
#else
namespace std {
  template <class Iterator>
  struct iterator_traits {
    typedef ptrdiff_t difference_type;
    typedef typename Iterator::value_type value_type;
  };

  template <class Iterator, class Category,class T, class Reference, class Pointer, class Distance>
  struct iterator_traits<__reverse_bi_iterator<Iterator,Category,T,Reference,Pointer,Distance> > {
    typedef Distance difference_type;
    typedef T value_type;
  };

  template <class T>
  struct iterator_traits<T*> {
    typedef T value_type;
    typedef ptrdiff_t difference_type;
  };

  template<typename _InputIterator>
  inline typename iterator_traits<_InputIterator>::difference_type
  distance(_InputIterator __first, _InputIterator __last)
  {
    typename iterator_traits<_InputIterator>::difference_type __n = 0;
    while (__first != __last) {
      ++__first; ++__n;
    }
    return __n;
  }
}
#endif


namespace swig {
  template<typename OutIterator>
  class SwigPyIterator_T :  public SwigPyIterator
  {
  public:
    typedef OutIterator out_iterator;
    typedef typename std::iterator_traits<out_iterator>::value_type value_type;    
    typedef SwigPyIterator_T<out_iterator> self_type;

    SwigPyIterator_T(out_iterator curr, PyObject *seq)
      : SwigPyIterator(seq), current(curr)
    {
    }

    const out_iterator& get_current() const
    {
      return current;
    }

    
    bool equal (const SwigPyIterator &iter) const
    {
      const self_type *iters = dynamic_cast<const self_type *>(&iter);
      if (iters) {
	return (current == iters->get_current());
      } else {
	throw std::invalid_argument("bad iterator type");
      }
    }
    
    ptrdiff_t distance(const SwigPyIterator &iter) const
    {
      const self_type *iters = dynamic_cast<const self_type *>(&iter);
      if (iters) {
	return std::distance(current, iters->get_current());
      } else {
	throw std::invalid_argument("bad iterator type");
      }
    }    
    
  protected:
    out_iterator current;
  };
  
  template <class ValueType>
  struct from_oper 
  {
    typedef const ValueType& argument_type;
    typedef PyObject *result_type;
    result_type operator()(argument_type v) const
    {
      return swig::from(v);
    }
  };

  template<typename OutIterator, 
	   typename ValueType = typename std::iterator_traits<OutIterator>::value_type,
	   typename FromOper = from_oper<ValueType> >
  class SwigPyIteratorOpen_T :  public SwigPyIterator_T<OutIterator>
  {
  public:
    FromOper from;
    typedef OutIterator out_iterator;
    typedef ValueType value_type;
    typedef SwigPyIterator_T<out_iterator>  base;
    typedef SwigPyIteratorOpen_T<OutIterator, ValueType, FromOper> self_type;
    
    SwigPyIteratorOpen_T(out_iterator curr, PyObject *seq)
      : SwigPyIterator_T<OutIterator>(curr, seq)
    {
    }
    
    PyObject *value() const {
      return from(static_cast<const value_type&>(*(base::current)));
    }
    
    SwigPyIterator *copy() const
    {
      return new self_type(*this);
    }

    SwigPyIterator *incr(size_t n = 1)
    {
      while (n--) {
	++base::current;
      }
      return this;
    }

    SwigPyIterator *decr(size_t n = 1)
    {
      while (n--) {
	--base::current;
      }
      return this;
    }
  };

  template<typename OutIterator, 
	   typename ValueType = typename std::iterator_traits<OutIterator>::value_type,
	   typename FromOper = from_oper<ValueType> >
  class SwigPyIteratorClosed_T :  public SwigPyIterator_T<OutIterator>
  {
  public:
    FromOper from;
    typedef OutIterator out_iterator;
    typedef ValueType value_type;
    typedef SwigPyIterator_T<out_iterator>  base;    
    typedef SwigPyIteratorClosed_T<OutIterator, ValueType, FromOper> self_type;
    
    SwigPyIteratorClosed_T(out_iterator curr, out_iterator first, out_iterator last, PyObject *seq)
      : SwigPyIterator_T<OutIterator>(curr, seq), begin(first), end(last)
    {
    }
    
    PyObject *value() const {
      if (base::current == end) {
	throw stop_iteration();
      } else {
	return from(static_cast<const value_type&>(*(base::current)));
      }
    }
    
    SwigPyIterator *copy() const
    {
      return new self_type(*this);
    }

    SwigPyIterator *incr(size_t n = 1)
    {
      while (n--) {
	if (base::current == end) {
	  throw stop_iteration();
	} else {
	  ++base::current;
	}
      }
      return this;
    }

    SwigPyIterator *decr(size_t n = 1)
    {
      while (n--) {
	if (base::current == begin) {
	  throw stop_iteration();
	} else {
	  --base::current;
	}
      }
      return this;
    }

  private:
    out_iterator begin;
    out_iterator end;
  };

  template<typename OutIter>
  inline SwigPyIterator*
  make_output_iterator(const OutIter& current, const OutIter& begin,const OutIter& end, PyObject *seq = 0)
  {
    return new SwigPyIteratorClosed_T<OutIter>(current, begin, end, seq);
  }

  template<typename OutIter>
  inline SwigPyIterator*
  make_output_iterator(const OutIter& current, PyObject *seq = 0)
  {
    return new SwigPyIteratorOpen_T<OutIter>(current, seq);
  }
}


namespace swig
{
  template <class T>
  struct SwigPySequence_Ref
  {
    SwigPySequence_Ref(PyObject* seq, int index)
      : _seq(seq), _index(index)
    {
    }
    
    operator T () const
    {
      swig::SwigVar_PyObject item = PySequence_GetItem(_seq, _index);
      try {
	return swig::as<T>(item, true);
      } catch (std::exception& e) {
	char msg[1024];
	sprintf(msg, "in sequence element %d ", _index);
	if (!PyErr_Occurred()) {
	  ::SWIG_Error(SWIG_TypeError,  swig::type_name<T>());
	}
	SWIG_Python_AddErrorMsg(msg);
	SWIG_Python_AddErrorMsg(e.what());
	throw;
      }
    }

    SwigPySequence_Ref& operator=(const T& v)
    {
      PySequence_SetItem(_seq, _index, swig::from<T>(v));
      return *this;
    }

  private:
    PyObject* _seq;
    int _index;
  };

  template <class T>
  struct SwigPySequence_ArrowProxy
  {
    SwigPySequence_ArrowProxy(const T& x): m_value(x) {}
    const T* operator->() const { return &m_value; }
    operator const T*() const { return &m_value; }
    T m_value;
  };

  template <class T, class Reference >
  struct SwigPySequence_InputIterator
  {
    typedef SwigPySequence_InputIterator<T, Reference > self;

    typedef std::random_access_iterator_tag iterator_category;
    typedef Reference reference;
    typedef T value_type;
    typedef T* pointer;
    typedef int difference_type;

    SwigPySequence_InputIterator()
    {
    }

    SwigPySequence_InputIterator(PyObject* seq, int index)
      : _seq(seq), _index(index)
    {
    }

    reference operator*() const
    {
      return reference(_seq, _index);
    }

    SwigPySequence_ArrowProxy<T>
    operator->() const {
      return SwigPySequence_ArrowProxy<T>(operator*());
    }

    bool operator==(const self& ri) const
    {
      return (_index == ri._index) && (_seq == ri._seq);
    }

    bool operator!=(const self& ri) const
    {
      return !(operator==(ri));
    }

    self& operator ++ ()
    {
      ++_index;
      return *this;
    }

    self& operator -- ()
    {
      --_index;
      return *this;
    }

    self& operator += (difference_type n)
    {
      _index += n;
      return *this;
    }

    self operator +(difference_type n) const
    {
      return self(_seq, _index + n);
    }

    self& operator -= (difference_type n)
    {
      _index -= n;
      return *this;
    }

    self operator -(difference_type n) const
    {
      return self(_seq, _index - n);
    }

    difference_type operator - (const self& ri) const
    {
      return _index - ri._index;
    }

    bool operator < (const self& ri) const
    {
      return _index < ri._index;
    }

    reference
    operator[](difference_type n) const
    {
      return reference(_seq, _index + n);
    }

  private:
    PyObject* _seq;
    difference_type _index;
  };

  template <class T>
  struct SwigPySequence_Cont
  {
    typedef SwigPySequence_Ref<T> reference;
    typedef const SwigPySequence_Ref<T> const_reference;
    typedef T value_type;
    typedef T* pointer;
    typedef int difference_type;
    typedef int size_type;
    typedef const pointer const_pointer;
    typedef SwigPySequence_InputIterator<T, reference> iterator;
    typedef SwigPySequence_InputIterator<T, const_reference> const_iterator;

    SwigPySequence_Cont(PyObject* seq) : _seq(0)
    {
      if (!PySequence_Check(seq)) {
	throw std::invalid_argument("a sequence is expected");
      }
      _seq = seq;
      Py_INCREF(_seq);
    }

    ~SwigPySequence_Cont()
    {
      Py_XDECREF(_seq);
    }

    size_type size() const
    {
      return static_cast<size_type>(PySequence_Size(_seq));
    }

    bool empty() const
    {
      return size() == 0;
    }

    iterator begin()
    {
      return iterator(_seq, 0);
    }

    const_iterator begin() const
    {
      return const_iterator(_seq, 0);
    }

    iterator end()
    {
      return iterator(_seq, size());
    }

    const_iterator end() const
    {
      return const_iterator(_seq, size());
    }

    reference operator[](difference_type n)
    {
      return reference(_seq, n);
    }

    const_reference operator[](difference_type n)  const
    {
      return const_reference(_seq, n);
    }

    bool check(bool set_err = true) const
    {
      int s = size();
      for (int i = 0; i < s; ++i) {
	swig::SwigVar_PyObject item = PySequence_GetItem(_seq, i);
	if (!swig::check<value_type>(item)) {
	  if (set_err) {
	    char msg[1024];
	    sprintf(msg, "in sequence element %d", i);
	    SWIG_Error(SWIG_RuntimeError, msg);
	  }
	  return false;
	}
      }
      return true;
    }

  private:
    PyObject* _seq;
  };

}


SWIGINTERN swig_type_info*
SWIG_pchar_descriptor(void)
{
  static int init = 0;
  static swig_type_info* info = 0;
  if (!init) {
    info = SWIG_TypeQuery("_p_char");
    init = 1;
  }
  return info;
}


SWIGINTERN int
SWIG_AsCharPtrAndSize(PyObject *obj, char** cptr, size_t* psize, int *alloc)
{
#if PY_VERSION_HEX>=0x03000000
  if (PyUnicode_Check(obj))
#else  
  if (PyString_Check(obj))
#endif
  {
    char *cstr; Py_ssize_t len;
#if PY_VERSION_HEX>=0x03000000
    if (!alloc && cptr) {
        /* We can't allow converting without allocation, since the internal
           representation of string in Python 3 is UCS-2/UCS-4 but we require
           a UTF-8 representation.
           TODO(bhy) More detailed explanation */
        return SWIG_RuntimeError;
    }
    obj = PyUnicode_AsUTF8String(obj);
    PyBytes_AsStringAndSize(obj, &cstr, &len);
    if(alloc) *alloc = SWIG_NEWOBJ;
#else
    PyString_AsStringAndSize(obj, &cstr, &len);
#endif
    if (cptr) {
      if (alloc) {
	/* 
	   In python the user should not be able to modify the inner
	   string representation. To warranty that, if you define
	   SWIG_PYTHON_SAFE_CSTRINGS, a new/copy of the python string
	   buffer is always returned.

	   The default behavior is just to return the pointer value,
	   so, be careful.
	*/ 
#if defined(SWIG_PYTHON_SAFE_CSTRINGS)
	if (*alloc != SWIG_OLDOBJ) 
#else
	if (*alloc == SWIG_NEWOBJ) 
#endif
	  {
	    *cptr = reinterpret_cast< char* >(memcpy((new char[len + 1]), cstr, sizeof(char)*(len + 1)));
	    *alloc = SWIG_NEWOBJ;
	  }
	else {
	  *cptr = cstr;
	  *alloc = SWIG_OLDOBJ;
	}
      } else {
        #if PY_VERSION_HEX>=0x03000000
        assert(0); /* Should never reach here in Python 3 */
        #endif
	*cptr = SWIG_Python_str_AsChar(obj);
      }
    }
    if (psize) *psize = len + 1;
#if PY_VERSION_HEX>=0x03000000
    Py_XDECREF(obj);
#endif
    return SWIG_OK;
  } else {
    swig_type_info* pchar_descriptor = SWIG_pchar_descriptor();
    if (pchar_descriptor) {
      void* vptr = 0;
      if (SWIG_ConvertPtr(obj, &vptr, pchar_descriptor, 0) == SWIG_OK) {
	if (cptr) *cptr = (char *) vptr;
	if (psize) *psize = vptr ? (strlen((char *)vptr) + 1) : 0;
	if (alloc) *alloc = SWIG_OLDOBJ;
	return SWIG_OK;
      }
    }
  }
  return SWIG_TypeError;
}


SWIGINTERN int
SWIG_AsCharArray(PyObject * obj, char *val, size_t size)
{ 
  char* cptr = 0; size_t csize = 0; int alloc = SWIG_OLDOBJ;
  int res = SWIG_AsCharPtrAndSize(obj, &cptr, &csize, &alloc);
  if (SWIG_IsOK(res)) {
    if ((csize == size + 1) && cptr && !(cptr[csize-1])) --csize;
    if (csize <= size) {
      if (val) {
	if (csize) memcpy(val, cptr, csize*sizeof(char));
	if (csize < size) memset(val + csize, 0, (size - csize)*sizeof(char));
      }
      if (alloc == SWIG_NEWOBJ) {
	delete[] cptr;
	res = SWIG_DelNewMask(res);
      }      
      return res;
    }
    if (alloc == SWIG_NEWOBJ) delete[] cptr;
  }
  return SWIG_TypeError;
}


#include <limits.h>
#if !defined(SWIG_NO_LLONG_MAX)
# if !defined(LLONG_MAX) && defined(__GNUC__) && defined (__LONG_LONG_MAX__)
#   define LLONG_MAX __LONG_LONG_MAX__
#   define LLONG_MIN (-LLONG_MAX - 1LL)
#   define ULLONG_MAX (LLONG_MAX * 2ULL + 1ULL)
# endif
#endif


SWIGINTERN int
SWIG_AsVal_char (PyObject * obj, char *val)
{    
  int res = SWIG_AsCharArray(obj, val, 1);
  if (!SWIG_IsOK(res)) {
    long v;
    res = SWIG_AddCast(SWIG_AsVal_long (obj, &v));
    if (SWIG_IsOK(res)) {
      if ((CHAR_MIN <= v) && (v <= CHAR_MAX)) {
	if (val) *val = static_cast< char >(v);
      } else {
	res = SWIG_OverflowError;
      }
    }
  }
  return res;
}


SWIGINTERNINLINE PyObject *
SWIG_FromCharPtrAndSize(const char* carray, size_t size)
{
  if (carray) {
    if (size > INT_MAX) {
      swig_type_info* pchar_descriptor = SWIG_pchar_descriptor();
      return pchar_descriptor ? 
	SWIG_NewPointerObj(const_cast< char * >(carray), pchar_descriptor, 0) : SWIG_Py_Void();
    } else {
#if PY_VERSION_HEX >= 0x03000000
      return PyUnicode_FromStringAndSize(carray, static_cast< int >(size));
#else
      return PyString_FromStringAndSize(carray, static_cast< int >(size));
#endif
    }
  } else {
    return SWIG_Py_Void();
  }
}


SWIGINTERNINLINE PyObject *
SWIG_From_char  (char c) 
{ 
  return SWIG_FromCharPtrAndSize(&c,1);
}


namespace swig {
  template <> struct traits<char > {
    typedef value_category category;
    static const char* type_name() { return"char"; }
  };  
  template <>  struct traits_asval<char > {   
    typedef char value_type;
    static int asval(PyObject *obj, value_type *val) { 
      return SWIG_AsVal_char (obj, val);
    }
  };
  template <>  struct traits_from<char > {
    typedef char value_type;
    static PyObject *from(const value_type& val) {
      return SWIG_From_char  (val);
    }
  };
}


namespace swig {
  template <class SwigPySeq, class Seq>
  inline void
  assign(const SwigPySeq& swigpyseq, Seq* seq) {
    // seq->assign(swigpyseq.begin(), swigpyseq.end()); // not used as not always implemented
    typedef typename SwigPySeq::value_type value_type;
    typename SwigPySeq::const_iterator it = swigpyseq.begin();
    for (;it != swigpyseq.end(); ++it) {
      seq->insert(seq->end(),(value_type)(*it));
    }
  }

  template <class Seq, class T = typename Seq::value_type >
  struct traits_asptr_stdseq {
    typedef Seq sequence;
    typedef T value_type;

    static int asptr(PyObject *obj, sequence **seq) {
      if (obj == Py_None || SWIG_Python_GetSwigThis(obj)) {
	sequence *p;
	if (::SWIG_ConvertPtr(obj,(void**)&p,
			      swig::type_info<sequence>(),0) == SWIG_OK) {
	  if (seq) *seq = p;
	  return SWIG_OLDOBJ;
	}
      } else if (PySequence_Check(obj)) {
	try {
	  SwigPySequence_Cont<value_type> swigpyseq(obj);
	  if (seq) {
	    sequence *pseq = new sequence();
	    assign(swigpyseq, pseq);
	    *seq = pseq;
	    return SWIG_NEWOBJ;
	  } else {
	    return swigpyseq.check() ? SWIG_OK : SWIG_ERROR;
	  }
	} catch (std::exception& e) {
	  if (seq) {
	    if (!PyErr_Occurred()) {
	      PyErr_SetString(PyExc_TypeError, e.what());
	    }
	  }
	  return SWIG_ERROR;
	}
      }
      return SWIG_ERROR;
    }
  };

  template <class Seq, class T = typename Seq::value_type >
  struct traits_from_stdseq {
    typedef Seq sequence;
    typedef T value_type;
    typedef typename Seq::size_type size_type;
    typedef typename sequence::const_iterator const_iterator;

    static PyObject *from(const sequence& seq) {
#ifdef SWIG_PYTHON_EXTRA_NATIVE_CONTAINERS
      swig_type_info *desc = swig::type_info<sequence>();
      if (desc && desc->clientdata) {
	return SWIG_NewPointerObj(new sequence(seq), desc, SWIG_POINTER_OWN);
      }
#endif
      size_type size = seq.size();
      if (size <= (size_type)INT_MAX) {
	PyObject *obj = PyTuple_New((int)size);
	int i = 0;
	for (const_iterator it = seq.begin();
	     it != seq.end(); ++it, ++i) {
	  PyTuple_SetItem(obj,i,swig::from<value_type>(*it));
	}
	return obj;
      } else {
	PyErr_SetString(PyExc_OverflowError,"sequence size not valid in python");
	return NULL;
      }
    }
  };
}


  namespace swig {
    template <class T>
    struct traits_asptr<std::vector<T> >  {
      static int asptr(PyObject *obj, std::vector<T> **vec) {
	return traits_asptr_stdseq<std::vector<T> >::asptr(obj, vec);
      }
    };
    
    template <class T>
    struct traits_from<std::vector<T> > {
      static PyObject *from(const std::vector<T>& vec) {
	return traits_from_stdseq<std::vector<T> >::from(vec);
      }
    };
  }


      namespace swig {
	template <>  struct traits<std::vector<char, std::allocator< char > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::vector<" "char" "," "std::allocator< char >" " >";
	  }
	};
      }
    
SWIGINTERN swig::SwigPyIterator *std_vector_Sl_char_Sg__iterator(std::vector< char > *self,PyObject **PYTHON_SELF){
      return swig::make_output_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
    }
SWIGINTERN bool std_vector_Sl_char_Sg____nonzero__(std::vector< char > const *self){
      return !(self->empty());
    }
SWIGINTERN bool std_vector_Sl_char_Sg____bool__(std::vector< char > const *self){
      return !(self->empty());
    }
SWIGINTERN std::vector< char >::size_type std_vector_Sl_char_Sg____len__(std::vector< char > const *self){
      return self->size();
    }

SWIGINTERNINLINE PyObject* 
SWIG_From_unsigned_SS_long  (unsigned long value)
{
  return (value > LONG_MAX) ?
    PyLong_FromUnsignedLong(value) : PyInt_FromLong(static_cast< long >(value)); 
}


SWIGINTERNINLINE PyObject *
SWIG_From_size_t  (size_t value)
{    
  return SWIG_From_unsigned_SS_long  (static_cast< unsigned long >(value));
}

SWIGINTERN std::vector< char >::value_type std_vector_Sl_char_Sg__pop(std::vector< char > *self){
      if (self->size() == 0)
	throw std::out_of_range("pop from empty container");
      std::vector<char,std::allocator< char > >::value_type x = self->back();
      self->pop_back();
      return x;
    }
SWIGINTERN std::vector< char,std::allocator< char > > *std_vector_Sl_char_Sg____getslice__(std::vector< char > *self,std::vector< char >::difference_type i,std::vector< char >::difference_type j){
      return swig::getslice(self, i, j);
    }
SWIGINTERN void std_vector_Sl_char_Sg____setslice__(std::vector< char > *self,std::vector< char >::difference_type i,std::vector< char >::difference_type j,std::vector< char,std::allocator< char > > const &v){
      swig::setslice(self, i, j, v);
    }
SWIGINTERN void std_vector_Sl_char_Sg____delslice__(std::vector< char > *self,std::vector< char >::difference_type i,std::vector< char >::difference_type j){
      swig::delslice(self, i, j);
    }
SWIGINTERN void std_vector_Sl_char_Sg____delitem____SWIG_0(std::vector< char > *self,std::vector< char >::difference_type i){
      self->erase(swig::getpos(self,i));
    }
SWIGINTERN std::vector< char,std::allocator< char > > *std_vector_Sl_char_Sg____getitem____SWIG_0(std::vector< char > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return NULL;
      }
      PySlice_GetIndices(slice, self->size(), &i, &j, &step);
      return swig::getslice(self, i, j);
    }
SWIGINTERN void std_vector_Sl_char_Sg____setitem____SWIG_0(std::vector< char > *self,PySliceObject *slice,std::vector< char,std::allocator< char > > const &v){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(slice, self->size(), &i, &j, &step);
      swig::setslice(self, i, j, v);
    }
SWIGINTERN void std_vector_Sl_char_Sg____delitem____SWIG_1(std::vector< char > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(slice, self->size(), &i, &j, &step);
      swig::delslice(self, i,j);
    }
SWIGINTERN std::vector< char >::value_type const &std_vector_Sl_char_Sg____getitem____SWIG_1(std::vector< char > const *self,std::vector< char >::difference_type i){
      return *(swig::cgetpos(self, i));
    }
SWIGINTERN void std_vector_Sl_char_Sg____setitem____SWIG_1(std::vector< char > *self,std::vector< char >::difference_type i,std::vector< char >::value_type const &x){
      *(swig::getpos(self,i)) = x;
    }
SWIGINTERN void std_vector_Sl_char_Sg__append(std::vector< char > *self,std::vector< char >::value_type const &x){
      self->push_back(x);
    }

namespace swig {
  template <> struct traits<long > {
    typedef value_category category;
    static const char* type_name() { return"long"; }
  };  
  template <>  struct traits_asval<long > {   
    typedef long value_type;
    static int asval(PyObject *obj, value_type *val) { 
      return SWIG_AsVal_long (obj, val);
    }
  };
  template <>  struct traits_from<long > {
    typedef long value_type;
    static PyObject *from(const value_type& val) {
      return SWIG_From_long  (val);
    }
  };
}


      namespace swig {
	template <>  struct traits<std::vector<long, std::allocator< long > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::vector<" "long" "," "std::allocator< long >" " >";
	  }
	};
      }
    
SWIGINTERN swig::SwigPyIterator *std_vector_Sl_long_Sg__iterator(std::vector< long > *self,PyObject **PYTHON_SELF){
      return swig::make_output_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
    }
SWIGINTERN bool std_vector_Sl_long_Sg____nonzero__(std::vector< long > const *self){
      return !(self->empty());
    }
SWIGINTERN bool std_vector_Sl_long_Sg____bool__(std::vector< long > const *self){
      return !(self->empty());
    }
SWIGINTERN std::vector< long >::size_type std_vector_Sl_long_Sg____len__(std::vector< long > const *self){
      return self->size();
    }
SWIGINTERN std::vector< long >::value_type std_vector_Sl_long_Sg__pop(std::vector< long > *self){
      if (self->size() == 0)
	throw std::out_of_range("pop from empty container");
      std::vector<long,std::allocator< long > >::value_type x = self->back();
      self->pop_back();
      return x;
    }
SWIGINTERN std::vector< long,std::allocator< long > > *std_vector_Sl_long_Sg____getslice__(std::vector< long > *self,std::vector< long >::difference_type i,std::vector< long >::difference_type j){
      return swig::getslice(self, i, j);
    }
SWIGINTERN void std_vector_Sl_long_Sg____setslice__(std::vector< long > *self,std::vector< long >::difference_type i,std::vector< long >::difference_type j,std::vector< long,std::allocator< long > > const &v){
      swig::setslice(self, i, j, v);
    }
SWIGINTERN void std_vector_Sl_long_Sg____delslice__(std::vector< long > *self,std::vector< long >::difference_type i,std::vector< long >::difference_type j){
      swig::delslice(self, i, j);
    }
SWIGINTERN void std_vector_Sl_long_Sg____delitem____SWIG_0(std::vector< long > *self,std::vector< long >::difference_type i){
      self->erase(swig::getpos(self,i));
    }
SWIGINTERN std::vector< long,std::allocator< long > > *std_vector_Sl_long_Sg____getitem____SWIG_0(std::vector< long > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return NULL;
      }
      PySlice_GetIndices(slice, self->size(), &i, &j, &step);
      return swig::getslice(self, i, j);
    }
SWIGINTERN void std_vector_Sl_long_Sg____setitem____SWIG_0(std::vector< long > *self,PySliceObject *slice,std::vector< long,std::allocator< long > > const &v){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(slice, self->size(), &i, &j, &step);
      swig::setslice(self, i, j, v);
    }
SWIGINTERN void std_vector_Sl_long_Sg____delitem____SWIG_1(std::vector< long > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(slice, self->size(), &i, &j, &step);
      swig::delslice(self, i,j);
    }
SWIGINTERN std::vector< long >::value_type const &std_vector_Sl_long_Sg____getitem____SWIG_1(std::vector< long > const *self,std::vector< long >::difference_type i){
      return *(swig::cgetpos(self, i));
    }
SWIGINTERN void std_vector_Sl_long_Sg____setitem____SWIG_1(std::vector< long > *self,std::vector< long >::difference_type i,std::vector< long >::value_type const &x){
      *(swig::getpos(self,i)) = x;
    }
SWIGINTERN void std_vector_Sl_long_Sg__append(std::vector< long > *self,std::vector< long >::value_type const &x){
      self->push_back(x);
    }

  #define SWIG_From_double   PyFloat_FromDouble 


namespace swig {
  template <> struct traits<double > {
    typedef value_category category;
    static const char* type_name() { return"double"; }
  };  
  template <>  struct traits_asval<double > {   
    typedef double value_type;
    static int asval(PyObject *obj, value_type *val) { 
      return SWIG_AsVal_double (obj, val);
    }
  };
  template <>  struct traits_from<double > {
    typedef double value_type;
    static PyObject *from(const value_type& val) {
      return SWIG_From_double  (val);
    }
  };
}


      namespace swig {
	template <>  struct traits<std::vector<double, std::allocator< double > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::vector<" "double" "," "std::allocator< double >" " >";
	  }
	};
      }
    
SWIGINTERN swig::SwigPyIterator *std_vector_Sl_double_Sg__iterator(std::vector< double > *self,PyObject **PYTHON_SELF){
      return swig::make_output_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
    }
SWIGINTERN bool std_vector_Sl_double_Sg____nonzero__(std::vector< double > const *self){
      return !(self->empty());
    }
SWIGINTERN bool std_vector_Sl_double_Sg____bool__(std::vector< double > const *self){
      return !(self->empty());
    }
SWIGINTERN std::vector< double >::size_type std_vector_Sl_double_Sg____len__(std::vector< double > const *self){
      return self->size();
    }
SWIGINTERN std::vector< double >::value_type std_vector_Sl_double_Sg__pop(std::vector< double > *self){
      if (self->size() == 0)
	throw std::out_of_range("pop from empty container");
      std::vector<double,std::allocator< double > >::value_type x = self->back();
      self->pop_back();
      return x;
    }
SWIGINTERN std::vector< double,std::allocator< double > > *std_vector_Sl_double_Sg____getslice__(std::vector< double > *self,std::vector< double >::difference_type i,std::vector< double >::difference_type j){
      return swig::getslice(self, i, j);
    }
SWIGINTERN void std_vector_Sl_double_Sg____setslice__(std::vector< double > *self,std::vector< double >::difference_type i,std::vector< double >::difference_type j,std::vector< double,std::allocator< double > > const &v){
      swig::setslice(self, i, j, v);
    }
SWIGINTERN void std_vector_Sl_double_Sg____delslice__(std::vector< double > *self,std::vector< double >::difference_type i,std::vector< double >::difference_type j){
      swig::delslice(self, i, j);
    }
SWIGINTERN void std_vector_Sl_double_Sg____delitem____SWIG_0(std::vector< double > *self,std::vector< double >::difference_type i){
      self->erase(swig::getpos(self,i));
    }
SWIGINTERN std::vector< double,std::allocator< double > > *std_vector_Sl_double_Sg____getitem____SWIG_0(std::vector< double > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return NULL;
      }
      PySlice_GetIndices(slice, self->size(), &i, &j, &step);
      return swig::getslice(self, i, j);
    }
SWIGINTERN void std_vector_Sl_double_Sg____setitem____SWIG_0(std::vector< double > *self,PySliceObject *slice,std::vector< double,std::allocator< double > > const &v){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(slice, self->size(), &i, &j, &step);
      swig::setslice(self, i, j, v);
    }
SWIGINTERN void std_vector_Sl_double_Sg____delitem____SWIG_1(std::vector< double > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(slice, self->size(), &i, &j, &step);
      swig::delslice(self, i,j);
    }
SWIGINTERN std::vector< double >::value_type const &std_vector_Sl_double_Sg____getitem____SWIG_1(std::vector< double > const *self,std::vector< double >::difference_type i){
      return *(swig::cgetpos(self, i));
    }
SWIGINTERN void std_vector_Sl_double_Sg____setitem____SWIG_1(std::vector< double > *self,std::vector< double >::difference_type i,std::vector< double >::value_type const &x){
      *(swig::getpos(self,i)) = x;
    }
SWIGINTERN void std_vector_Sl_double_Sg__append(std::vector< double > *self,std::vector< double >::value_type const &x){
      self->push_back(x);
    }

SWIGINTERN int
SWIG_AsPtr_std_string (PyObject * obj, std::string **val) 
{
  char* buf = 0 ; size_t size = 0; int alloc = SWIG_OLDOBJ;
  if (SWIG_IsOK((SWIG_AsCharPtrAndSize(obj, &buf, &size, &alloc)))) {
    if (buf) {
      if (val) *val = new std::string(buf, size - 1);
      if (alloc == SWIG_NEWOBJ) delete[] buf;
      return SWIG_NEWOBJ;
    } else {
      if (val) *val = 0;
      return SWIG_OLDOBJ;
    }
  } else {
    static int init = 0;
    static swig_type_info* descriptor = 0;
    if (!init) {
      descriptor = SWIG_TypeQuery("std::string" " *");
      init = 1;
    }
    if (descriptor) {
      std::string *vptr;
      int res = SWIG_ConvertPtr(obj, (void**)&vptr, descriptor, 0);
      if (SWIG_IsOK(res) && val) *val = vptr;
      return res;
    }
  }
  return SWIG_ERROR;
}


SWIGINTERN int
SWIG_AsVal_std_string (PyObject * obj, std::string *val)
{
  std::string* v = (std::string *) 0;
  int res = SWIG_AsPtr_std_string (obj, &v);
  if (!SWIG_IsOK(res)) return res;
  if (v) {
    if (val) *val = *v;
    if (SWIG_IsNewObj(res)) {
      delete v;
      res = SWIG_DelNewMask(res);
    }
    return res;
  }
  return SWIG_ERROR;
}


SWIGINTERNINLINE PyObject *
SWIG_From_std_string  (const std::string& s)
{
  if (s.size()) {
    return SWIG_FromCharPtrAndSize(s.data(), s.size());
  } else {
    return SWIG_FromCharPtrAndSize(s.c_str(), 0);
  }
}


namespace swig {
  template <> struct traits<std::string > {
    typedef value_category category;
    static const char* type_name() { return"std::string"; }
  };  
  template <>  struct traits_asval<std::string > {   
    typedef std::string value_type;
    static int asval(PyObject *obj, value_type *val) { 
      return SWIG_AsVal_std_string (obj, val);
    }
  };
  template <>  struct traits_from<std::string > {
    typedef std::string value_type;
    static PyObject *from(const value_type& val) {
      return SWIG_From_std_string  (val);
    }
  };
}


      namespace swig {
	template <>  struct traits<std::vector<std::string, std::allocator< std::string > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::vector<" "std::string" "," "std::allocator< std::string >" " >";
	  }
	};
      }
    
SWIGINTERN swig::SwigPyIterator *std_vector_Sl_std_string_Sg__iterator(std::vector< std::string > *self,PyObject **PYTHON_SELF){
      return swig::make_output_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
    }
SWIGINTERN bool std_vector_Sl_std_string_Sg____nonzero__(std::vector< std::string > const *self){
      return !(self->empty());
    }
SWIGINTERN bool std_vector_Sl_std_string_Sg____bool__(std::vector< std::string > const *self){
      return !(self->empty());
    }
SWIGINTERN std::vector< std::string >::size_type std_vector_Sl_std_string_Sg____len__(std::vector< std::string > const *self){
      return self->size();
    }
SWIGINTERN std::vector< std::string >::value_type std_vector_Sl_std_string_Sg__pop(std::vector< std::string > *self){
      if (self->size() == 0)
	throw std::out_of_range("pop from empty container");
      std::vector<std::string,std::allocator< std::string > >::value_type x = self->back();
      self->pop_back();
      return x;
    }
SWIGINTERN std::vector< std::string,std::allocator< std::string > > *std_vector_Sl_std_string_Sg____getslice__(std::vector< std::string > *self,std::vector< std::string >::difference_type i,std::vector< std::string >::difference_type j){
      return swig::getslice(self, i, j);
    }
SWIGINTERN void std_vector_Sl_std_string_Sg____setslice__(std::vector< std::string > *self,std::vector< std::string >::difference_type i,std::vector< std::string >::difference_type j,std::vector< std::string,std::allocator< std::string > > const &v){
      swig::setslice(self, i, j, v);
    }
SWIGINTERN void std_vector_Sl_std_string_Sg____delslice__(std::vector< std::string > *self,std::vector< std::string >::difference_type i,std::vector< std::string >::difference_type j){
      swig::delslice(self, i, j);
    }
SWIGINTERN void std_vector_Sl_std_string_Sg____delitem____SWIG_0(std::vector< std::string > *self,std::vector< std::string >::difference_type i){
      self->erase(swig::getpos(self,i));
    }
SWIGINTERN std::vector< std::string,std::allocator< std::string > > *std_vector_Sl_std_string_Sg____getitem____SWIG_0(std::vector< std::string > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return NULL;
      }
      PySlice_GetIndices(slice, self->size(), &i, &j, &step);
      return swig::getslice(self, i, j);
    }
SWIGINTERN void std_vector_Sl_std_string_Sg____setitem____SWIG_0(std::vector< std::string > *self,PySliceObject *slice,std::vector< std::string,std::allocator< std::string > > const &v){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(slice, self->size(), &i, &j, &step);
      swig::setslice(self, i, j, v);
    }
SWIGINTERN void std_vector_Sl_std_string_Sg____delitem____SWIG_1(std::vector< std::string > *self,PySliceObject *slice){
      Py_ssize_t i, j, step;
      if( !PySlice_Check(slice) ) {
        SWIG_Error(SWIG_TypeError, "Slice object expected.");
        return;
      }
      PySlice_GetIndices(slice, self->size(), &i, &j, &step);
      swig::delslice(self, i,j);
    }
SWIGINTERN std::vector< std::string >::value_type const &std_vector_Sl_std_string_Sg____getitem____SWIG_1(std::vector< std::string > const *self,std::vector< std::string >::difference_type i){
      return *(swig::cgetpos(self, i));
    }
SWIGINTERN void std_vector_Sl_std_string_Sg____setitem____SWIG_1(std::vector< std::string > *self,std::vector< std::string >::difference_type i,std::vector< std::string >::value_type const &x){
      *(swig::getpos(self,i)) = x;
    }
SWIGINTERN void std_vector_Sl_std_string_Sg__append(std::vector< std::string > *self,std::vector< std::string >::value_type const &x){
      self->push_back(x);
    }

  namespace swig {

















































    template <class T, class U >
    struct traits_asptr<std::pair<T,U> >  {
      typedef std::pair<T,U> value_type;

      static int get_pair(PyObject* first, PyObject* second,
			  std::pair<T,U> **val) 
      {
	if (val) {
	  value_type *vp = (new std::pair<T,U>);
	  T *pfirst = &(vp->first);
	  int res1 = swig::asval((PyObject*)first, pfirst);
	  if (!SWIG_IsOK(res1)) return res1;
	  U *psecond = &(vp->second);
	  int res2 = swig::asval((PyObject*)second, psecond);
	  if (!SWIG_IsOK(res2)) return res2;
	  *val = vp;
	  return SWIG_AddNewMask(res1 > res2 ? res1 : res2);
	} else {
	  T *pfirst = 0;
	  int res1 = swig::asval((PyObject*)first, pfirst);
	  if (!SWIG_IsOK(res1)) return res1;
	  U *psecond = 0;
	  int res2 = swig::asval((PyObject*)second, psecond);
	  if (!SWIG_IsOK(res2)) return res2;
	  return res1 > res2 ? res1 : res2;
	}	
      }

      static int asptr(PyObject *obj, std::pair<T,U> **val) {
	int res = SWIG_ERROR;
	if (PyTuple_Check(obj)) {
	  if (PyTuple_GET_SIZE(obj) == 2) {
	    res = get_pair(PyTuple_GET_ITEM(obj,0),PyTuple_GET_ITEM(obj,1), val);
	  }
	} else if (PySequence_Check(obj)) {
	  if (PySequence_Size(obj) == 2) {
	    swig::SwigVar_PyObject first = PySequence_GetItem(obj,0);
	    swig::SwigVar_PyObject second = PySequence_GetItem(obj,1);
	    res = get_pair(first, second, val);
	  }
	} else {
	  value_type *p;
	  res = SWIG_ConvertPtr(obj,(void**)&p,swig::type_info<value_type>(),0);
	  if (SWIG_IsOK(res) && val)  *val = p;
	}
	return res;
      }
    };


    template <class T, class U >
    struct traits_from<std::pair<T,U> >   {
      static PyObject *from(const std::pair<T,U>& val) {
	PyObject* obj = PyTuple_New(2);
	PyTuple_SetItem(obj,0,swig::from(val.first));
	PyTuple_SetItem(obj,1,swig::from(val.second));
	return obj;
      }
    };
  }


      namespace swig {
	template <>  struct traits<std::pair<std::string,std::string > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::pair<" "std::string" "," "std::string" " >";
	  }
	};
      }
    

  namespace swig {
    template <class SwigPySeq, class K, class T >
    inline void
    assign(const SwigPySeq& swigpyseq, std::map<K,T > *map) {
      typedef typename std::map<K,T>::value_type value_type;
      typename SwigPySeq::const_iterator it = swigpyseq.begin();
      for (;it != swigpyseq.end(); ++it) {
	map->insert(value_type(it->first, it->second));
      }
    }

    template <class K, class T>
    struct traits_asptr<std::map<K,T> >  {
      typedef std::map<K,T> map_type;
      static int asptr(PyObject *obj, map_type **val) {
	int res = SWIG_ERROR;
	SWIG_PYTHON_THREAD_BEGIN_BLOCK;
	if (PyDict_Check(obj)) {
	  SwigVar_PyObject items = PyObject_CallMethod(obj,(char *)"items",NULL);
#if PY_VERSION_HEX >= 0x03000000
          /* In Python 3.x the ".items()" method returns a dict_items object */
          items = PySequence_Fast(items, ".items() didn't return a sequence!");
#endif
	  res = traits_asptr_stdseq<std::map<K,T>, std::pair<K, T> >::asptr(items, val);
	} else {
	  map_type *p;
	  res = SWIG_ConvertPtr(obj,(void**)&p,swig::type_info<map_type>(),0);
	  if (SWIG_IsOK(res) && val)  *val = p;
	}
	SWIG_PYTHON_THREAD_END_BLOCK;
	return res;
      }      
    };
      
    template <class K, class T >
    struct traits_from<std::map<K,T> >  {
      typedef std::map<K,T> map_type;
      typedef typename map_type::const_iterator const_iterator;
      typedef typename map_type::size_type size_type;
            
      static PyObject *from(const map_type& map) {
	swig_type_info *desc = swig::type_info<map_type>();
	if (desc && desc->clientdata) {
	  return SWIG_NewPointerObj(new map_type(map), desc, SWIG_POINTER_OWN);
	} else {
	  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
	  size_type size = map.size();
	  int pysize = (size <= (size_type) INT_MAX) ? (int) size : -1;
	  if (pysize < 0) {
	    PyErr_SetString(PyExc_OverflowError,
			    "map size not valid in python");
	    SWIG_PYTHON_THREAD_END_BLOCK;
	    return NULL;
	  }
	  PyObject *obj = PyDict_New();
	  for (const_iterator i= map.begin(); i!= map.end(); ++i) {
	    swig::SwigVar_PyObject key = swig::from(i->first);
	    swig::SwigVar_PyObject val = swig::from(i->second);
	    PyDict_SetItem(obj, key, val);
	  }
	  SWIG_PYTHON_THREAD_END_BLOCK;
	  return obj;
	}
      }
    };

    template <class ValueType>
    struct from_key_oper 
    {
      typedef const ValueType& argument_type;
      typedef  PyObject *result_type;
      result_type operator()(argument_type v) const
      {
	return swig::from(v.first);
      }
    };

    template <class ValueType>
    struct from_value_oper 
    {
      typedef const ValueType& argument_type;
      typedef  PyObject *result_type;
      result_type operator()(argument_type v) const
      {
	return swig::from(v.second);
      }
    };

    template<class OutIterator, class FromOper, class ValueType = typename OutIterator::value_type>
    struct SwigPyMapIterator_T : SwigPyIteratorClosed_T<OutIterator, ValueType, FromOper>
    {
      SwigPyMapIterator_T(OutIterator curr, OutIterator first, OutIterator last, PyObject *seq)
	: SwigPyIteratorClosed_T<OutIterator,ValueType,FromOper>(curr, first, last, seq)
      {
      }
    };


    template<class OutIterator,
	     class FromOper = from_key_oper<typename OutIterator::value_type> >
    struct SwigPyMapKeyIterator_T : SwigPyMapIterator_T<OutIterator, FromOper>
    {
      SwigPyMapKeyIterator_T(OutIterator curr, OutIterator first, OutIterator last, PyObject *seq)
	: SwigPyMapIterator_T<OutIterator, FromOper>(curr, first, last, seq)
      {
      }
    };

    template<typename OutIter>
    inline SwigPyIterator*
    make_output_key_iterator(const OutIter& current, const OutIter& begin, const OutIter& end, PyObject *seq = 0)
    {
      return new SwigPyMapKeyIterator_T<OutIter>(current, begin, end, seq);
    }

    template<class OutIterator,
	     class FromOper = from_value_oper<typename OutIterator::value_type> >
    struct SwigPyMapValueITerator_T : SwigPyMapIterator_T<OutIterator, FromOper>
    {
      SwigPyMapValueITerator_T(OutIterator curr, OutIterator first, OutIterator last, PyObject *seq)
	: SwigPyMapIterator_T<OutIterator, FromOper>(curr, first, last, seq)
      {
      }
    };
    

    template<typename OutIter>
    inline SwigPyIterator*
    make_output_value_iterator(const OutIter& current, const OutIter& begin, const OutIter& end, PyObject *seq = 0)
    {
      return new SwigPyMapValueITerator_T<OutIter>(current, begin, end, seq);
    }
  }


      namespace swig {
	template <>  struct traits<std::map<std::string, std::string, std::less< std::string >, std::allocator< std::pair< std::string const,std::string > > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::map<" "std::string" "," "std::string" "," "std::less< std::string >" "," "std::allocator< std::pair< std::string const,std::string > >" " >";
	  }
	};
      }
    
SWIGINTERN swig::SwigPyIterator *std_map_Sl_std_string_Sc_std_string_Sg__iterator(std::map< std::string,std::string > *self,PyObject **PYTHON_SELF){
      return swig::make_output_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
    }
SWIGINTERN bool std_map_Sl_std_string_Sc_std_string_Sg____nonzero__(std::map< std::string,std::string > const *self){
      return !(self->empty());
    }
SWIGINTERN bool std_map_Sl_std_string_Sc_std_string_Sg____bool__(std::map< std::string,std::string > const *self){
      return !(self->empty());
    }
SWIGINTERN std::map< std::string,std::string >::size_type std_map_Sl_std_string_Sc_std_string_Sg____len__(std::map< std::string,std::string > const *self){
      return self->size();
    }
SWIGINTERN std::map< std::string,std::string >::mapped_type std_map_Sl_std_string_Sc_std_string_Sg____getitem__(std::map< std::string,std::string > const *self,std::map< std::string,std::string >::key_type const &key){
      std::map<std::string,std::string,std::less< std::string >,std::allocator< std::pair< std::string const,std::string > > >::const_iterator i = self->find(key);
      if (i != self->end())
	return i->second;
      else
	throw std::out_of_range("key not found");
    }
SWIGINTERN void std_map_Sl_std_string_Sc_std_string_Sg____delitem__(std::map< std::string,std::string > *self,std::map< std::string,std::string >::key_type const &key){
      std::map<std::string,std::string,std::less< std::string >,std::allocator< std::pair< std::string const,std::string > > >::iterator i = self->find(key);
      if (i != self->end())
	self->erase(i);
      else
	throw std::out_of_range("key not found");
    }
SWIGINTERN bool std_map_Sl_std_string_Sc_std_string_Sg__has_key(std::map< std::string,std::string > const *self,std::map< std::string,std::string >::key_type const &key){
      std::map<std::string,std::string,std::less< std::string >,std::allocator< std::pair< std::string const,std::string > > >::const_iterator i = self->find(key);
      return i != self->end();
    }
SWIGINTERN PyObject *std_map_Sl_std_string_Sc_std_string_Sg__keys(std::map< std::string,std::string > *self){
      std::map<std::string,std::string,std::less< std::string >,std::allocator< std::pair< std::string const,std::string > > >::size_type size = self->size();
      int pysize = (size <= (std::map<std::string,std::string,std::less< std::string >,std::allocator< std::pair< std::string const,std::string > > >::size_type) INT_MAX) ? (int) size : -1;
      SWIG_PYTHON_THREAD_BEGIN_BLOCK;
      if (pysize < 0) {
	PyErr_SetString(PyExc_OverflowError,
			"map size not valid in python");
	SWIG_PYTHON_THREAD_END_BLOCK;
	return NULL;
      }
      PyObject* keyList = PyList_New(pysize);
      std::map<std::string,std::string,std::less< std::string >,std::allocator< std::pair< std::string const,std::string > > >::const_iterator i = self->begin();
      for (int j = 0; j < pysize; ++i, ++j) {
	PyList_SET_ITEM(keyList, j, swig::from(i->first));
      }
      SWIG_PYTHON_THREAD_END_BLOCK;
      return keyList;
    }
SWIGINTERN PyObject *std_map_Sl_std_string_Sc_std_string_Sg__values(std::map< std::string,std::string > *self){
      std::map<std::string,std::string,std::less< std::string >,std::allocator< std::pair< std::string const,std::string > > >::size_type size = self->size();
      int pysize = (size <= (std::map<std::string,std::string,std::less< std::string >,std::allocator< std::pair< std::string const,std::string > > >::size_type) INT_MAX) ? (int) size : -1;
      SWIG_PYTHON_THREAD_BEGIN_BLOCK;
      if (pysize < 0) {
	PyErr_SetString(PyExc_OverflowError,
			"map size not valid in python");
	SWIG_PYTHON_THREAD_END_BLOCK;
	return NULL;
      }
      PyObject* valList = PyList_New(pysize);
      std::map<std::string,std::string,std::less< std::string >,std::allocator< std::pair< std::string const,std::string > > >::const_iterator i = self->begin();
      for (int j = 0; j < pysize; ++i, ++j) {
	PyList_SET_ITEM(valList, j, swig::from(i->second));
      }
      SWIG_PYTHON_THREAD_END_BLOCK;
      return valList;
    }
SWIGINTERN PyObject *std_map_Sl_std_string_Sc_std_string_Sg__items(std::map< std::string,std::string > *self){
      std::map<std::string,std::string,std::less< std::string >,std::allocator< std::pair< std::string const,std::string > > >::size_type size = self->size();
      int pysize = (size <= (std::map<std::string,std::string,std::less< std::string >,std::allocator< std::pair< std::string const,std::string > > >::size_type) INT_MAX) ? (int) size : -1;
      SWIG_PYTHON_THREAD_BEGIN_BLOCK;
      if (pysize < 0) {
	PyErr_SetString(PyExc_OverflowError,
			"map size not valid in python");
	SWIG_PYTHON_THREAD_END_BLOCK;
	return NULL;
      }    
      PyObject* itemList = PyList_New(pysize);
      std::map<std::string,std::string,std::less< std::string >,std::allocator< std::pair< std::string const,std::string > > >::const_iterator i = self->begin();
      for (int j = 0; j < pysize; ++i, ++j) {
	PyList_SET_ITEM(itemList, j, swig::from(*i));
      }
      SWIG_PYTHON_THREAD_END_BLOCK;
      return itemList;
    }
SWIGINTERN bool std_map_Sl_std_string_Sc_std_string_Sg____contains__(std::map< std::string,std::string > *self,std::map< std::string,std::string >::key_type const &key){
      return self->find(key) != self->end();
    }
SWIGINTERN swig::SwigPyIterator *std_map_Sl_std_string_Sc_std_string_Sg__key_iterator(std::map< std::string,std::string > *self,PyObject **PYTHON_SELF){
      return swig::make_output_key_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
    }
SWIGINTERN swig::SwigPyIterator *std_map_Sl_std_string_Sc_std_string_Sg__value_iterator(std::map< std::string,std::string > *self,PyObject **PYTHON_SELF){
      return swig::make_output_value_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
    }
SWIGINTERN void std_map_Sl_std_string_Sc_std_string_Sg____setitem__(std::map< std::string,std::string > *self,std::map< std::string,std::string >::key_type const &key,std::map< std::string,std::string >::mapped_type const &x){
      (*self)[key] = x;
    }

SWIGINTERNINLINE PyObject *
SWIG_From_int  (int value)
{    
  return SWIG_From_long  (value);
}


SWIGINTERNINLINE PyObject * 
SWIG_FromCharPtr(const char *cptr)
{ 
  return SWIG_FromCharPtrAndSize(cptr, (cptr ? strlen(cptr) : 0));
}


SWIGINTERN int
SWIG_AsVal_int (PyObject * obj, int *val)
{
  long v;
  int res = SWIG_AsVal_long (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v < INT_MIN || v > INT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< int >(v);
    }
  }  
  return res;
}




SWIGINTERN std::string CMMError___getitem__(CMMError *self,int n){
	return self->getFullMsg();
  }
SWIGINTERN std::string CMMError___str__(CMMError *self){
    return self->getFullMsg();
  }

SWIGINTERN int
SWIG_AsVal_bool (PyObject *obj, bool *val)
{
  int r = PyObject_IsTrue(obj);
  if (r == -1)
    return SWIG_ERROR;
  if (val) *val = r ? true : false;
  return SWIG_OK;
}


SWIGINTERN int
SWIG_AsVal_float (PyObject * obj, float *val)
{
  double v;
  int res = SWIG_AsVal_double (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v < -FLT_MAX || v > FLT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< float >(v);
    }
  }  
  return res;
}


SWIGINTERN int
SWIG_AsVal_unsigned_SS_int (PyObject * obj, unsigned int *val)
{
  unsigned long v;
  int res = SWIG_AsVal_unsigned_SS_long (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v > UINT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< unsigned int >(v);
    }
  }  
  return res;
}


SWIGINTERNINLINE PyObject *
SWIG_From_unsigned_SS_int  (unsigned int value)
{    
  return SWIG_From_unsigned_SS_long  (value);
}


SWIGINTERN int
SWIG_AsVal_unsigned_SS_char (PyObject * obj, unsigned char *val)
{
  unsigned long v;
  int res = SWIG_AsVal_unsigned_SS_long (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v > UCHAR_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< unsigned char >(v);
    }
  }  
  return res;
}

SWIGINTERN PyObject *CMMCore_setSLMImage_pywrap(CMMCore *self,char const *slmLabel,char *pixels,int receivedLength){
   long expectedLength = self->getSLMWidth(slmLabel) * self->getSLMHeight(slmLabel);
   //printf("expected: %d -- received: %d\n",expectedLength,receivedLength);

   if (receivedLength == expectedLength)
   {
      self->setSLMImage(slmLabel, (unsigned char *)pixels);
   }
   else if (receivedLength == 4*expectedLength)
   {
      self->setSLMImage(slmLabel, (imgRGB32)pixels);
   }
   else
   {
      PyErr_SetString(PyExc_TypeError, "Image dimensions are wrong for this SLM.");
      return (PyObject *) NULL;
   }
   return PyInt_FromLong(0);
}
SWIGINTERN std::string MetadataKeyError___getitem__(MetadataKeyError *self,int n){
	return self->getMsg();
  }
SWIGINTERN std::string MetadataKeyError___str__(MetadataKeyError *self){
    return self->getMsg();
  }
SWIGINTERN std::string MetadataIndexError___getitem__(MetadataIndexError *self,int n){
	return self->getMsg();
  }
SWIGINTERN std::string MetadataIndexError___str__(MetadataIndexError *self){
    return self->getMsg();
  }


/* ---------------------------------------------------
 * C++ director class methods
 * --------------------------------------------------- */

#include "MMCorePy_wrap.h"

SwigDirector_MMEventCallback::SwigDirector_MMEventCallback(PyObject *self): MMEventCallback(), Swig::Director(self) {
  SWIG_DIRECTOR_RGTR((MMEventCallback *)this, this); 
}




SwigDirector_MMEventCallback::~SwigDirector_MMEventCallback() {
}

void SwigDirector_MMEventCallback::onPropertiesChanged() {
  if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call MMEventCallback.__init__.");
  }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
  const size_t swig_method_index = 0;
  const char * const swig_method_name = "onPropertiesChanged";
  PyObject* method = swig_get_method(swig_method_index, swig_method_name);
  swig::SwigVar_PyObject result = PyObject_CallFunction(method, NULL, NULL);
#else
  swig::SwigVar_PyObject result = PyObject_CallMethod(swig_get_self(), (char *) "onPropertiesChanged", NULL);
#endif
  if (result == NULL) {
    PyObject *error = PyErr_Occurred();
    if (error != NULL) {
      Swig::DirectorMethodException::raise("Error detected when calling 'MMEventCallback.onPropertiesChanged'");
    }
  }
}


void SwigDirector_MMEventCallback::onPropertyChanged(char const *name, char const *propName, char const *propValue) {
  swig::SwigVar_PyObject obj0;
  obj0 = SWIG_FromCharPtr((const char *)name);
  swig::SwigVar_PyObject obj1;
  obj1 = SWIG_FromCharPtr((const char *)propName);
  swig::SwigVar_PyObject obj2;
  obj2 = SWIG_FromCharPtr((const char *)propValue);
  if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call MMEventCallback.__init__.");
  }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
  const size_t swig_method_index = 1;
  const char * const swig_method_name = "onPropertyChanged";
  PyObject* method = swig_get_method(swig_method_index, swig_method_name);
  swig::SwigVar_PyObject result = PyObject_CallFunction(method, (char *)"(OOO)" ,(PyObject *)obj0,(PyObject *)obj1,(PyObject *)obj2);
#else
  swig::SwigVar_PyObject result = PyObject_CallMethod(swig_get_self(), (char *)"onPropertyChanged", (char *)"(OOO)" ,(PyObject *)obj0,(PyObject *)obj1,(PyObject *)obj2);
#endif
  if (result == NULL) {
    PyObject *error = PyErr_Occurred();
    if (error != NULL) {
      Swig::DirectorMethodException::raise("Error detected when calling 'MMEventCallback.onPropertyChanged'");
    }
  }
}


void SwigDirector_MMEventCallback::onChannelGroupChanged(char const *newChannelGroupName) {
  swig::SwigVar_PyObject obj0;
  obj0 = SWIG_FromCharPtr((const char *)newChannelGroupName);
  if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call MMEventCallback.__init__.");
  }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
  const size_t swig_method_index = 2;
  const char * const swig_method_name = "onChannelGroupChanged";
  PyObject* method = swig_get_method(swig_method_index, swig_method_name);
  swig::SwigVar_PyObject result = PyObject_CallFunction(method, (char *)"(O)" ,(PyObject *)obj0);
#else
  swig::SwigVar_PyObject result = PyObject_CallMethod(swig_get_self(), (char *)"onChannelGroupChanged", (char *)"(O)" ,(PyObject *)obj0);
#endif
  if (result == NULL) {
    PyObject *error = PyErr_Occurred();
    if (error != NULL) {
      Swig::DirectorMethodException::raise("Error detected when calling 'MMEventCallback.onChannelGroupChanged'");
    }
  }
}


void SwigDirector_MMEventCallback::onConfigGroupChanged(char const *groupName, char const *newConfigName) {
  swig::SwigVar_PyObject obj0;
  obj0 = SWIG_FromCharPtr((const char *)groupName);
  swig::SwigVar_PyObject obj1;
  obj1 = SWIG_FromCharPtr((const char *)newConfigName);
  if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call MMEventCallback.__init__.");
  }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
  const size_t swig_method_index = 3;
  const char * const swig_method_name = "onConfigGroupChanged";
  PyObject* method = swig_get_method(swig_method_index, swig_method_name);
  swig::SwigVar_PyObject result = PyObject_CallFunction(method, (char *)"(OO)" ,(PyObject *)obj0,(PyObject *)obj1);
#else
  swig::SwigVar_PyObject result = PyObject_CallMethod(swig_get_self(), (char *)"onConfigGroupChanged", (char *)"(OO)" ,(PyObject *)obj0,(PyObject *)obj1);
#endif
  if (result == NULL) {
    PyObject *error = PyErr_Occurred();
    if (error != NULL) {
      Swig::DirectorMethodException::raise("Error detected when calling 'MMEventCallback.onConfigGroupChanged'");
    }
  }
}


void SwigDirector_MMEventCallback::onSystemConfigurationLoaded() {
  if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call MMEventCallback.__init__.");
  }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
  const size_t swig_method_index = 4;
  const char * const swig_method_name = "onSystemConfigurationLoaded";
  PyObject* method = swig_get_method(swig_method_index, swig_method_name);
  swig::SwigVar_PyObject result = PyObject_CallFunction(method, NULL, NULL);
#else
  swig::SwigVar_PyObject result = PyObject_CallMethod(swig_get_self(), (char *) "onSystemConfigurationLoaded", NULL);
#endif
  if (result == NULL) {
    PyObject *error = PyErr_Occurred();
    if (error != NULL) {
      Swig::DirectorMethodException::raise("Error detected when calling 'MMEventCallback.onSystemConfigurationLoaded'");
    }
  }
}


void SwigDirector_MMEventCallback::onPixelSizeChanged(double newPixelSizeUm) {
  swig::SwigVar_PyObject obj0;
  obj0 = SWIG_From_double(static_cast< double >(newPixelSizeUm));
  if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call MMEventCallback.__init__.");
  }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
  const size_t swig_method_index = 5;
  const char * const swig_method_name = "onPixelSizeChanged";
  PyObject* method = swig_get_method(swig_method_index, swig_method_name);
  swig::SwigVar_PyObject result = PyObject_CallFunction(method, (char *)"(O)" ,(PyObject *)obj0);
#else
  swig::SwigVar_PyObject result = PyObject_CallMethod(swig_get_self(), (char *)"onPixelSizeChanged", (char *)"(O)" ,(PyObject *)obj0);
#endif
  if (result == NULL) {
    PyObject *error = PyErr_Occurred();
    if (error != NULL) {
      Swig::DirectorMethodException::raise("Error detected when calling 'MMEventCallback.onPixelSizeChanged'");
    }
  }
}


void SwigDirector_MMEventCallback::onPixelSizeAffineChanged(double v0, double v1, double v2, double v3, double v4, double v5) {
  swig::SwigVar_PyObject obj0;
  obj0 = SWIG_From_double(static_cast< double >(v0));
  swig::SwigVar_PyObject obj1;
  obj1 = SWIG_From_double(static_cast< double >(v1));
  swig::SwigVar_PyObject obj2;
  obj2 = SWIG_From_double(static_cast< double >(v2));
  swig::SwigVar_PyObject obj3;
  obj3 = SWIG_From_double(static_cast< double >(v3));
  swig::SwigVar_PyObject obj4;
  obj4 = SWIG_From_double(static_cast< double >(v4));
  swig::SwigVar_PyObject obj5;
  obj5 = SWIG_From_double(static_cast< double >(v5));
  if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call MMEventCallback.__init__.");
  }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
  const size_t swig_method_index = 6;
  const char * const swig_method_name = "onPixelSizeAffineChanged";
  PyObject* method = swig_get_method(swig_method_index, swig_method_name);
  swig::SwigVar_PyObject result = PyObject_CallFunction(method, (char *)"(OOOOOO)" ,(PyObject *)obj0,(PyObject *)obj1,(PyObject *)obj2,(PyObject *)obj3,(PyObject *)obj4,(PyObject *)obj5);
#else
  swig::SwigVar_PyObject result = PyObject_CallMethod(swig_get_self(), (char *)"onPixelSizeAffineChanged", (char *)"(OOOOOO)" ,(PyObject *)obj0,(PyObject *)obj1,(PyObject *)obj2,(PyObject *)obj3,(PyObject *)obj4,(PyObject *)obj5);
#endif
  if (result == NULL) {
    PyObject *error = PyErr_Occurred();
    if (error != NULL) {
      Swig::DirectorMethodException::raise("Error detected when calling 'MMEventCallback.onPixelSizeAffineChanged'");
    }
  }
}


void SwigDirector_MMEventCallback::onStagePositionChanged(char *name, double pos) {
  swig::SwigVar_PyObject obj0;
  obj0 = SWIG_FromCharPtr((const char *)name);
  swig::SwigVar_PyObject obj1;
  obj1 = SWIG_From_double(static_cast< double >(pos));
  if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call MMEventCallback.__init__.");
  }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
  const size_t swig_method_index = 7;
  const char * const swig_method_name = "onStagePositionChanged";
  PyObject* method = swig_get_method(swig_method_index, swig_method_name);
  swig::SwigVar_PyObject result = PyObject_CallFunction(method, (char *)"(OO)" ,(PyObject *)obj0,(PyObject *)obj1);
#else
  swig::SwigVar_PyObject result = PyObject_CallMethod(swig_get_self(), (char *)"onStagePositionChanged", (char *)"(OO)" ,(PyObject *)obj0,(PyObject *)obj1);
#endif
  if (result == NULL) {
    PyObject *error = PyErr_Occurred();
    if (error != NULL) {
      Swig::DirectorMethodException::raise("Error detected when calling 'MMEventCallback.onStagePositionChanged'");
    }
  }
}


void SwigDirector_MMEventCallback::onXYStagePositionChanged(char *name, double xpos, double ypos) {
  swig::SwigVar_PyObject obj0;
  obj0 = SWIG_FromCharPtr((const char *)name);
  swig::SwigVar_PyObject obj1;
  obj1 = SWIG_From_double(static_cast< double >(xpos));
  swig::SwigVar_PyObject obj2;
  obj2 = SWIG_From_double(static_cast< double >(ypos));
  if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call MMEventCallback.__init__.");
  }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
  const size_t swig_method_index = 8;
  const char * const swig_method_name = "onXYStagePositionChanged";
  PyObject* method = swig_get_method(swig_method_index, swig_method_name);
  swig::SwigVar_PyObject result = PyObject_CallFunction(method, (char *)"(OOO)" ,(PyObject *)obj0,(PyObject *)obj1,(PyObject *)obj2);
#else
  swig::SwigVar_PyObject result = PyObject_CallMethod(swig_get_self(), (char *)"onXYStagePositionChanged", (char *)"(OOO)" ,(PyObject *)obj0,(PyObject *)obj1,(PyObject *)obj2);
#endif
  if (result == NULL) {
    PyObject *error = PyErr_Occurred();
    if (error != NULL) {
      Swig::DirectorMethodException::raise("Error detected when calling 'MMEventCallback.onXYStagePositionChanged'");
    }
  }
}


void SwigDirector_MMEventCallback::onExposureChanged(char *name, double newExposure) {
  swig::SwigVar_PyObject obj0;
  obj0 = SWIG_FromCharPtr((const char *)name);
  swig::SwigVar_PyObject obj1;
  obj1 = SWIG_From_double(static_cast< double >(newExposure));
  if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call MMEventCallback.__init__.");
  }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
  const size_t swig_method_index = 9;
  const char * const swig_method_name = "onExposureChanged";
  PyObject* method = swig_get_method(swig_method_index, swig_method_name);
  swig::SwigVar_PyObject result = PyObject_CallFunction(method, (char *)"(OO)" ,(PyObject *)obj0,(PyObject *)obj1);
#else
  swig::SwigVar_PyObject result = PyObject_CallMethod(swig_get_self(), (char *)"onExposureChanged", (char *)"(OO)" ,(PyObject *)obj0,(PyObject *)obj1);
#endif
  if (result == NULL) {
    PyObject *error = PyErr_Occurred();
    if (error != NULL) {
      Swig::DirectorMethodException::raise("Error detected when calling 'MMEventCallback.onExposureChanged'");
    }
  }
}


void SwigDirector_MMEventCallback::onSLMExposureChanged(char *name, double newExposure) {
  swig::SwigVar_PyObject obj0;
  obj0 = SWIG_FromCharPtr((const char *)name);
  swig::SwigVar_PyObject obj1;
  obj1 = SWIG_From_double(static_cast< double >(newExposure));
  if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call MMEventCallback.__init__.");
  }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
  const size_t swig_method_index = 10;
  const char * const swig_method_name = "onSLMExposureChanged";
  PyObject* method = swig_get_method(swig_method_index, swig_method_name);
  swig::SwigVar_PyObject result = PyObject_CallFunction(method, (char *)"(OO)" ,(PyObject *)obj0,(PyObject *)obj1);
#else
  swig::SwigVar_PyObject result = PyObject_CallMethod(swig_get_self(), (char *)"onSLMExposureChanged", (char *)"(OO)" ,(PyObject *)obj0,(PyObject *)obj1);
#endif
  if (result == NULL) {
    PyObject *error = PyErr_Occurred();
    if (error != NULL) {
      Swig::DirectorMethodException::raise("Error detected when calling 'MMEventCallback.onSLMExposureChanged'");
    }
  }
}


#ifdef __cplusplus
extern "C" {
#endif
SWIGINTERN PyObject *_wrap_delete_SwigPyIterator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_SwigPyIterator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_SwigPyIterator" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_value(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SwigPyIterator_value",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_value" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  try {
    result = (PyObject *)((swig::SwigPyIterator const *)arg1)->value();
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_incr__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SwigPyIterator_incr",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_incr" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwigPyIterator_incr" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  try {
    result = (swig::SwigPyIterator *)(arg1)->incr(arg2);
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_incr__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SwigPyIterator_incr",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_incr" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  try {
    result = (swig::SwigPyIterator *)(arg1)->incr();
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_incr(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__SwigPyIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_SwigPyIterator_incr__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__SwigPyIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_SwigPyIterator_incr__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'SwigPyIterator_incr'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    incr(swig::SwigPyIterator *,size_t)\n"
    "    incr(swig::SwigPyIterator *)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_decr__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SwigPyIterator_decr",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_decr" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwigPyIterator_decr" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  try {
    result = (swig::SwigPyIterator *)(arg1)->decr(arg2);
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_decr__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SwigPyIterator_decr",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_decr" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  try {
    result = (swig::SwigPyIterator *)(arg1)->decr();
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_decr(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__SwigPyIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_SwigPyIterator_decr__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__SwigPyIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_SwigPyIterator_decr__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'SwigPyIterator_decr'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    decr(swig::SwigPyIterator *,size_t)\n"
    "    decr(swig::SwigPyIterator *)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_distance(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  swig::SwigPyIterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ptrdiff_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SwigPyIterator_distance",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_distance" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_swig__SwigPyIterator,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SwigPyIterator_distance" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SwigPyIterator_distance" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  arg2 = reinterpret_cast< swig::SwigPyIterator * >(argp2);
  try {
    result = ((swig::SwigPyIterator const *)arg1)->distance((swig::SwigPyIterator const &)*arg2);
  }
  catch(std::invalid_argument &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new std::invalid_argument(static_cast< const std::invalid_argument& >(_e))),SWIGTYPE_p_std__invalid_argument,SWIG_POINTER_OWN), "std::invalid_argument", SWIGTYPE_p_std__invalid_argument); SWIG_fail;
  }
  
  resultobj = SWIG_From_ptrdiff_t(static_cast< ptrdiff_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_equal(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  swig::SwigPyIterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SwigPyIterator_equal",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_equal" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_swig__SwigPyIterator,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SwigPyIterator_equal" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SwigPyIterator_equal" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  arg2 = reinterpret_cast< swig::SwigPyIterator * >(argp2);
  try {
    result = (bool)((swig::SwigPyIterator const *)arg1)->equal((swig::SwigPyIterator const &)*arg2);
  }
  catch(std::invalid_argument &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new std::invalid_argument(static_cast< const std::invalid_argument& >(_e))),SWIGTYPE_p_std__invalid_argument,SWIG_POINTER_OWN), "std::invalid_argument", SWIGTYPE_p_std__invalid_argument); SWIG_fail;
  }
  
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_copy(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SwigPyIterator_copy",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_copy" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  result = (swig::SwigPyIterator *)((swig::SwigPyIterator const *)arg1)->copy();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_next(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SwigPyIterator_next",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_next" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  try {
    result = (PyObject *)(arg1)->next();
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___next__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SwigPyIterator___next__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___next__" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  try {
    result = (PyObject *)(arg1)->__next__();
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_previous(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SwigPyIterator_previous",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_previous" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  try {
    result = (PyObject *)(arg1)->previous();
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator_advance(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  ptrdiff_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SwigPyIterator_advance",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_advance" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwigPyIterator_advance" "', argument " "2"" of type '" "ptrdiff_t""'");
  } 
  arg2 = static_cast< ptrdiff_t >(val2);
  try {
    result = (swig::SwigPyIterator *)(arg1)->advance(arg2);
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___eq__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  swig::SwigPyIterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SwigPyIterator___eq__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___eq__" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_swig__SwigPyIterator,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SwigPyIterator___eq__" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SwigPyIterator___eq__" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  arg2 = reinterpret_cast< swig::SwigPyIterator * >(argp2);
  result = (bool)((swig::SwigPyIterator const *)arg1)->operator ==((swig::SwigPyIterator const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___ne__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  swig::SwigPyIterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SwigPyIterator___ne__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___ne__" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_swig__SwigPyIterator,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SwigPyIterator___ne__" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SwigPyIterator___ne__" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  arg2 = reinterpret_cast< swig::SwigPyIterator * >(argp2);
  result = (bool)((swig::SwigPyIterator const *)arg1)->operator !=((swig::SwigPyIterator const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___iadd__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  ptrdiff_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SwigPyIterator___iadd__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___iadd__" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwigPyIterator___iadd__" "', argument " "2"" of type '" "ptrdiff_t""'");
  } 
  arg2 = static_cast< ptrdiff_t >(val2);
  try {
    result = (swig::SwigPyIterator *) &(arg1)->operator +=(arg2);
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___isub__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  ptrdiff_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SwigPyIterator___isub__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___isub__" "', argument " "1"" of type '" "swig::SwigPyIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwigPyIterator___isub__" "', argument " "2"" of type '" "ptrdiff_t""'");
  } 
  arg2 = static_cast< ptrdiff_t >(val2);
  try {
    result = (swig::SwigPyIterator *) &(arg1)->operator -=(arg2);
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___add__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  ptrdiff_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SwigPyIterator___add__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___add__" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwigPyIterator___add__" "', argument " "2"" of type '" "ptrdiff_t""'");
  } 
  arg2 = static_cast< ptrdiff_t >(val2);
  try {
    result = (swig::SwigPyIterator *)((swig::SwigPyIterator const *)arg1)->operator +(arg2);
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___sub____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  ptrdiff_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SwigPyIterator___sub__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___sub__" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwigPyIterator___sub__" "', argument " "2"" of type '" "ptrdiff_t""'");
  } 
  arg2 = static_cast< ptrdiff_t >(val2);
  try {
    result = (swig::SwigPyIterator *)((swig::SwigPyIterator const *)arg1)->operator -(arg2);
  }
  catch(swig::stop_iteration &_e) {
    {
      (void)_e;
      SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
      SWIG_fail;
    }
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___sub____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0 ;
  swig::SwigPyIterator *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ptrdiff_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SwigPyIterator___sub__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__SwigPyIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___sub__" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::SwigPyIterator * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_swig__SwigPyIterator,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SwigPyIterator___sub__" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SwigPyIterator___sub__" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'"); 
  }
  arg2 = reinterpret_cast< swig::SwigPyIterator * >(argp2);
  result = ((swig::SwigPyIterator const *)arg1)->operator -((swig::SwigPyIterator const &)*arg2);
  resultobj = SWIG_From_ptrdiff_t(static_cast< ptrdiff_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SwigPyIterator___sub__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__SwigPyIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_swig__SwigPyIterator, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_SwigPyIterator___sub____SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__SwigPyIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_SwigPyIterator___sub____SWIG_0(self, args);
      }
    }
  }
  
fail:
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *SwigPyIterator_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_swig__SwigPyIterator, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_CharVector_iterator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  PyObject **arg2 = (PyObject **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  arg2 = &obj0;
  if (!PyArg_ParseTuple(args,(char *)"O:CharVector_iterator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_char_std__allocatorT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CharVector_iterator" "', argument " "1"" of type '" "std::vector< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< char > * >(argp1);
  result = (swig::SwigPyIterator *)std_vector_Sl_char_Sg__iterator(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CharVector___nonzero__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CharVector___nonzero__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_char_std__allocatorT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CharVector___nonzero__" "', argument " "1"" of type '" "std::vector< char > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< char > * >(argp1);
  result = (bool)std_vector_Sl_char_Sg____nonzero__((std::vector< char > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CharVector___bool__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CharVector___bool__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_char_std__allocatorT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CharVector___bool__" "', argument " "1"" of type '" "std::vector< char > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< char > * >(argp1);
  result = (bool)std_vector_Sl_char_Sg____bool__((std::vector< char > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CharVector___len__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< char >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CharVector___len__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_char_std__allocatorT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CharVector___len__" "', argument " "1"" of type '" "std::vector< char > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< char > * >(argp1);
  result = std_vector_Sl_char_Sg____len__((std::vector< char > const *)arg1);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CharVector_pop(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< char >::value_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CharVector_pop",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_char_std__allocatorT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CharVector_pop" "', argument " "1"" of type '" "std::vector< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< char > * >(argp1);
  try {
    result = (std::vector< char >::value_type)std_vector_Sl_char_Sg__pop(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_From_char(static_cast< char >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CharVector___getslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  std::vector< char >::difference_type arg2 ;
  std::vector< char >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< char,std::allocator< char > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:CharVector___getslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_char_std__allocatorT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CharVector___getslice__" "', argument " "1"" of type '" "std::vector< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< char > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CharVector___getslice__" "', argument " "2"" of type '" "std::vector< char >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< char >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CharVector___getslice__" "', argument " "3"" of type '" "std::vector< char >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< char >::difference_type >(val3);
  try {
    result = (std::vector< char,std::allocator< char > > *)std_vector_Sl_char_Sg____getslice__(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_char_std__allocatorT_char_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CharVector___setslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  std::vector< char >::difference_type arg2 ;
  std::vector< char >::difference_type arg3 ;
  std::vector< char,std::allocator< char > > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:CharVector___setslice__",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_char_std__allocatorT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CharVector___setslice__" "', argument " "1"" of type '" "std::vector< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< char > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CharVector___setslice__" "', argument " "2"" of type '" "std::vector< char >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< char >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CharVector___setslice__" "', argument " "3"" of type '" "std::vector< char >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< char >::difference_type >(val3);
  {
    std::vector<char,std::allocator< char > > *ptr = (std::vector<char,std::allocator< char > > *)0;
    res4 = swig::asptr(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "CharVector___setslice__" "', argument " "4"" of type '" "std::vector< char,std::allocator< char > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CharVector___setslice__" "', argument " "4"" of type '" "std::vector< char,std::allocator< char > > const &""'"); 
    }
    arg4 = ptr;
  }
  try {
    std_vector_Sl_char_Sg____setslice__(arg1,arg2,arg3,(std::vector< char,std::allocator< char > > const &)*arg4);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CharVector___delslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  std::vector< char >::difference_type arg2 ;
  std::vector< char >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:CharVector___delslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_char_std__allocatorT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CharVector___delslice__" "', argument " "1"" of type '" "std::vector< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< char > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CharVector___delslice__" "', argument " "2"" of type '" "std::vector< char >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< char >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CharVector___delslice__" "', argument " "3"" of type '" "std::vector< char >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< char >::difference_type >(val3);
  try {
    std_vector_Sl_char_Sg____delslice__(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CharVector___delitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  std::vector< char >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CharVector___delitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_char_std__allocatorT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CharVector___delitem__" "', argument " "1"" of type '" "std::vector< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< char > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CharVector___delitem__" "', argument " "2"" of type '" "std::vector< char >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< char >::difference_type >(val2);
  try {
    std_vector_Sl_char_Sg____delitem____SWIG_0(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CharVector___getitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< char,std::allocator< char > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CharVector___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_char_std__allocatorT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CharVector___getitem__" "', argument " "1"" of type '" "std::vector< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< char > * >(argp1);
  {
    arg2 = (PySliceObject *) obj1;
  }
  try {
    result = (std::vector< char,std::allocator< char > > *)std_vector_Sl_char_Sg____getitem____SWIG_0(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_char_std__allocatorT_char_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CharVector___setitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  std::vector< char,std::allocator< char > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:CharVector___setitem__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_char_std__allocatorT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CharVector___setitem__" "', argument " "1"" of type '" "std::vector< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< char > * >(argp1);
  {
    arg2 = (PySliceObject *) obj1;
  }
  {
    std::vector<char,std::allocator< char > > *ptr = (std::vector<char,std::allocator< char > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CharVector___setitem__" "', argument " "3"" of type '" "std::vector< char,std::allocator< char > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CharVector___setitem__" "', argument " "3"" of type '" "std::vector< char,std::allocator< char > > const &""'"); 
    }
    arg3 = ptr;
  }
  try {
    std_vector_Sl_char_Sg____setitem____SWIG_0(arg1,arg2,(std::vector< char,std::allocator< char > > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CharVector___delitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CharVector___delitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_char_std__allocatorT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CharVector___delitem__" "', argument " "1"" of type '" "std::vector< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< char > * >(argp1);
  {
    arg2 = (PySliceObject *) obj1;
  }
  try {
    std_vector_Sl_char_Sg____delitem____SWIG_1(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CharVector___delitem__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<char,std::allocator< char > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_CharVector___delitem____SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<char,std::allocator< char > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_CharVector___delitem____SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'CharVector___delitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    __delitem__(std::vector< char > *,std::vector< char >::difference_type)\n"
    "    __delitem__(std::vector< char > *,PySliceObject *)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_CharVector___getitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  std::vector< char >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< char >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CharVector___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_char_std__allocatorT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CharVector___getitem__" "', argument " "1"" of type '" "std::vector< char > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< char > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CharVector___getitem__" "', argument " "2"" of type '" "std::vector< char >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< char >::difference_type >(val2);
  try {
    result = (std::vector< char >::value_type *) &std_vector_Sl_char_Sg____getitem____SWIG_1((std::vector< char > const *)arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_From_char(static_cast< char >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CharVector___getitem__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<char,std::allocator< char > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_CharVector___getitem____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<char,std::allocator< char > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_CharVector___getitem____SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'CharVector___getitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    __getitem__(std::vector< char > *,PySliceObject *)\n"
    "    __getitem__(std::vector< char > const *,std::vector< char >::difference_type)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_CharVector___setitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  std::vector< char >::difference_type arg2 ;
  std::vector< char >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  std::vector< char >::value_type temp3 ;
  char val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:CharVector___setitem__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_char_std__allocatorT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CharVector___setitem__" "', argument " "1"" of type '" "std::vector< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< char > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CharVector___setitem__" "', argument " "2"" of type '" "std::vector< char >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< char >::difference_type >(val2);
  ecode3 = SWIG_AsVal_char(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CharVector___setitem__" "', argument " "3"" of type '" "std::vector< char >::value_type""'");
  } 
  temp3 = static_cast< std::vector< char >::value_type >(val3);
  arg3 = &temp3;
  try {
    std_vector_Sl_char_Sg____setitem____SWIG_1(arg1,arg2,(char const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CharVector___setitem__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<char,std::allocator< char > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector<char,std::allocator< char > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_CharVector___setitem____SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<char,std::allocator< char > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_char(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_CharVector___setitem____SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'CharVector___setitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    __setitem__(std::vector< char > *,PySliceObject *,std::vector< char,std::allocator< char > > const &)\n"
    "    __setitem__(std::vector< char > *,std::vector< char >::difference_type,std::vector< char >::value_type const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_CharVector_append(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  std::vector< char >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< char >::value_type temp2 ;
  char val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CharVector_append",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_char_std__allocatorT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CharVector_append" "', argument " "1"" of type '" "std::vector< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< char > * >(argp1);
  ecode2 = SWIG_AsVal_char(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CharVector_append" "', argument " "2"" of type '" "std::vector< char >::value_type""'");
  } 
  temp2 = static_cast< std::vector< char >::value_type >(val2);
  arg2 = &temp2;
  std_vector_Sl_char_Sg__append(arg1,(char const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_CharVector__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< char > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_CharVector")) SWIG_fail;
  result = (std::vector< char > *)new std::vector< char >();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_char_std__allocatorT_char_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_CharVector__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< char > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  std::vector< char > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_CharVector",&obj0)) SWIG_fail;
  {
    std::vector<char,std::allocator< char > > *ptr = (std::vector<char,std::allocator< char > > *)0;
    res1 = swig::asptr(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_CharVector" "', argument " "1"" of type '" "std::vector< char > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_CharVector" "', argument " "1"" of type '" "std::vector< char > const &""'"); 
    }
    arg1 = ptr;
  }
  result = (std::vector< char > *)new std::vector< char >((std::vector< char > const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_char_std__allocatorT_char_t_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CharVector_empty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CharVector_empty",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_char_std__allocatorT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CharVector_empty" "', argument " "1"" of type '" "std::vector< char > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< char > * >(argp1);
  result = (bool)((std::vector< char > const *)arg1)->empty();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CharVector_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< char >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CharVector_size",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_char_std__allocatorT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CharVector_size" "', argument " "1"" of type '" "std::vector< char > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< char > * >(argp1);
  result = ((std::vector< char > const *)arg1)->size();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CharVector_clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CharVector_clear",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_char_std__allocatorT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CharVector_clear" "', argument " "1"" of type '" "std::vector< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< char > * >(argp1);
  (arg1)->clear();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CharVector_swap(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  std::vector< char > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CharVector_swap",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_char_std__allocatorT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CharVector_swap" "', argument " "1"" of type '" "std::vector< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< char > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_char_std__allocatorT_char_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CharVector_swap" "', argument " "2"" of type '" "std::vector< char > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CharVector_swap" "', argument " "2"" of type '" "std::vector< char > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< char > * >(argp2);
  (arg1)->swap(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CharVector_get_allocator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::allocator< char > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CharVector_get_allocator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_char_std__allocatorT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CharVector_get_allocator" "', argument " "1"" of type '" "std::vector< char > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< char > * >(argp1);
  result = ((std::vector< char > const *)arg1)->get_allocator();
  resultobj = SWIG_NewPointerObj((new std::vector< char >::allocator_type(static_cast< const std::vector< char >::allocator_type& >(result))), SWIGTYPE_p_std__vectorT_char_std__allocatorT_char_t_t__allocator_type, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CharVector_begin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< char >::const_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CharVector_begin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_char_std__allocatorT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CharVector_begin" "', argument " "1"" of type '" "std::vector< char > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< char > * >(argp1);
  result = ((std::vector< char > const *)arg1)->begin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< char >::const_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CharVector_end(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< char >::const_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CharVector_end",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_char_std__allocatorT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CharVector_end" "', argument " "1"" of type '" "std::vector< char > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< char > * >(argp1);
  result = ((std::vector< char > const *)arg1)->end();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< char >::const_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CharVector_rbegin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< char >::const_reverse_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CharVector_rbegin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_char_std__allocatorT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CharVector_rbegin" "', argument " "1"" of type '" "std::vector< char > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< char > * >(argp1);
  result = ((std::vector< char > const *)arg1)->rbegin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< char >::const_reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CharVector_rend(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< char >::const_reverse_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CharVector_rend",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_char_std__allocatorT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CharVector_rend" "', argument " "1"" of type '" "std::vector< char > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< char > * >(argp1);
  result = ((std::vector< char > const *)arg1)->rend();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< char >::const_reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_CharVector__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< char >::size_type arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< char > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_CharVector",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_CharVector" "', argument " "1"" of type '" "std::vector< char >::size_type""'");
  } 
  arg1 = static_cast< std::vector< char >::size_type >(val1);
  result = (std::vector< char > *)new std::vector< char >(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_char_std__allocatorT_char_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CharVector_pop_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CharVector_pop_back",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_char_std__allocatorT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CharVector_pop_back" "', argument " "1"" of type '" "std::vector< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< char > * >(argp1);
  (arg1)->pop_back();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CharVector_resize__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  std::vector< char >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CharVector_resize",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_char_std__allocatorT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CharVector_resize" "', argument " "1"" of type '" "std::vector< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< char > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CharVector_resize" "', argument " "2"" of type '" "std::vector< char >::size_type""'");
  } 
  arg2 = static_cast< std::vector< char >::size_type >(val2);
  (arg1)->resize(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CharVector_erase__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  std::vector< char >::iterator arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< char >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CharVector_erase",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_char_std__allocatorT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CharVector_erase" "', argument " "1"" of type '" "std::vector< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< char > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "CharVector_erase" "', argument " "2"" of type '" "std::vector< char >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< char >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< char >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "CharVector_erase" "', argument " "2"" of type '" "std::vector< char >::iterator""'");
    }
  }
  result = (arg1)->erase(arg2);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< char >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CharVector_erase__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  std::vector< char >::iterator arg2 ;
  std::vector< char >::iterator arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  swig::SwigPyIterator *iter3 = 0 ;
  int res3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< char >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:CharVector_erase",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_char_std__allocatorT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CharVector_erase" "', argument " "1"" of type '" "std::vector< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< char > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "CharVector_erase" "', argument " "2"" of type '" "std::vector< char >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< char >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< char >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "CharVector_erase" "', argument " "2"" of type '" "std::vector< char >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(obj2, SWIG_as_voidptrptr(&iter3), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res3) || !iter3) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "CharVector_erase" "', argument " "3"" of type '" "std::vector< char >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< char >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< char >::iterator > *>(iter3);
    if (iter_t) {
      arg3 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "CharVector_erase" "', argument " "3"" of type '" "std::vector< char >::iterator""'");
    }
  }
  result = (arg1)->erase(arg2,arg3);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< char >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CharVector_erase(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<char,std::allocator< char > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< char >::iterator > *>(iter) != 0));
      if (_v) {
        return _wrap_CharVector_erase__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<char,std::allocator< char > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< char >::iterator > *>(iter) != 0));
      if (_v) {
        swig::SwigPyIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[2], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< char >::iterator > *>(iter) != 0));
        if (_v) {
          return _wrap_CharVector_erase__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'CharVector_erase'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    erase(std::vector< char > *,std::vector< char >::iterator)\n"
    "    erase(std::vector< char > *,std::vector< char >::iterator,std::vector< char >::iterator)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_CharVector__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< char >::size_type arg1 ;
  std::vector< char >::value_type *arg2 = 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  std::vector< char >::value_type temp2 ;
  char val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< char > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_CharVector",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_CharVector" "', argument " "1"" of type '" "std::vector< char >::size_type""'");
  } 
  arg1 = static_cast< std::vector< char >::size_type >(val1);
  ecode2 = SWIG_AsVal_char(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_CharVector" "', argument " "2"" of type '" "std::vector< char >::value_type""'");
  } 
  temp2 = static_cast< std::vector< char >::value_type >(val2);
  arg2 = &temp2;
  result = (std::vector< char > *)new std::vector< char >(arg1,(std::vector< char >::value_type const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_char_std__allocatorT_char_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_CharVector(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_CharVector__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_CharVector__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<char,std::allocator< char > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_CharVector__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_char(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_CharVector__SWIG_3(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_CharVector'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< char >()\n"
    "    std::vector< char >(std::vector< char > const &)\n"
    "    std::vector< char >(std::vector< char >::size_type)\n"
    "    std::vector< char >(std::vector< char >::size_type,std::vector< char >::value_type const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_CharVector_push_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  std::vector< char >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< char >::value_type temp2 ;
  char val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CharVector_push_back",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_char_std__allocatorT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CharVector_push_back" "', argument " "1"" of type '" "std::vector< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< char > * >(argp1);
  ecode2 = SWIG_AsVal_char(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CharVector_push_back" "', argument " "2"" of type '" "std::vector< char >::value_type""'");
  } 
  temp2 = static_cast< std::vector< char >::value_type >(val2);
  arg2 = &temp2;
  (arg1)->push_back((std::vector< char >::value_type const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CharVector_front(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< char >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CharVector_front",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_char_std__allocatorT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CharVector_front" "', argument " "1"" of type '" "std::vector< char > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< char > * >(argp1);
  result = (std::vector< char >::value_type *) &((std::vector< char > const *)arg1)->front();
  resultobj = SWIG_From_char(static_cast< char >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CharVector_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< char >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CharVector_back",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_char_std__allocatorT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CharVector_back" "', argument " "1"" of type '" "std::vector< char > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< char > * >(argp1);
  result = (std::vector< char >::value_type *) &((std::vector< char > const *)arg1)->back();
  resultobj = SWIG_From_char(static_cast< char >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CharVector_assign(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  std::vector< char >::size_type arg2 ;
  std::vector< char >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  std::vector< char >::value_type temp3 ;
  char val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:CharVector_assign",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_char_std__allocatorT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CharVector_assign" "', argument " "1"" of type '" "std::vector< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< char > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CharVector_assign" "', argument " "2"" of type '" "std::vector< char >::size_type""'");
  } 
  arg2 = static_cast< std::vector< char >::size_type >(val2);
  ecode3 = SWIG_AsVal_char(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CharVector_assign" "', argument " "3"" of type '" "std::vector< char >::value_type""'");
  } 
  temp3 = static_cast< std::vector< char >::value_type >(val3);
  arg3 = &temp3;
  (arg1)->assign(arg2,(std::vector< char >::value_type const &)*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CharVector_resize__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  std::vector< char >::size_type arg2 ;
  std::vector< char >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  std::vector< char >::value_type temp3 ;
  char val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:CharVector_resize",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_char_std__allocatorT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CharVector_resize" "', argument " "1"" of type '" "std::vector< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< char > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CharVector_resize" "', argument " "2"" of type '" "std::vector< char >::size_type""'");
  } 
  arg2 = static_cast< std::vector< char >::size_type >(val2);
  ecode3 = SWIG_AsVal_char(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CharVector_resize" "', argument " "3"" of type '" "std::vector< char >::value_type""'");
  } 
  temp3 = static_cast< std::vector< char >::value_type >(val3);
  arg3 = &temp3;
  (arg1)->resize(arg2,(std::vector< char >::value_type const &)*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CharVector_resize(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<char,std::allocator< char > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_CharVector_resize__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<char,std::allocator< char > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_char(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_CharVector_resize__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'CharVector_resize'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    resize(std::vector< char > *,std::vector< char >::size_type)\n"
    "    resize(std::vector< char > *,std::vector< char >::size_type,std::vector< char >::value_type const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_CharVector_insert__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  std::vector< char >::iterator arg2 ;
  std::vector< char >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  std::vector< char >::value_type temp3 ;
  char val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< char >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:CharVector_insert",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_char_std__allocatorT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CharVector_insert" "', argument " "1"" of type '" "std::vector< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< char > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "CharVector_insert" "', argument " "2"" of type '" "std::vector< char >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< char >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< char >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "CharVector_insert" "', argument " "2"" of type '" "std::vector< char >::iterator""'");
    }
  }
  ecode3 = SWIG_AsVal_char(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CharVector_insert" "', argument " "3"" of type '" "std::vector< char >::value_type""'");
  } 
  temp3 = static_cast< std::vector< char >::value_type >(val3);
  arg3 = &temp3;
  result = (arg1)->insert(arg2,(std::vector< char >::value_type const &)*arg3);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< char >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CharVector_insert__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  std::vector< char >::iterator arg2 ;
  std::vector< char >::size_type arg3 ;
  std::vector< char >::value_type *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  size_t val3 ;
  int ecode3 = 0 ;
  std::vector< char >::value_type temp4 ;
  char val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:CharVector_insert",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_char_std__allocatorT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CharVector_insert" "', argument " "1"" of type '" "std::vector< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< char > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "CharVector_insert" "', argument " "2"" of type '" "std::vector< char >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< char >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< char >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "CharVector_insert" "', argument " "2"" of type '" "std::vector< char >::iterator""'");
    }
  }
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CharVector_insert" "', argument " "3"" of type '" "std::vector< char >::size_type""'");
  } 
  arg3 = static_cast< std::vector< char >::size_type >(val3);
  ecode4 = SWIG_AsVal_char(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "CharVector_insert" "', argument " "4"" of type '" "std::vector< char >::value_type""'");
  } 
  temp4 = static_cast< std::vector< char >::value_type >(val4);
  arg4 = &temp4;
  (arg1)->insert(arg2,arg3,(std::vector< char >::value_type const &)*arg4);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CharVector_insert(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 4); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<char,std::allocator< char > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< char >::iterator > *>(iter) != 0));
      if (_v) {
        {
          int res = SWIG_AsVal_char(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_CharVector_insert__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<char,std::allocator< char > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< char >::iterator > *>(iter) != 0));
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_char(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_CharVector_insert__SWIG_1(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'CharVector_insert'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    insert(std::vector< char > *,std::vector< char >::iterator,std::vector< char >::value_type const &)\n"
    "    insert(std::vector< char > *,std::vector< char >::iterator,std::vector< char >::size_type,std::vector< char >::value_type const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_CharVector_reserve(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  std::vector< char >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CharVector_reserve",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_char_std__allocatorT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CharVector_reserve" "', argument " "1"" of type '" "std::vector< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< char > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CharVector_reserve" "', argument " "2"" of type '" "std::vector< char >::size_type""'");
  } 
  arg2 = static_cast< std::vector< char >::size_type >(val2);
  (arg1)->reserve(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CharVector_capacity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< char >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CharVector_capacity",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_char_std__allocatorT_char_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CharVector_capacity" "', argument " "1"" of type '" "std::vector< char > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< char > * >(argp1);
  result = ((std::vector< char > const *)arg1)->capacity();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_CharVector(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< char > *arg1 = (std::vector< char > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_CharVector",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_char_std__allocatorT_char_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_CharVector" "', argument " "1"" of type '" "std::vector< char > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< char > * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *CharVector_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__vectorT_char_std__allocatorT_char_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_LongVector_iterator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< long > *arg1 = (std::vector< long > *) 0 ;
  PyObject **arg2 = (PyObject **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  arg2 = &obj0;
  if (!PyArg_ParseTuple(args,(char *)"O:LongVector_iterator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_long_std__allocatorT_long_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LongVector_iterator" "', argument " "1"" of type '" "std::vector< long > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< long > * >(argp1);
  result = (swig::SwigPyIterator *)std_vector_Sl_long_Sg__iterator(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LongVector___nonzero__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< long > *arg1 = (std::vector< long > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:LongVector___nonzero__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_long_std__allocatorT_long_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LongVector___nonzero__" "', argument " "1"" of type '" "std::vector< long > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< long > * >(argp1);
  result = (bool)std_vector_Sl_long_Sg____nonzero__((std::vector< long > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LongVector___bool__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< long > *arg1 = (std::vector< long > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:LongVector___bool__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_long_std__allocatorT_long_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LongVector___bool__" "', argument " "1"" of type '" "std::vector< long > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< long > * >(argp1);
  result = (bool)std_vector_Sl_long_Sg____bool__((std::vector< long > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LongVector___len__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< long > *arg1 = (std::vector< long > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< long >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:LongVector___len__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_long_std__allocatorT_long_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LongVector___len__" "', argument " "1"" of type '" "std::vector< long > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< long > * >(argp1);
  result = std_vector_Sl_long_Sg____len__((std::vector< long > const *)arg1);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LongVector_pop(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< long > *arg1 = (std::vector< long > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< long >::value_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:LongVector_pop",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_long_std__allocatorT_long_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LongVector_pop" "', argument " "1"" of type '" "std::vector< long > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< long > * >(argp1);
  try {
    result = (std::vector< long >::value_type)std_vector_Sl_long_Sg__pop(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LongVector___getslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< long > *arg1 = (std::vector< long > *) 0 ;
  std::vector< long >::difference_type arg2 ;
  std::vector< long >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< long,std::allocator< long > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:LongVector___getslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_long_std__allocatorT_long_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LongVector___getslice__" "', argument " "1"" of type '" "std::vector< long > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< long > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LongVector___getslice__" "', argument " "2"" of type '" "std::vector< long >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< long >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "LongVector___getslice__" "', argument " "3"" of type '" "std::vector< long >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< long >::difference_type >(val3);
  try {
    result = (std::vector< long,std::allocator< long > > *)std_vector_Sl_long_Sg____getslice__(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_long_std__allocatorT_long_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LongVector___setslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< long > *arg1 = (std::vector< long > *) 0 ;
  std::vector< long >::difference_type arg2 ;
  std::vector< long >::difference_type arg3 ;
  std::vector< long,std::allocator< long > > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:LongVector___setslice__",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_long_std__allocatorT_long_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LongVector___setslice__" "', argument " "1"" of type '" "std::vector< long > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< long > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LongVector___setslice__" "', argument " "2"" of type '" "std::vector< long >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< long >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "LongVector___setslice__" "', argument " "3"" of type '" "std::vector< long >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< long >::difference_type >(val3);
  {
    std::vector<long,std::allocator< long > > *ptr = (std::vector<long,std::allocator< long > > *)0;
    res4 = swig::asptr(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "LongVector___setslice__" "', argument " "4"" of type '" "std::vector< long,std::allocator< long > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LongVector___setslice__" "', argument " "4"" of type '" "std::vector< long,std::allocator< long > > const &""'"); 
    }
    arg4 = ptr;
  }
  try {
    std_vector_Sl_long_Sg____setslice__(arg1,arg2,arg3,(std::vector< long,std::allocator< long > > const &)*arg4);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_LongVector___delslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< long > *arg1 = (std::vector< long > *) 0 ;
  std::vector< long >::difference_type arg2 ;
  std::vector< long >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:LongVector___delslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_long_std__allocatorT_long_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LongVector___delslice__" "', argument " "1"" of type '" "std::vector< long > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< long > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LongVector___delslice__" "', argument " "2"" of type '" "std::vector< long >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< long >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "LongVector___delslice__" "', argument " "3"" of type '" "std::vector< long >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< long >::difference_type >(val3);
  try {
    std_vector_Sl_long_Sg____delslice__(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LongVector___delitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< long > *arg1 = (std::vector< long > *) 0 ;
  std::vector< long >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:LongVector___delitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_long_std__allocatorT_long_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LongVector___delitem__" "', argument " "1"" of type '" "std::vector< long > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< long > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LongVector___delitem__" "', argument " "2"" of type '" "std::vector< long >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< long >::difference_type >(val2);
  try {
    std_vector_Sl_long_Sg____delitem____SWIG_0(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LongVector___getitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< long > *arg1 = (std::vector< long > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< long,std::allocator< long > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:LongVector___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_long_std__allocatorT_long_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LongVector___getitem__" "', argument " "1"" of type '" "std::vector< long > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< long > * >(argp1);
  {
    arg2 = (PySliceObject *) obj1;
  }
  try {
    result = (std::vector< long,std::allocator< long > > *)std_vector_Sl_long_Sg____getitem____SWIG_0(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_long_std__allocatorT_long_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LongVector___setitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< long > *arg1 = (std::vector< long > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  std::vector< long,std::allocator< long > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:LongVector___setitem__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_long_std__allocatorT_long_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LongVector___setitem__" "', argument " "1"" of type '" "std::vector< long > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< long > * >(argp1);
  {
    arg2 = (PySliceObject *) obj1;
  }
  {
    std::vector<long,std::allocator< long > > *ptr = (std::vector<long,std::allocator< long > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "LongVector___setitem__" "', argument " "3"" of type '" "std::vector< long,std::allocator< long > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LongVector___setitem__" "', argument " "3"" of type '" "std::vector< long,std::allocator< long > > const &""'"); 
    }
    arg3 = ptr;
  }
  try {
    std_vector_Sl_long_Sg____setitem____SWIG_0(arg1,arg2,(std::vector< long,std::allocator< long > > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_LongVector___delitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< long > *arg1 = (std::vector< long > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:LongVector___delitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_long_std__allocatorT_long_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LongVector___delitem__" "', argument " "1"" of type '" "std::vector< long > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< long > * >(argp1);
  {
    arg2 = (PySliceObject *) obj1;
  }
  try {
    std_vector_Sl_long_Sg____delitem____SWIG_1(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LongVector___delitem__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<long,std::allocator< long > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_LongVector___delitem____SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<long,std::allocator< long > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_LongVector___delitem____SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'LongVector___delitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    __delitem__(std::vector< long > *,std::vector< long >::difference_type)\n"
    "    __delitem__(std::vector< long > *,PySliceObject *)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_LongVector___getitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< long > *arg1 = (std::vector< long > *) 0 ;
  std::vector< long >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< long >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:LongVector___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_long_std__allocatorT_long_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LongVector___getitem__" "', argument " "1"" of type '" "std::vector< long > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< long > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LongVector___getitem__" "', argument " "2"" of type '" "std::vector< long >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< long >::difference_type >(val2);
  try {
    result = (std::vector< long >::value_type *) &std_vector_Sl_long_Sg____getitem____SWIG_1((std::vector< long > const *)arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_From_long(static_cast< long >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LongVector___getitem__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<long,std::allocator< long > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_LongVector___getitem____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<long,std::allocator< long > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_LongVector___getitem____SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'LongVector___getitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    __getitem__(std::vector< long > *,PySliceObject *)\n"
    "    __getitem__(std::vector< long > const *,std::vector< long >::difference_type)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_LongVector___setitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< long > *arg1 = (std::vector< long > *) 0 ;
  std::vector< long >::difference_type arg2 ;
  std::vector< long >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  std::vector< long >::value_type temp3 ;
  long val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:LongVector___setitem__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_long_std__allocatorT_long_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LongVector___setitem__" "', argument " "1"" of type '" "std::vector< long > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< long > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LongVector___setitem__" "', argument " "2"" of type '" "std::vector< long >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< long >::difference_type >(val2);
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "LongVector___setitem__" "', argument " "3"" of type '" "std::vector< long >::value_type""'");
  } 
  temp3 = static_cast< std::vector< long >::value_type >(val3);
  arg3 = &temp3;
  try {
    std_vector_Sl_long_Sg____setitem____SWIG_1(arg1,arg2,(long const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LongVector___setitem__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<long,std::allocator< long > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector<long,std::allocator< long > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_LongVector___setitem____SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<long,std::allocator< long > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_LongVector___setitem____SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'LongVector___setitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    __setitem__(std::vector< long > *,PySliceObject *,std::vector< long,std::allocator< long > > const &)\n"
    "    __setitem__(std::vector< long > *,std::vector< long >::difference_type,std::vector< long >::value_type const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_LongVector_append(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< long > *arg1 = (std::vector< long > *) 0 ;
  std::vector< long >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< long >::value_type temp2 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:LongVector_append",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_long_std__allocatorT_long_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LongVector_append" "', argument " "1"" of type '" "std::vector< long > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< long > * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LongVector_append" "', argument " "2"" of type '" "std::vector< long >::value_type""'");
  } 
  temp2 = static_cast< std::vector< long >::value_type >(val2);
  arg2 = &temp2;
  std_vector_Sl_long_Sg__append(arg1,(long const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_LongVector__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< long > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_LongVector")) SWIG_fail;
  result = (std::vector< long > *)new std::vector< long >();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_long_std__allocatorT_long_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_LongVector__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< long > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  std::vector< long > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_LongVector",&obj0)) SWIG_fail;
  {
    std::vector<long,std::allocator< long > > *ptr = (std::vector<long,std::allocator< long > > *)0;
    res1 = swig::asptr(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_LongVector" "', argument " "1"" of type '" "std::vector< long > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_LongVector" "', argument " "1"" of type '" "std::vector< long > const &""'"); 
    }
    arg1 = ptr;
  }
  result = (std::vector< long > *)new std::vector< long >((std::vector< long > const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_long_std__allocatorT_long_t_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_LongVector_empty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< long > *arg1 = (std::vector< long > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:LongVector_empty",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_long_std__allocatorT_long_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LongVector_empty" "', argument " "1"" of type '" "std::vector< long > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< long > * >(argp1);
  result = (bool)((std::vector< long > const *)arg1)->empty();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LongVector_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< long > *arg1 = (std::vector< long > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< long >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:LongVector_size",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_long_std__allocatorT_long_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LongVector_size" "', argument " "1"" of type '" "std::vector< long > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< long > * >(argp1);
  result = ((std::vector< long > const *)arg1)->size();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LongVector_clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< long > *arg1 = (std::vector< long > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:LongVector_clear",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_long_std__allocatorT_long_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LongVector_clear" "', argument " "1"" of type '" "std::vector< long > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< long > * >(argp1);
  (arg1)->clear();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LongVector_swap(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< long > *arg1 = (std::vector< long > *) 0 ;
  std::vector< long > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:LongVector_swap",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_long_std__allocatorT_long_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LongVector_swap" "', argument " "1"" of type '" "std::vector< long > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< long > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_long_std__allocatorT_long_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LongVector_swap" "', argument " "2"" of type '" "std::vector< long > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LongVector_swap" "', argument " "2"" of type '" "std::vector< long > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< long > * >(argp2);
  (arg1)->swap(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LongVector_get_allocator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< long > *arg1 = (std::vector< long > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::allocator< long > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:LongVector_get_allocator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_long_std__allocatorT_long_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LongVector_get_allocator" "', argument " "1"" of type '" "std::vector< long > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< long > * >(argp1);
  result = ((std::vector< long > const *)arg1)->get_allocator();
  resultobj = SWIG_NewPointerObj((new std::vector< long >::allocator_type(static_cast< const std::vector< long >::allocator_type& >(result))), SWIGTYPE_p_std__vectorT_long_std__allocatorT_long_t_t__allocator_type, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LongVector_begin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< long > *arg1 = (std::vector< long > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< long >::const_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:LongVector_begin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_long_std__allocatorT_long_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LongVector_begin" "', argument " "1"" of type '" "std::vector< long > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< long > * >(argp1);
  result = ((std::vector< long > const *)arg1)->begin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< long >::const_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LongVector_end(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< long > *arg1 = (std::vector< long > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< long >::const_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:LongVector_end",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_long_std__allocatorT_long_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LongVector_end" "', argument " "1"" of type '" "std::vector< long > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< long > * >(argp1);
  result = ((std::vector< long > const *)arg1)->end();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< long >::const_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LongVector_rbegin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< long > *arg1 = (std::vector< long > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< long >::const_reverse_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:LongVector_rbegin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_long_std__allocatorT_long_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LongVector_rbegin" "', argument " "1"" of type '" "std::vector< long > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< long > * >(argp1);
  result = ((std::vector< long > const *)arg1)->rbegin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< long >::const_reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LongVector_rend(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< long > *arg1 = (std::vector< long > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< long >::const_reverse_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:LongVector_rend",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_long_std__allocatorT_long_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LongVector_rend" "', argument " "1"" of type '" "std::vector< long > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< long > * >(argp1);
  result = ((std::vector< long > const *)arg1)->rend();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< long >::const_reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_LongVector__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< long >::size_type arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< long > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_LongVector",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_LongVector" "', argument " "1"" of type '" "std::vector< long >::size_type""'");
  } 
  arg1 = static_cast< std::vector< long >::size_type >(val1);
  result = (std::vector< long > *)new std::vector< long >(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_long_std__allocatorT_long_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LongVector_pop_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< long > *arg1 = (std::vector< long > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:LongVector_pop_back",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_long_std__allocatorT_long_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LongVector_pop_back" "', argument " "1"" of type '" "std::vector< long > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< long > * >(argp1);
  (arg1)->pop_back();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LongVector_resize__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< long > *arg1 = (std::vector< long > *) 0 ;
  std::vector< long >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:LongVector_resize",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_long_std__allocatorT_long_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LongVector_resize" "', argument " "1"" of type '" "std::vector< long > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< long > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LongVector_resize" "', argument " "2"" of type '" "std::vector< long >::size_type""'");
  } 
  arg2 = static_cast< std::vector< long >::size_type >(val2);
  (arg1)->resize(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LongVector_erase__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< long > *arg1 = (std::vector< long > *) 0 ;
  std::vector< long >::iterator arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< long >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:LongVector_erase",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_long_std__allocatorT_long_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LongVector_erase" "', argument " "1"" of type '" "std::vector< long > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< long > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "LongVector_erase" "', argument " "2"" of type '" "std::vector< long >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< long >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< long >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "LongVector_erase" "', argument " "2"" of type '" "std::vector< long >::iterator""'");
    }
  }
  result = (arg1)->erase(arg2);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< long >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LongVector_erase__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< long > *arg1 = (std::vector< long > *) 0 ;
  std::vector< long >::iterator arg2 ;
  std::vector< long >::iterator arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  swig::SwigPyIterator *iter3 = 0 ;
  int res3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< long >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:LongVector_erase",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_long_std__allocatorT_long_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LongVector_erase" "', argument " "1"" of type '" "std::vector< long > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< long > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "LongVector_erase" "', argument " "2"" of type '" "std::vector< long >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< long >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< long >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "LongVector_erase" "', argument " "2"" of type '" "std::vector< long >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(obj2, SWIG_as_voidptrptr(&iter3), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res3) || !iter3) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "LongVector_erase" "', argument " "3"" of type '" "std::vector< long >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< long >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< long >::iterator > *>(iter3);
    if (iter_t) {
      arg3 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "LongVector_erase" "', argument " "3"" of type '" "std::vector< long >::iterator""'");
    }
  }
  result = (arg1)->erase(arg2,arg3);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< long >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LongVector_erase(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<long,std::allocator< long > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< long >::iterator > *>(iter) != 0));
      if (_v) {
        return _wrap_LongVector_erase__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<long,std::allocator< long > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< long >::iterator > *>(iter) != 0));
      if (_v) {
        swig::SwigPyIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[2], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< long >::iterator > *>(iter) != 0));
        if (_v) {
          return _wrap_LongVector_erase__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'LongVector_erase'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    erase(std::vector< long > *,std::vector< long >::iterator)\n"
    "    erase(std::vector< long > *,std::vector< long >::iterator,std::vector< long >::iterator)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_LongVector__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< long >::size_type arg1 ;
  std::vector< long >::value_type *arg2 = 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  std::vector< long >::value_type temp2 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< long > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_LongVector",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_LongVector" "', argument " "1"" of type '" "std::vector< long >::size_type""'");
  } 
  arg1 = static_cast< std::vector< long >::size_type >(val1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_LongVector" "', argument " "2"" of type '" "std::vector< long >::value_type""'");
  } 
  temp2 = static_cast< std::vector< long >::value_type >(val2);
  arg2 = &temp2;
  result = (std::vector< long > *)new std::vector< long >(arg1,(std::vector< long >::value_type const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_long_std__allocatorT_long_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_LongVector(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_LongVector__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_LongVector__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<long,std::allocator< long > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_LongVector__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_LongVector__SWIG_3(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_LongVector'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< long >()\n"
    "    std::vector< long >(std::vector< long > const &)\n"
    "    std::vector< long >(std::vector< long >::size_type)\n"
    "    std::vector< long >(std::vector< long >::size_type,std::vector< long >::value_type const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_LongVector_push_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< long > *arg1 = (std::vector< long > *) 0 ;
  std::vector< long >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< long >::value_type temp2 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:LongVector_push_back",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_long_std__allocatorT_long_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LongVector_push_back" "', argument " "1"" of type '" "std::vector< long > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< long > * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LongVector_push_back" "', argument " "2"" of type '" "std::vector< long >::value_type""'");
  } 
  temp2 = static_cast< std::vector< long >::value_type >(val2);
  arg2 = &temp2;
  (arg1)->push_back((std::vector< long >::value_type const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LongVector_front(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< long > *arg1 = (std::vector< long > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< long >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:LongVector_front",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_long_std__allocatorT_long_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LongVector_front" "', argument " "1"" of type '" "std::vector< long > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< long > * >(argp1);
  result = (std::vector< long >::value_type *) &((std::vector< long > const *)arg1)->front();
  resultobj = SWIG_From_long(static_cast< long >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LongVector_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< long > *arg1 = (std::vector< long > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< long >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:LongVector_back",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_long_std__allocatorT_long_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LongVector_back" "', argument " "1"" of type '" "std::vector< long > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< long > * >(argp1);
  result = (std::vector< long >::value_type *) &((std::vector< long > const *)arg1)->back();
  resultobj = SWIG_From_long(static_cast< long >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LongVector_assign(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< long > *arg1 = (std::vector< long > *) 0 ;
  std::vector< long >::size_type arg2 ;
  std::vector< long >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  std::vector< long >::value_type temp3 ;
  long val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:LongVector_assign",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_long_std__allocatorT_long_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LongVector_assign" "', argument " "1"" of type '" "std::vector< long > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< long > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LongVector_assign" "', argument " "2"" of type '" "std::vector< long >::size_type""'");
  } 
  arg2 = static_cast< std::vector< long >::size_type >(val2);
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "LongVector_assign" "', argument " "3"" of type '" "std::vector< long >::value_type""'");
  } 
  temp3 = static_cast< std::vector< long >::value_type >(val3);
  arg3 = &temp3;
  (arg1)->assign(arg2,(std::vector< long >::value_type const &)*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LongVector_resize__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< long > *arg1 = (std::vector< long > *) 0 ;
  std::vector< long >::size_type arg2 ;
  std::vector< long >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  std::vector< long >::value_type temp3 ;
  long val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:LongVector_resize",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_long_std__allocatorT_long_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LongVector_resize" "', argument " "1"" of type '" "std::vector< long > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< long > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LongVector_resize" "', argument " "2"" of type '" "std::vector< long >::size_type""'");
  } 
  arg2 = static_cast< std::vector< long >::size_type >(val2);
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "LongVector_resize" "', argument " "3"" of type '" "std::vector< long >::value_type""'");
  } 
  temp3 = static_cast< std::vector< long >::value_type >(val3);
  arg3 = &temp3;
  (arg1)->resize(arg2,(std::vector< long >::value_type const &)*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LongVector_resize(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<long,std::allocator< long > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_LongVector_resize__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<long,std::allocator< long > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_LongVector_resize__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'LongVector_resize'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    resize(std::vector< long > *,std::vector< long >::size_type)\n"
    "    resize(std::vector< long > *,std::vector< long >::size_type,std::vector< long >::value_type const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_LongVector_insert__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< long > *arg1 = (std::vector< long > *) 0 ;
  std::vector< long >::iterator arg2 ;
  std::vector< long >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  std::vector< long >::value_type temp3 ;
  long val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< long >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:LongVector_insert",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_long_std__allocatorT_long_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LongVector_insert" "', argument " "1"" of type '" "std::vector< long > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< long > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "LongVector_insert" "', argument " "2"" of type '" "std::vector< long >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< long >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< long >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "LongVector_insert" "', argument " "2"" of type '" "std::vector< long >::iterator""'");
    }
  }
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "LongVector_insert" "', argument " "3"" of type '" "std::vector< long >::value_type""'");
  } 
  temp3 = static_cast< std::vector< long >::value_type >(val3);
  arg3 = &temp3;
  result = (arg1)->insert(arg2,(std::vector< long >::value_type const &)*arg3);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< long >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LongVector_insert__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< long > *arg1 = (std::vector< long > *) 0 ;
  std::vector< long >::iterator arg2 ;
  std::vector< long >::size_type arg3 ;
  std::vector< long >::value_type *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  size_t val3 ;
  int ecode3 = 0 ;
  std::vector< long >::value_type temp4 ;
  long val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:LongVector_insert",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_long_std__allocatorT_long_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LongVector_insert" "', argument " "1"" of type '" "std::vector< long > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< long > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "LongVector_insert" "', argument " "2"" of type '" "std::vector< long >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< long >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< long >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "LongVector_insert" "', argument " "2"" of type '" "std::vector< long >::iterator""'");
    }
  }
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "LongVector_insert" "', argument " "3"" of type '" "std::vector< long >::size_type""'");
  } 
  arg3 = static_cast< std::vector< long >::size_type >(val3);
  ecode4 = SWIG_AsVal_long(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "LongVector_insert" "', argument " "4"" of type '" "std::vector< long >::value_type""'");
  } 
  temp4 = static_cast< std::vector< long >::value_type >(val4);
  arg4 = &temp4;
  (arg1)->insert(arg2,arg3,(std::vector< long >::value_type const &)*arg4);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LongVector_insert(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 4); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<long,std::allocator< long > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< long >::iterator > *>(iter) != 0));
      if (_v) {
        {
          int res = SWIG_AsVal_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_LongVector_insert__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<long,std::allocator< long > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< long >::iterator > *>(iter) != 0));
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_long(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_LongVector_insert__SWIG_1(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'LongVector_insert'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    insert(std::vector< long > *,std::vector< long >::iterator,std::vector< long >::value_type const &)\n"
    "    insert(std::vector< long > *,std::vector< long >::iterator,std::vector< long >::size_type,std::vector< long >::value_type const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_LongVector_reserve(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< long > *arg1 = (std::vector< long > *) 0 ;
  std::vector< long >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:LongVector_reserve",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_long_std__allocatorT_long_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LongVector_reserve" "', argument " "1"" of type '" "std::vector< long > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< long > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LongVector_reserve" "', argument " "2"" of type '" "std::vector< long >::size_type""'");
  } 
  arg2 = static_cast< std::vector< long >::size_type >(val2);
  (arg1)->reserve(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LongVector_capacity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< long > *arg1 = (std::vector< long > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< long >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:LongVector_capacity",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_long_std__allocatorT_long_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LongVector_capacity" "', argument " "1"" of type '" "std::vector< long > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< long > * >(argp1);
  result = ((std::vector< long > const *)arg1)->capacity();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_LongVector(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< long > *arg1 = (std::vector< long > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_LongVector",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_long_std__allocatorT_long_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_LongVector" "', argument " "1"" of type '" "std::vector< long > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< long > * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *LongVector_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__vectorT_long_std__allocatorT_long_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_DoubleVector_iterator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  PyObject **arg2 = (PyObject **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  arg2 = &obj0;
  if (!PyArg_ParseTuple(args,(char *)"O:DoubleVector_iterator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector_iterator" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  result = (swig::SwigPyIterator *)std_vector_Sl_double_Sg__iterator(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoubleVector___nonzero__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DoubleVector___nonzero__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector___nonzero__" "', argument " "1"" of type '" "std::vector< double > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  result = (bool)std_vector_Sl_double_Sg____nonzero__((std::vector< double > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoubleVector___bool__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DoubleVector___bool__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector___bool__" "', argument " "1"" of type '" "std::vector< double > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  result = (bool)std_vector_Sl_double_Sg____bool__((std::vector< double > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoubleVector___len__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< double >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DoubleVector___len__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector___len__" "', argument " "1"" of type '" "std::vector< double > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  result = std_vector_Sl_double_Sg____len__((std::vector< double > const *)arg1);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoubleVector_pop(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< double >::value_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DoubleVector_pop",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector_pop" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  try {
    result = (std::vector< double >::value_type)std_vector_Sl_double_Sg__pop(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoubleVector___getslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::difference_type arg2 ;
  std::vector< double >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< double,std::allocator< double > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:DoubleVector___getslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector___getslice__" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DoubleVector___getslice__" "', argument " "2"" of type '" "std::vector< double >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< double >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "DoubleVector___getslice__" "', argument " "3"" of type '" "std::vector< double >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< double >::difference_type >(val3);
  try {
    result = (std::vector< double,std::allocator< double > > *)std_vector_Sl_double_Sg____getslice__(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoubleVector___setslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::difference_type arg2 ;
  std::vector< double >::difference_type arg3 ;
  std::vector< double,std::allocator< double > > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:DoubleVector___setslice__",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector___setslice__" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DoubleVector___setslice__" "', argument " "2"" of type '" "std::vector< double >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< double >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "DoubleVector___setslice__" "', argument " "3"" of type '" "std::vector< double >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< double >::difference_type >(val3);
  {
    std::vector<double,std::allocator< double > > *ptr = (std::vector<double,std::allocator< double > > *)0;
    res4 = swig::asptr(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "DoubleVector___setslice__" "', argument " "4"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DoubleVector___setslice__" "', argument " "4"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    arg4 = ptr;
  }
  try {
    std_vector_Sl_double_Sg____setslice__(arg1,arg2,arg3,(std::vector< double,std::allocator< double > > const &)*arg4);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoubleVector___delslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::difference_type arg2 ;
  std::vector< double >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:DoubleVector___delslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector___delslice__" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DoubleVector___delslice__" "', argument " "2"" of type '" "std::vector< double >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< double >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "DoubleVector___delslice__" "', argument " "3"" of type '" "std::vector< double >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< double >::difference_type >(val3);
  try {
    std_vector_Sl_double_Sg____delslice__(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoubleVector___delitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DoubleVector___delitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector___delitem__" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DoubleVector___delitem__" "', argument " "2"" of type '" "std::vector< double >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< double >::difference_type >(val2);
  try {
    std_vector_Sl_double_Sg____delitem____SWIG_0(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoubleVector___getitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< double,std::allocator< double > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DoubleVector___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector___getitem__" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  {
    arg2 = (PySliceObject *) obj1;
  }
  try {
    result = (std::vector< double,std::allocator< double > > *)std_vector_Sl_double_Sg____getitem____SWIG_0(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoubleVector___setitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  std::vector< double,std::allocator< double > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:DoubleVector___setitem__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector___setitem__" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  {
    arg2 = (PySliceObject *) obj1;
  }
  {
    std::vector<double,std::allocator< double > > *ptr = (std::vector<double,std::allocator< double > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "DoubleVector___setitem__" "', argument " "3"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DoubleVector___setitem__" "', argument " "3"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    arg3 = ptr;
  }
  try {
    std_vector_Sl_double_Sg____setitem____SWIG_0(arg1,arg2,(std::vector< double,std::allocator< double > > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoubleVector___delitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DoubleVector___delitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector___delitem__" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  {
    arg2 = (PySliceObject *) obj1;
  }
  try {
    std_vector_Sl_double_Sg____delitem____SWIG_1(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoubleVector___delitem__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<double,std::allocator< double > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_DoubleVector___delitem____SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<double,std::allocator< double > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_DoubleVector___delitem____SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'DoubleVector___delitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    __delitem__(std::vector< double > *,std::vector< double >::difference_type)\n"
    "    __delitem__(std::vector< double > *,PySliceObject *)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoubleVector___getitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< double >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DoubleVector___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector___getitem__" "', argument " "1"" of type '" "std::vector< double > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DoubleVector___getitem__" "', argument " "2"" of type '" "std::vector< double >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< double >::difference_type >(val2);
  try {
    result = (std::vector< double >::value_type *) &std_vector_Sl_double_Sg____getitem____SWIG_1((std::vector< double > const *)arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_From_double(static_cast< double >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoubleVector___getitem__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<double,std::allocator< double > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_DoubleVector___getitem____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<double,std::allocator< double > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_DoubleVector___getitem____SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'DoubleVector___getitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    __getitem__(std::vector< double > *,PySliceObject *)\n"
    "    __getitem__(std::vector< double > const *,std::vector< double >::difference_type)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoubleVector___setitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::difference_type arg2 ;
  std::vector< double >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  std::vector< double >::value_type temp3 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:DoubleVector___setitem__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector___setitem__" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DoubleVector___setitem__" "', argument " "2"" of type '" "std::vector< double >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< double >::difference_type >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "DoubleVector___setitem__" "', argument " "3"" of type '" "std::vector< double >::value_type""'");
  } 
  temp3 = static_cast< std::vector< double >::value_type >(val3);
  arg3 = &temp3;
  try {
    std_vector_Sl_double_Sg____setitem____SWIG_1(arg1,arg2,(double const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoubleVector___setitem__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<double,std::allocator< double > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector<double,std::allocator< double > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_DoubleVector___setitem____SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<double,std::allocator< double > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_DoubleVector___setitem____SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'DoubleVector___setitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    __setitem__(std::vector< double > *,PySliceObject *,std::vector< double,std::allocator< double > > const &)\n"
    "    __setitem__(std::vector< double > *,std::vector< double >::difference_type,std::vector< double >::value_type const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoubleVector_append(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< double >::value_type temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DoubleVector_append",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector_append" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DoubleVector_append" "', argument " "2"" of type '" "std::vector< double >::value_type""'");
  } 
  temp2 = static_cast< std::vector< double >::value_type >(val2);
  arg2 = &temp2;
  std_vector_Sl_double_Sg__append(arg1,(double const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_DoubleVector__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_DoubleVector")) SWIG_fail;
  result = (std::vector< double > *)new std::vector< double >();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_DoubleVector__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  std::vector< double > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_DoubleVector",&obj0)) SWIG_fail;
  {
    std::vector<double,std::allocator< double > > *ptr = (std::vector<double,std::allocator< double > > *)0;
    res1 = swig::asptr(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_DoubleVector" "', argument " "1"" of type '" "std::vector< double > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_DoubleVector" "', argument " "1"" of type '" "std::vector< double > const &""'"); 
    }
    arg1 = ptr;
  }
  result = (std::vector< double > *)new std::vector< double >((std::vector< double > const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoubleVector_empty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DoubleVector_empty",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector_empty" "', argument " "1"" of type '" "std::vector< double > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  result = (bool)((std::vector< double > const *)arg1)->empty();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoubleVector_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< double >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DoubleVector_size",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector_size" "', argument " "1"" of type '" "std::vector< double > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  result = ((std::vector< double > const *)arg1)->size();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoubleVector_clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DoubleVector_clear",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector_clear" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  (arg1)->clear();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoubleVector_swap(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DoubleVector_swap",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector_swap" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DoubleVector_swap" "', argument " "2"" of type '" "std::vector< double > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DoubleVector_swap" "', argument " "2"" of type '" "std::vector< double > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< double > * >(argp2);
  (arg1)->swap(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoubleVector_get_allocator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::allocator< double > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DoubleVector_get_allocator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector_get_allocator" "', argument " "1"" of type '" "std::vector< double > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  result = ((std::vector< double > const *)arg1)->get_allocator();
  resultobj = SWIG_NewPointerObj((new std::vector< double >::allocator_type(static_cast< const std::vector< double >::allocator_type& >(result))), SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t__allocator_type, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoubleVector_begin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< double >::const_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DoubleVector_begin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector_begin" "', argument " "1"" of type '" "std::vector< double > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  result = ((std::vector< double > const *)arg1)->begin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< double >::const_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoubleVector_end(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< double >::const_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DoubleVector_end",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector_end" "', argument " "1"" of type '" "std::vector< double > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  result = ((std::vector< double > const *)arg1)->end();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< double >::const_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoubleVector_rbegin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< double >::const_reverse_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DoubleVector_rbegin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector_rbegin" "', argument " "1"" of type '" "std::vector< double > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  result = ((std::vector< double > const *)arg1)->rbegin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< double >::const_reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoubleVector_rend(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< double >::const_reverse_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DoubleVector_rend",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector_rend" "', argument " "1"" of type '" "std::vector< double > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  result = ((std::vector< double > const *)arg1)->rend();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< double >::const_reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_DoubleVector__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double >::size_type arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< double > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_DoubleVector",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_DoubleVector" "', argument " "1"" of type '" "std::vector< double >::size_type""'");
  } 
  arg1 = static_cast< std::vector< double >::size_type >(val1);
  result = (std::vector< double > *)new std::vector< double >(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoubleVector_pop_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DoubleVector_pop_back",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector_pop_back" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  (arg1)->pop_back();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoubleVector_resize__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DoubleVector_resize",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector_resize" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DoubleVector_resize" "', argument " "2"" of type '" "std::vector< double >::size_type""'");
  } 
  arg2 = static_cast< std::vector< double >::size_type >(val2);
  (arg1)->resize(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoubleVector_erase__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::iterator arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< double >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DoubleVector_erase",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector_erase" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "DoubleVector_erase" "', argument " "2"" of type '" "std::vector< double >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< double >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< double >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "DoubleVector_erase" "', argument " "2"" of type '" "std::vector< double >::iterator""'");
    }
  }
  result = (arg1)->erase(arg2);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< double >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoubleVector_erase__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::iterator arg2 ;
  std::vector< double >::iterator arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  swig::SwigPyIterator *iter3 = 0 ;
  int res3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< double >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:DoubleVector_erase",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector_erase" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "DoubleVector_erase" "', argument " "2"" of type '" "std::vector< double >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< double >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< double >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "DoubleVector_erase" "', argument " "2"" of type '" "std::vector< double >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(obj2, SWIG_as_voidptrptr(&iter3), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res3) || !iter3) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "DoubleVector_erase" "', argument " "3"" of type '" "std::vector< double >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< double >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< double >::iterator > *>(iter3);
    if (iter_t) {
      arg3 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "DoubleVector_erase" "', argument " "3"" of type '" "std::vector< double >::iterator""'");
    }
  }
  result = (arg1)->erase(arg2,arg3);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< double >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoubleVector_erase(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<double,std::allocator< double > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< double >::iterator > *>(iter) != 0));
      if (_v) {
        return _wrap_DoubleVector_erase__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<double,std::allocator< double > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< double >::iterator > *>(iter) != 0));
      if (_v) {
        swig::SwigPyIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[2], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< double >::iterator > *>(iter) != 0));
        if (_v) {
          return _wrap_DoubleVector_erase__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'DoubleVector_erase'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    erase(std::vector< double > *,std::vector< double >::iterator)\n"
    "    erase(std::vector< double > *,std::vector< double >::iterator,std::vector< double >::iterator)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_DoubleVector__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double >::size_type arg1 ;
  std::vector< double >::value_type *arg2 = 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  std::vector< double >::value_type temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< double > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_DoubleVector",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_DoubleVector" "', argument " "1"" of type '" "std::vector< double >::size_type""'");
  } 
  arg1 = static_cast< std::vector< double >::size_type >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_DoubleVector" "', argument " "2"" of type '" "std::vector< double >::value_type""'");
  } 
  temp2 = static_cast< std::vector< double >::value_type >(val2);
  arg2 = &temp2;
  result = (std::vector< double > *)new std::vector< double >(arg1,(std::vector< double >::value_type const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_DoubleVector(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_DoubleVector__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_DoubleVector__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<double,std::allocator< double > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_DoubleVector__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_DoubleVector__SWIG_3(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_DoubleVector'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< double >()\n"
    "    std::vector< double >(std::vector< double > const &)\n"
    "    std::vector< double >(std::vector< double >::size_type)\n"
    "    std::vector< double >(std::vector< double >::size_type,std::vector< double >::value_type const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoubleVector_push_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< double >::value_type temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DoubleVector_push_back",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector_push_back" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DoubleVector_push_back" "', argument " "2"" of type '" "std::vector< double >::value_type""'");
  } 
  temp2 = static_cast< std::vector< double >::value_type >(val2);
  arg2 = &temp2;
  (arg1)->push_back((std::vector< double >::value_type const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoubleVector_front(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< double >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DoubleVector_front",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector_front" "', argument " "1"" of type '" "std::vector< double > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  result = (std::vector< double >::value_type *) &((std::vector< double > const *)arg1)->front();
  resultobj = SWIG_From_double(static_cast< double >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoubleVector_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< double >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DoubleVector_back",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector_back" "', argument " "1"" of type '" "std::vector< double > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  result = (std::vector< double >::value_type *) &((std::vector< double > const *)arg1)->back();
  resultobj = SWIG_From_double(static_cast< double >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoubleVector_assign(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::size_type arg2 ;
  std::vector< double >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  std::vector< double >::value_type temp3 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:DoubleVector_assign",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector_assign" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DoubleVector_assign" "', argument " "2"" of type '" "std::vector< double >::size_type""'");
  } 
  arg2 = static_cast< std::vector< double >::size_type >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "DoubleVector_assign" "', argument " "3"" of type '" "std::vector< double >::value_type""'");
  } 
  temp3 = static_cast< std::vector< double >::value_type >(val3);
  arg3 = &temp3;
  (arg1)->assign(arg2,(std::vector< double >::value_type const &)*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoubleVector_resize__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::size_type arg2 ;
  std::vector< double >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  std::vector< double >::value_type temp3 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:DoubleVector_resize",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector_resize" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DoubleVector_resize" "', argument " "2"" of type '" "std::vector< double >::size_type""'");
  } 
  arg2 = static_cast< std::vector< double >::size_type >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "DoubleVector_resize" "', argument " "3"" of type '" "std::vector< double >::value_type""'");
  } 
  temp3 = static_cast< std::vector< double >::value_type >(val3);
  arg3 = &temp3;
  (arg1)->resize(arg2,(std::vector< double >::value_type const &)*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoubleVector_resize(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<double,std::allocator< double > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_DoubleVector_resize__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<double,std::allocator< double > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_DoubleVector_resize__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'DoubleVector_resize'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    resize(std::vector< double > *,std::vector< double >::size_type)\n"
    "    resize(std::vector< double > *,std::vector< double >::size_type,std::vector< double >::value_type const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoubleVector_insert__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::iterator arg2 ;
  std::vector< double >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  std::vector< double >::value_type temp3 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< double >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:DoubleVector_insert",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector_insert" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "DoubleVector_insert" "', argument " "2"" of type '" "std::vector< double >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< double >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< double >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "DoubleVector_insert" "', argument " "2"" of type '" "std::vector< double >::iterator""'");
    }
  }
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "DoubleVector_insert" "', argument " "3"" of type '" "std::vector< double >::value_type""'");
  } 
  temp3 = static_cast< std::vector< double >::value_type >(val3);
  arg3 = &temp3;
  result = (arg1)->insert(arg2,(std::vector< double >::value_type const &)*arg3);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< double >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoubleVector_insert__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::iterator arg2 ;
  std::vector< double >::size_type arg3 ;
  std::vector< double >::value_type *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  size_t val3 ;
  int ecode3 = 0 ;
  std::vector< double >::value_type temp4 ;
  double val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:DoubleVector_insert",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector_insert" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "DoubleVector_insert" "', argument " "2"" of type '" "std::vector< double >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< double >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< double >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "DoubleVector_insert" "', argument " "2"" of type '" "std::vector< double >::iterator""'");
    }
  }
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "DoubleVector_insert" "', argument " "3"" of type '" "std::vector< double >::size_type""'");
  } 
  arg3 = static_cast< std::vector< double >::size_type >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "DoubleVector_insert" "', argument " "4"" of type '" "std::vector< double >::value_type""'");
  } 
  temp4 = static_cast< std::vector< double >::value_type >(val4);
  arg4 = &temp4;
  (arg1)->insert(arg2,arg3,(std::vector< double >::value_type const &)*arg4);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoubleVector_insert(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 4); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<double,std::allocator< double > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< double >::iterator > *>(iter) != 0));
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_DoubleVector_insert__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<double,std::allocator< double > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< double >::iterator > *>(iter) != 0));
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_DoubleVector_insert__SWIG_1(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'DoubleVector_insert'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    insert(std::vector< double > *,std::vector< double >::iterator,std::vector< double >::value_type const &)\n"
    "    insert(std::vector< double > *,std::vector< double >::iterator,std::vector< double >::size_type,std::vector< double >::value_type const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoubleVector_reserve(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DoubleVector_reserve",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector_reserve" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DoubleVector_reserve" "', argument " "2"" of type '" "std::vector< double >::size_type""'");
  } 
  arg2 = static_cast< std::vector< double >::size_type >(val2);
  (arg1)->reserve(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoubleVector_capacity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< double >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DoubleVector_capacity",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector_capacity" "', argument " "1"" of type '" "std::vector< double > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  result = ((std::vector< double > const *)arg1)->capacity();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_DoubleVector(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_DoubleVector",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_DoubleVector" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *DoubleVector_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_StrVector_iterator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  PyObject **arg2 = (PyObject **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  arg2 = &obj0;
  if (!PyArg_ParseTuple(args,(char *)"O:StrVector_iterator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StrVector_iterator" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  result = (swig::SwigPyIterator *)std_vector_Sl_std_string_Sg__iterator(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StrVector___nonzero__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:StrVector___nonzero__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StrVector___nonzero__" "', argument " "1"" of type '" "std::vector< std::string > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  result = (bool)std_vector_Sl_std_string_Sg____nonzero__((std::vector< std::string > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StrVector___bool__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:StrVector___bool__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StrVector___bool__" "', argument " "1"" of type '" "std::vector< std::string > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  result = (bool)std_vector_Sl_std_string_Sg____bool__((std::vector< std::string > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StrVector___len__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::string >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:StrVector___len__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StrVector___len__" "', argument " "1"" of type '" "std::vector< std::string > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  result = std_vector_Sl_std_string_Sg____len__((std::vector< std::string > const *)arg1);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StrVector_pop(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::string >::value_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:StrVector_pop",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StrVector_pop" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  try {
    result = std_vector_Sl_std_string_Sg__pop(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StrVector___getslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::difference_type arg2 ;
  std::vector< std::string >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< std::string,std::allocator< std::string > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:StrVector___getslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StrVector___getslice__" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "StrVector___getslice__" "', argument " "2"" of type '" "std::vector< std::string >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::string >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "StrVector___getslice__" "', argument " "3"" of type '" "std::vector< std::string >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< std::string >::difference_type >(val3);
  try {
    result = (std::vector< std::string,std::allocator< std::string > > *)std_vector_Sl_std_string_Sg____getslice__(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StrVector___setslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::difference_type arg2 ;
  std::vector< std::string >::difference_type arg3 ;
  std::vector< std::string,std::allocator< std::string > > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:StrVector___setslice__",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StrVector___setslice__" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "StrVector___setslice__" "', argument " "2"" of type '" "std::vector< std::string >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::string >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "StrVector___setslice__" "', argument " "3"" of type '" "std::vector< std::string >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< std::string >::difference_type >(val3);
  {
    std::vector<std::string,std::allocator< std::string > > *ptr = (std::vector<std::string,std::allocator< std::string > > *)0;
    res4 = swig::asptr(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "StrVector___setslice__" "', argument " "4"" of type '" "std::vector< std::string,std::allocator< std::string > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "StrVector___setslice__" "', argument " "4"" of type '" "std::vector< std::string,std::allocator< std::string > > const &""'"); 
    }
    arg4 = ptr;
  }
  try {
    std_vector_Sl_std_string_Sg____setslice__(arg1,arg2,arg3,(std::vector< std::string,std::allocator< std::string > > const &)*arg4);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_StrVector___delslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::difference_type arg2 ;
  std::vector< std::string >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:StrVector___delslice__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StrVector___delslice__" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "StrVector___delslice__" "', argument " "2"" of type '" "std::vector< std::string >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::string >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "StrVector___delslice__" "', argument " "3"" of type '" "std::vector< std::string >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< std::string >::difference_type >(val3);
  try {
    std_vector_Sl_std_string_Sg____delslice__(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StrVector___delitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:StrVector___delitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StrVector___delitem__" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "StrVector___delitem__" "', argument " "2"" of type '" "std::vector< std::string >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::string >::difference_type >(val2);
  try {
    std_vector_Sl_std_string_Sg____delitem____SWIG_0(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StrVector___getitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< std::string,std::allocator< std::string > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:StrVector___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StrVector___getitem__" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  {
    arg2 = (PySliceObject *) obj1;
  }
  try {
    result = (std::vector< std::string,std::allocator< std::string > > *)std_vector_Sl_std_string_Sg____getitem____SWIG_0(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StrVector___setitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  std::vector< std::string,std::allocator< std::string > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:StrVector___setitem__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StrVector___setitem__" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  {
    arg2 = (PySliceObject *) obj1;
  }
  {
    std::vector<std::string,std::allocator< std::string > > *ptr = (std::vector<std::string,std::allocator< std::string > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "StrVector___setitem__" "', argument " "3"" of type '" "std::vector< std::string,std::allocator< std::string > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "StrVector___setitem__" "', argument " "3"" of type '" "std::vector< std::string,std::allocator< std::string > > const &""'"); 
    }
    arg3 = ptr;
  }
  try {
    std_vector_Sl_std_string_Sg____setitem____SWIG_0(arg1,arg2,(std::vector< std::string,std::allocator< std::string > > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  catch(std::invalid_argument &_e) {
    SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_StrVector___delitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  PySliceObject *arg2 = (PySliceObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:StrVector___delitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StrVector___delitem__" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  {
    arg2 = (PySliceObject *) obj1;
  }
  try {
    std_vector_Sl_std_string_Sg____delitem____SWIG_1(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StrVector___delitem__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::string,std::allocator< std::string > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_StrVector___delitem____SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::string,std::allocator< std::string > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_StrVector___delitem____SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'StrVector___delitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    __delitem__(std::vector< std::string > *,std::vector< std::string >::difference_type)\n"
    "    __delitem__(std::vector< std::string > *,PySliceObject *)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_StrVector___getitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< std::string >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:StrVector___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StrVector___getitem__" "', argument " "1"" of type '" "std::vector< std::string > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "StrVector___getitem__" "', argument " "2"" of type '" "std::vector< std::string >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::string >::difference_type >(val2);
  try {
    result = (std::vector< std::string >::value_type *) &std_vector_Sl_std_string_Sg____getitem____SWIG_1((std::vector< std::string > const *)arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StrVector___getitem__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::string,std::allocator< std::string > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        return _wrap_StrVector___getitem____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::string,std::allocator< std::string > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_StrVector___getitem____SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'StrVector___getitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    __getitem__(std::vector< std::string > *,PySliceObject *)\n"
    "    __getitem__(std::vector< std::string > const *,std::vector< std::string >::difference_type)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_StrVector___setitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::difference_type arg2 ;
  std::vector< std::string >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:StrVector___setitem__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StrVector___setitem__" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "StrVector___setitem__" "', argument " "2"" of type '" "std::vector< std::string >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::string >::difference_type >(val2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "StrVector___setitem__" "', argument " "3"" of type '" "std::vector< std::string >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "StrVector___setitem__" "', argument " "3"" of type '" "std::vector< std::string >::value_type const &""'"); 
    }
    arg3 = ptr;
  }
  try {
    std_vector_Sl_std_string_Sg____setitem____SWIG_1(arg1,arg2,(std::string const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_StrVector___setitem__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::string,std::allocator< std::string > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PySlice_Check(argv[1]);
      }
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector<std::string,std::allocator< std::string > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_StrVector___setitem____SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::string,std::allocator< std::string > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_StrVector___setitem____SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'StrVector___setitem__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    __setitem__(std::vector< std::string > *,PySliceObject *,std::vector< std::string,std::allocator< std::string > > const &)\n"
    "    __setitem__(std::vector< std::string > *,std::vector< std::string >::difference_type,std::vector< std::string >::value_type const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_StrVector_append(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:StrVector_append",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StrVector_append" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "StrVector_append" "', argument " "2"" of type '" "std::vector< std::string >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "StrVector_append" "', argument " "2"" of type '" "std::vector< std::string >::value_type const &""'"); 
    }
    arg2 = ptr;
  }
  std_vector_Sl_std_string_Sg__append(arg1,(std::string const &)*arg2);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_StrVector__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_StrVector")) SWIG_fail;
  result = (std::vector< std::string > *)new std::vector< std::string >();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_StrVector__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  std::vector< std::string > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_StrVector",&obj0)) SWIG_fail;
  {
    std::vector<std::string,std::allocator< std::string > > *ptr = (std::vector<std::string,std::allocator< std::string > > *)0;
    res1 = swig::asptr(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_StrVector" "', argument " "1"" of type '" "std::vector< std::string > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_StrVector" "', argument " "1"" of type '" "std::vector< std::string > const &""'"); 
    }
    arg1 = ptr;
  }
  result = (std::vector< std::string > *)new std::vector< std::string >((std::vector< std::string > const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_StrVector_empty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:StrVector_empty",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StrVector_empty" "', argument " "1"" of type '" "std::vector< std::string > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  result = (bool)((std::vector< std::string > const *)arg1)->empty();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StrVector_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::string >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:StrVector_size",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StrVector_size" "', argument " "1"" of type '" "std::vector< std::string > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  result = ((std::vector< std::string > const *)arg1)->size();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StrVector_clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:StrVector_clear",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StrVector_clear" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  (arg1)->clear();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StrVector_swap(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:StrVector_swap",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StrVector_swap" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "StrVector_swap" "', argument " "2"" of type '" "std::vector< std::string > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "StrVector_swap" "', argument " "2"" of type '" "std::vector< std::string > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< std::string > * >(argp2);
  (arg1)->swap(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StrVector_get_allocator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::allocator< std::string > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:StrVector_get_allocator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StrVector_get_allocator" "', argument " "1"" of type '" "std::vector< std::string > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  result = ((std::vector< std::string > const *)arg1)->get_allocator();
  resultobj = SWIG_NewPointerObj((new std::vector< std::string >::allocator_type(static_cast< const std::vector< std::string >::allocator_type& >(result))), SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t__allocator_type, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StrVector_begin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::string >::const_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:StrVector_begin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StrVector_begin" "', argument " "1"" of type '" "std::vector< std::string > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  result = ((std::vector< std::string > const *)arg1)->begin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::string >::const_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StrVector_end(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::string >::const_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:StrVector_end",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StrVector_end" "', argument " "1"" of type '" "std::vector< std::string > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  result = ((std::vector< std::string > const *)arg1)->end();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::string >::const_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StrVector_rbegin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::string >::const_reverse_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:StrVector_rbegin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StrVector_rbegin" "', argument " "1"" of type '" "std::vector< std::string > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  result = ((std::vector< std::string > const *)arg1)->rbegin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::string >::const_reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StrVector_rend(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::string >::const_reverse_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:StrVector_rend",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StrVector_rend" "', argument " "1"" of type '" "std::vector< std::string > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  result = ((std::vector< std::string > const *)arg1)->rend();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::string >::const_reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_StrVector__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string >::size_type arg1 ;
  size_t val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::string > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_StrVector",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_StrVector" "', argument " "1"" of type '" "std::vector< std::string >::size_type""'");
  } 
  arg1 = static_cast< std::vector< std::string >::size_type >(val1);
  result = (std::vector< std::string > *)new std::vector< std::string >(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StrVector_pop_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:StrVector_pop_back",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StrVector_pop_back" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  (arg1)->pop_back();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StrVector_resize__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:StrVector_resize",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StrVector_resize" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "StrVector_resize" "', argument " "2"" of type '" "std::vector< std::string >::size_type""'");
  } 
  arg2 = static_cast< std::vector< std::string >::size_type >(val2);
  (arg1)->resize(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StrVector_erase__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::iterator arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< std::string >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:StrVector_erase",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StrVector_erase" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "StrVector_erase" "', argument " "2"" of type '" "std::vector< std::string >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< std::string >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< std::string >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "StrVector_erase" "', argument " "2"" of type '" "std::vector< std::string >::iterator""'");
    }
  }
  result = (arg1)->erase(arg2);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::string >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StrVector_erase__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::iterator arg2 ;
  std::vector< std::string >::iterator arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  swig::SwigPyIterator *iter3 = 0 ;
  int res3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< std::string >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:StrVector_erase",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StrVector_erase" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "StrVector_erase" "', argument " "2"" of type '" "std::vector< std::string >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< std::string >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< std::string >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "StrVector_erase" "', argument " "2"" of type '" "std::vector< std::string >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(obj2, SWIG_as_voidptrptr(&iter3), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res3) || !iter3) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "StrVector_erase" "', argument " "3"" of type '" "std::vector< std::string >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< std::string >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< std::string >::iterator > *>(iter3);
    if (iter_t) {
      arg3 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "StrVector_erase" "', argument " "3"" of type '" "std::vector< std::string >::iterator""'");
    }
  }
  result = (arg1)->erase(arg2,arg3);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::string >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StrVector_erase(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::string,std::allocator< std::string > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< std::string >::iterator > *>(iter) != 0));
      if (_v) {
        return _wrap_StrVector_erase__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::string,std::allocator< std::string > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< std::string >::iterator > *>(iter) != 0));
      if (_v) {
        swig::SwigPyIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[2], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< std::string >::iterator > *>(iter) != 0));
        if (_v) {
          return _wrap_StrVector_erase__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'StrVector_erase'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    erase(std::vector< std::string > *,std::vector< std::string >::iterator)\n"
    "    erase(std::vector< std::string > *,std::vector< std::string >::iterator,std::vector< std::string >::iterator)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_StrVector__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string >::size_type arg1 ;
  std::vector< std::string >::value_type *arg2 = 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< std::string > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_StrVector",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_StrVector" "', argument " "1"" of type '" "std::vector< std::string >::size_type""'");
  } 
  arg1 = static_cast< std::vector< std::string >::size_type >(val1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_StrVector" "', argument " "2"" of type '" "std::vector< std::string >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_StrVector" "', argument " "2"" of type '" "std::vector< std::string >::value_type const &""'"); 
    }
    arg2 = ptr;
  }
  result = (std::vector< std::string > *)new std::vector< std::string >(arg1,(std::vector< std::string >::value_type const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_StrVector(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_StrVector__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_StrVector__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::string,std::allocator< std::string > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_StrVector__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_StrVector__SWIG_3(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_StrVector'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::vector< std::string >()\n"
    "    std::vector< std::string >(std::vector< std::string > const &)\n"
    "    std::vector< std::string >(std::vector< std::string >::size_type)\n"
    "    std::vector< std::string >(std::vector< std::string >::size_type,std::vector< std::string >::value_type const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_StrVector_push_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:StrVector_push_back",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StrVector_push_back" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "StrVector_push_back" "', argument " "2"" of type '" "std::vector< std::string >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "StrVector_push_back" "', argument " "2"" of type '" "std::vector< std::string >::value_type const &""'"); 
    }
    arg2 = ptr;
  }
  (arg1)->push_back((std::vector< std::string >::value_type const &)*arg2);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_StrVector_front(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::string >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:StrVector_front",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StrVector_front" "', argument " "1"" of type '" "std::vector< std::string > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  result = (std::vector< std::string >::value_type *) &((std::vector< std::string > const *)arg1)->front();
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StrVector_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::string >::value_type *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:StrVector_back",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StrVector_back" "', argument " "1"" of type '" "std::vector< std::string > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  result = (std::vector< std::string >::value_type *) &((std::vector< std::string > const *)arg1)->back();
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StrVector_assign(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::size_type arg2 ;
  std::vector< std::string >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:StrVector_assign",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StrVector_assign" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "StrVector_assign" "', argument " "2"" of type '" "std::vector< std::string >::size_type""'");
  } 
  arg2 = static_cast< std::vector< std::string >::size_type >(val2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "StrVector_assign" "', argument " "3"" of type '" "std::vector< std::string >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "StrVector_assign" "', argument " "3"" of type '" "std::vector< std::string >::value_type const &""'"); 
    }
    arg3 = ptr;
  }
  (arg1)->assign(arg2,(std::vector< std::string >::value_type const &)*arg3);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_StrVector_resize__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::size_type arg2 ;
  std::vector< std::string >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:StrVector_resize",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StrVector_resize" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "StrVector_resize" "', argument " "2"" of type '" "std::vector< std::string >::size_type""'");
  } 
  arg2 = static_cast< std::vector< std::string >::size_type >(val2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "StrVector_resize" "', argument " "3"" of type '" "std::vector< std::string >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "StrVector_resize" "', argument " "3"" of type '" "std::vector< std::string >::value_type const &""'"); 
    }
    arg3 = ptr;
  }
  (arg1)->resize(arg2,(std::vector< std::string >::value_type const &)*arg3);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_StrVector_resize(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::string,std::allocator< std::string > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_StrVector_resize__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::string,std::allocator< std::string > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_StrVector_resize__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'StrVector_resize'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    resize(std::vector< std::string > *,std::vector< std::string >::size_type)\n"
    "    resize(std::vector< std::string > *,std::vector< std::string >::size_type,std::vector< std::string >::value_type const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_StrVector_insert__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::iterator arg2 ;
  std::vector< std::string >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< std::string >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:StrVector_insert",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StrVector_insert" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "StrVector_insert" "', argument " "2"" of type '" "std::vector< std::string >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< std::string >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< std::string >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "StrVector_insert" "', argument " "2"" of type '" "std::vector< std::string >::iterator""'");
    }
  }
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "StrVector_insert" "', argument " "3"" of type '" "std::vector< std::string >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "StrVector_insert" "', argument " "3"" of type '" "std::vector< std::string >::value_type const &""'"); 
    }
    arg3 = ptr;
  }
  result = (arg1)->insert(arg2,(std::vector< std::string >::value_type const &)*arg3);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector< std::string >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_StrVector_insert__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::iterator arg2 ;
  std::vector< std::string >::size_type arg3 ;
  std::vector< std::string >::value_type *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  size_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:StrVector_insert",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StrVector_insert" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "StrVector_insert" "', argument " "2"" of type '" "std::vector< std::string >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::vector< std::string >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< std::string >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "StrVector_insert" "', argument " "2"" of type '" "std::vector< std::string >::iterator""'");
    }
  }
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "StrVector_insert" "', argument " "3"" of type '" "std::vector< std::string >::size_type""'");
  } 
  arg3 = static_cast< std::vector< std::string >::size_type >(val3);
  {
    std::string *ptr = (std::string *)0;
    res4 = SWIG_AsPtr_std_string(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "StrVector_insert" "', argument " "4"" of type '" "std::vector< std::string >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "StrVector_insert" "', argument " "4"" of type '" "std::vector< std::string >::value_type const &""'"); 
    }
    arg4 = ptr;
  }
  (arg1)->insert(arg2,arg3,(std::vector< std::string >::value_type const &)*arg4);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_StrVector_insert(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 4); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::string,std::allocator< std::string > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< std::string >::iterator > *>(iter) != 0));
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_StrVector_insert__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::string,std::allocator< std::string > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< std::string >::iterator > *>(iter) != 0));
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = SWIG_AsPtr_std_string(argv[3], (std::string**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_StrVector_insert__SWIG_1(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'StrVector_insert'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    insert(std::vector< std::string > *,std::vector< std::string >::iterator,std::vector< std::string >::value_type const &)\n"
    "    insert(std::vector< std::string > *,std::vector< std::string >::iterator,std::vector< std::string >::size_type,std::vector< std::string >::value_type const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_StrVector_reserve(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:StrVector_reserve",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StrVector_reserve" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "StrVector_reserve" "', argument " "2"" of type '" "std::vector< std::string >::size_type""'");
  } 
  arg2 = static_cast< std::vector< std::string >::size_type >(val2);
  (arg1)->reserve(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StrVector_capacity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::string >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:StrVector_capacity",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StrVector_capacity" "', argument " "1"" of type '" "std::vector< std::string > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  result = ((std::vector< std::string > const *)arg1)->capacity();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_StrVector(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_StrVector",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_StrVector" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *StrVector_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_pair_ss__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::pair< std::string,std::string > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_pair_ss")) SWIG_fail;
  result = (std::pair< std::string,std::string > *)new std::pair< std::string,std::string >();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__pairT_std__string_std__string_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_pair_ss__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  std::string arg2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::pair< std::string,std::string > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_pair_ss",&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_pair_ss" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_pair_ss" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  result = (std::pair< std::string,std::string > *)new std::pair< std::string,std::string >(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__pairT_std__string_std__string_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_pair_ss__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::pair< std::string,std::string > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  std::pair< std::string,std::string > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_pair_ss",&obj0)) SWIG_fail;
  {
    std::pair<std::string,std::string > *ptr = (std::pair<std::string,std::string > *)0;
    res1 = swig::asptr(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_pair_ss" "', argument " "1"" of type '" "std::pair< std::string,std::string > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_pair_ss" "', argument " "1"" of type '" "std::pair< std::string,std::string > const &""'"); 
    }
    arg1 = ptr;
  }
  result = (std::pair< std::string,std::string > *)new std::pair< std::string,std::string >((std::pair< std::string,std::string > const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__pairT_std__string_std__string_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_pair_ss(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_pair_ss__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::pair<std::string,std::string >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_pair_ss__SWIG_2(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_pair_ss__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_pair_ss'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::pair< std::string,std::string >()\n"
    "    std::pair< std::string,std::string >(std::string,std::string)\n"
    "    std::pair< std::string,std::string >(std::pair< std::string,std::string > const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_pair_ss_first_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::pair< std::string,std::string > *arg1 = (std::pair< std::string,std::string > *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:pair_ss_first_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__pairT_std__string_std__string_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pair_ss_first_set" "', argument " "1"" of type '" "std::pair< std::string,std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::pair< std::string,std::string > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "pair_ss_first_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "pair_ss_first_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  if (arg1) (arg1)->first = *arg2;
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_pair_ss_first_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::pair< std::string,std::string > *arg1 = (std::pair< std::string,std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:pair_ss_first_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__pairT_std__string_std__string_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pair_ss_first_get" "', argument " "1"" of type '" "std::pair< std::string,std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::pair< std::string,std::string > * >(argp1);
  result = (std::string *) & ((arg1)->first);
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_pair_ss_second_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::pair< std::string,std::string > *arg1 = (std::pair< std::string,std::string > *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:pair_ss_second_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__pairT_std__string_std__string_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pair_ss_second_set" "', argument " "1"" of type '" "std::pair< std::string,std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::pair< std::string,std::string > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "pair_ss_second_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "pair_ss_second_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  if (arg1) (arg1)->second = *arg2;
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_pair_ss_second_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::pair< std::string,std::string > *arg1 = (std::pair< std::string,std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:pair_ss_second_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__pairT_std__string_std__string_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pair_ss_second_get" "', argument " "1"" of type '" "std::pair< std::string,std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::pair< std::string,std::string > * >(argp1);
  result = (std::string *) & ((arg1)->second);
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_pair_ss(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::pair< std::string,std::string > *arg1 = (std::pair< std::string,std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_pair_ss",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__pairT_std__string_std__string_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_pair_ss" "', argument " "1"" of type '" "std::pair< std::string,std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::pair< std::string,std::string > * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *pair_ss_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__pairT_std__string_std__string_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_StrMap__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::less< std::string > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::map< std::string,std::string > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_StrMap",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_std__lessT_std__string_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_StrMap" "', argument " "1"" of type '" "std::less< std::string > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_StrMap" "', argument " "1"" of type '" "std::less< std::string > const &""'"); 
  }
  arg1 = reinterpret_cast< std::less< std::string > * >(argp1);
  result = (std::map< std::string,std::string > *)new std::map< std::string,std::string >((std::less< std::string > const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__mapT_std__string_std__string_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_std__string_t_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StrMap_iterator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::map< std::string,std::string > *arg1 = (std::map< std::string,std::string > *) 0 ;
  PyObject **arg2 = (PyObject **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  arg2 = &obj0;
  if (!PyArg_ParseTuple(args,(char *)"O:StrMap_iterator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__mapT_std__string_std__string_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_std__string_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StrMap_iterator" "', argument " "1"" of type '" "std::map< std::string,std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,std::string > * >(argp1);
  result = (swig::SwigPyIterator *)std_map_Sl_std_string_Sc_std_string_Sg__iterator(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StrMap___nonzero__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::map< std::string,std::string > *arg1 = (std::map< std::string,std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:StrMap___nonzero__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__mapT_std__string_std__string_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_std__string_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StrMap___nonzero__" "', argument " "1"" of type '" "std::map< std::string,std::string > const *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,std::string > * >(argp1);
  result = (bool)std_map_Sl_std_string_Sc_std_string_Sg____nonzero__((std::map< std::string,std::string > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StrMap___bool__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::map< std::string,std::string > *arg1 = (std::map< std::string,std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:StrMap___bool__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__mapT_std__string_std__string_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_std__string_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StrMap___bool__" "', argument " "1"" of type '" "std::map< std::string,std::string > const *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,std::string > * >(argp1);
  result = (bool)std_map_Sl_std_string_Sc_std_string_Sg____bool__((std::map< std::string,std::string > const *)arg1);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StrMap___len__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::map< std::string,std::string > *arg1 = (std::map< std::string,std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::map< std::string,std::string >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:StrMap___len__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__mapT_std__string_std__string_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_std__string_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StrMap___len__" "', argument " "1"" of type '" "std::map< std::string,std::string > const *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,std::string > * >(argp1);
  result = std_map_Sl_std_string_Sc_std_string_Sg____len__((std::map< std::string,std::string > const *)arg1);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StrMap___getitem__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::map< std::string,std::string > *arg1 = (std::map< std::string,std::string > *) 0 ;
  std::map< std::string,std::string >::key_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::map< std::string,std::string >::mapped_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:StrMap___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__mapT_std__string_std__string_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_std__string_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StrMap___getitem__" "', argument " "1"" of type '" "std::map< std::string,std::string > const *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,std::string > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "StrMap___getitem__" "', argument " "2"" of type '" "std::map< std::string,std::string >::key_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "StrMap___getitem__" "', argument " "2"" of type '" "std::map< std::string,std::string >::key_type const &""'"); 
    }
    arg2 = ptr;
  }
  try {
    result = std_map_Sl_std_string_Sc_std_string_Sg____getitem__((std::map< std::string,std::string > const *)arg1,(std::string const &)*arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_StrMap___delitem__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::map< std::string,std::string > *arg1 = (std::map< std::string,std::string > *) 0 ;
  std::map< std::string,std::string >::key_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:StrMap___delitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__mapT_std__string_std__string_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_std__string_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StrMap___delitem__" "', argument " "1"" of type '" "std::map< std::string,std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,std::string > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "StrMap___delitem__" "', argument " "2"" of type '" "std::map< std::string,std::string >::key_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "StrMap___delitem__" "', argument " "2"" of type '" "std::map< std::string,std::string >::key_type const &""'"); 
    }
    arg2 = ptr;
  }
  try {
    std_map_Sl_std_string_Sc_std_string_Sg____delitem__(arg1,(std::string const &)*arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_StrMap_has_key(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::map< std::string,std::string > *arg1 = (std::map< std::string,std::string > *) 0 ;
  std::map< std::string,std::string >::key_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:StrMap_has_key",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__mapT_std__string_std__string_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_std__string_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StrMap_has_key" "', argument " "1"" of type '" "std::map< std::string,std::string > const *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,std::string > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "StrMap_has_key" "', argument " "2"" of type '" "std::map< std::string,std::string >::key_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "StrMap_has_key" "', argument " "2"" of type '" "std::map< std::string,std::string >::key_type const &""'"); 
    }
    arg2 = ptr;
  }
  result = (bool)std_map_Sl_std_string_Sc_std_string_Sg__has_key((std::map< std::string,std::string > const *)arg1,(std::string const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_StrMap_keys(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::map< std::string,std::string > *arg1 = (std::map< std::string,std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:StrMap_keys",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__mapT_std__string_std__string_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_std__string_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StrMap_keys" "', argument " "1"" of type '" "std::map< std::string,std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,std::string > * >(argp1);
  result = (PyObject *)std_map_Sl_std_string_Sc_std_string_Sg__keys(arg1);
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StrMap_values(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::map< std::string,std::string > *arg1 = (std::map< std::string,std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:StrMap_values",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__mapT_std__string_std__string_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_std__string_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StrMap_values" "', argument " "1"" of type '" "std::map< std::string,std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,std::string > * >(argp1);
  result = (PyObject *)std_map_Sl_std_string_Sc_std_string_Sg__values(arg1);
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StrMap_items(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::map< std::string,std::string > *arg1 = (std::map< std::string,std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:StrMap_items",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__mapT_std__string_std__string_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_std__string_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StrMap_items" "', argument " "1"" of type '" "std::map< std::string,std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,std::string > * >(argp1);
  result = (PyObject *)std_map_Sl_std_string_Sc_std_string_Sg__items(arg1);
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StrMap___contains__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::map< std::string,std::string > *arg1 = (std::map< std::string,std::string > *) 0 ;
  std::map< std::string,std::string >::key_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:StrMap___contains__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__mapT_std__string_std__string_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_std__string_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StrMap___contains__" "', argument " "1"" of type '" "std::map< std::string,std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,std::string > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "StrMap___contains__" "', argument " "2"" of type '" "std::map< std::string,std::string >::key_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "StrMap___contains__" "', argument " "2"" of type '" "std::map< std::string,std::string >::key_type const &""'"); 
    }
    arg2 = ptr;
  }
  result = (bool)std_map_Sl_std_string_Sc_std_string_Sg____contains__(arg1,(std::string const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_StrMap_key_iterator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::map< std::string,std::string > *arg1 = (std::map< std::string,std::string > *) 0 ;
  PyObject **arg2 = (PyObject **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  arg2 = &obj0;
  if (!PyArg_ParseTuple(args,(char *)"O:StrMap_key_iterator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__mapT_std__string_std__string_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_std__string_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StrMap_key_iterator" "', argument " "1"" of type '" "std::map< std::string,std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,std::string > * >(argp1);
  result = (swig::SwigPyIterator *)std_map_Sl_std_string_Sc_std_string_Sg__key_iterator(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StrMap_value_iterator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::map< std::string,std::string > *arg1 = (std::map< std::string,std::string > *) 0 ;
  PyObject **arg2 = (PyObject **) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  swig::SwigPyIterator *result = 0 ;
  
  arg2 = &obj0;
  if (!PyArg_ParseTuple(args,(char *)"O:StrMap_value_iterator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__mapT_std__string_std__string_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_std__string_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StrMap_value_iterator" "', argument " "1"" of type '" "std::map< std::string,std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,std::string > * >(argp1);
  result = (swig::SwigPyIterator *)std_map_Sl_std_string_Sc_std_string_Sg__value_iterator(arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StrMap___setitem__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::map< std::string,std::string > *arg1 = (std::map< std::string,std::string > *) 0 ;
  std::map< std::string,std::string >::key_type *arg2 = 0 ;
  std::map< std::string,std::string >::mapped_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:StrMap___setitem__",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__mapT_std__string_std__string_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_std__string_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StrMap___setitem__" "', argument " "1"" of type '" "std::map< std::string,std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,std::string > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "StrMap___setitem__" "', argument " "2"" of type '" "std::map< std::string,std::string >::key_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "StrMap___setitem__" "', argument " "2"" of type '" "std::map< std::string,std::string >::key_type const &""'"); 
    }
    arg2 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "StrMap___setitem__" "', argument " "3"" of type '" "std::map< std::string,std::string >::mapped_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "StrMap___setitem__" "', argument " "3"" of type '" "std::map< std::string,std::string >::mapped_type const &""'"); 
    }
    arg3 = ptr;
  }
  try {
    std_map_Sl_std_string_Sc_std_string_Sg____setitem__(arg1,(std::string const &)*arg2,(std::string const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
  }
  
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_StrMap__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::map< std::string,std::string > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_StrMap")) SWIG_fail;
  result = (std::map< std::string,std::string > *)new std::map< std::string,std::string >();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__mapT_std__string_std__string_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_std__string_t_t_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_StrMap__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::map< std::string,std::string > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  std::map< std::string,std::string > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_StrMap",&obj0)) SWIG_fail;
  {
    std::map<std::string,std::string,std::less< std::string >,std::allocator< std::pair< std::string const,std::string > > > *ptr = (std::map<std::string,std::string,std::less< std::string >,std::allocator< std::pair< std::string const,std::string > > > *)0;
    res1 = swig::asptr(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_StrMap" "', argument " "1"" of type '" "std::map< std::string,std::string > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_StrMap" "', argument " "1"" of type '" "std::map< std::string,std::string > const &""'"); 
    }
    arg1 = ptr;
  }
  result = (std::map< std::string,std::string > *)new std::map< std::string,std::string >((std::map< std::string,std::string > const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__mapT_std__string_std__string_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_std__string_t_t_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_StrMap(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 1); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_StrMap__SWIG_1(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__lessT_std__string_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_StrMap__SWIG_0(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::map<std::string,std::string,std::less< std::string >,std::allocator< std::pair< std::string const,std::string > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_StrMap__SWIG_2(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_StrMap'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::map< std::string,std::string >(std::less< std::string > const &)\n"
    "    std::map< std::string,std::string >()\n"
    "    std::map< std::string,std::string >(std::map< std::string,std::string > const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_StrMap_empty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::map< std::string,std::string > *arg1 = (std::map< std::string,std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:StrMap_empty",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__mapT_std__string_std__string_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_std__string_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StrMap_empty" "', argument " "1"" of type '" "std::map< std::string,std::string > const *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,std::string > * >(argp1);
  result = (bool)((std::map< std::string,std::string > const *)arg1)->empty();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StrMap_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::map< std::string,std::string > *arg1 = (std::map< std::string,std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::map< std::string,std::string >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:StrMap_size",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__mapT_std__string_std__string_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_std__string_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StrMap_size" "', argument " "1"" of type '" "std::map< std::string,std::string > const *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,std::string > * >(argp1);
  result = ((std::map< std::string,std::string > const *)arg1)->size();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StrMap_clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::map< std::string,std::string > *arg1 = (std::map< std::string,std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:StrMap_clear",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__mapT_std__string_std__string_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_std__string_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StrMap_clear" "', argument " "1"" of type '" "std::map< std::string,std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,std::string > * >(argp1);
  (arg1)->clear();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StrMap_swap(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::map< std::string,std::string > *arg1 = (std::map< std::string,std::string > *) 0 ;
  std::map< std::string,std::string > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:StrMap_swap",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__mapT_std__string_std__string_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_std__string_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StrMap_swap" "', argument " "1"" of type '" "std::map< std::string,std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,std::string > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__mapT_std__string_std__string_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_std__string_t_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "StrMap_swap" "', argument " "2"" of type '" "std::map< std::string,std::string > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "StrMap_swap" "', argument " "2"" of type '" "std::map< std::string,std::string > &""'"); 
  }
  arg2 = reinterpret_cast< std::map< std::string,std::string > * >(argp2);
  (arg1)->swap(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StrMap_get_allocator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::map< std::string,std::string > *arg1 = (std::map< std::string,std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::allocator< std::pair< std::string const,std::string > > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:StrMap_get_allocator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__mapT_std__string_std__string_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_std__string_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StrMap_get_allocator" "', argument " "1"" of type '" "std::map< std::string,std::string > const *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,std::string > * >(argp1);
  result = ((std::map< std::string,std::string > const *)arg1)->get_allocator();
  resultobj = SWIG_NewPointerObj((new std::map< std::string,std::string >::allocator_type(static_cast< const std::map< std::string,std::string >::allocator_type& >(result))), SWIGTYPE_p_std__mapT_std__string_std__string_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_std__string_t_t_t__allocator_type, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StrMap_begin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::map< std::string,std::string > *arg1 = (std::map< std::string,std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::map< std::string,std::string >::const_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:StrMap_begin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__mapT_std__string_std__string_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_std__string_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StrMap_begin" "', argument " "1"" of type '" "std::map< std::string,std::string > const *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,std::string > * >(argp1);
  result = ((std::map< std::string,std::string > const *)arg1)->begin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::map< std::string,std::string >::const_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StrMap_end(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::map< std::string,std::string > *arg1 = (std::map< std::string,std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::map< std::string,std::string >::const_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:StrMap_end",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__mapT_std__string_std__string_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_std__string_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StrMap_end" "', argument " "1"" of type '" "std::map< std::string,std::string > const *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,std::string > * >(argp1);
  result = ((std::map< std::string,std::string > const *)arg1)->end();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::map< std::string,std::string >::const_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StrMap_rbegin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::map< std::string,std::string > *arg1 = (std::map< std::string,std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::map< std::string,std::string >::const_reverse_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:StrMap_rbegin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__mapT_std__string_std__string_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_std__string_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StrMap_rbegin" "', argument " "1"" of type '" "std::map< std::string,std::string > const *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,std::string > * >(argp1);
  result = ((std::map< std::string,std::string > const *)arg1)->rbegin();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::map< std::string,std::string >::const_reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StrMap_rend(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::map< std::string,std::string > *arg1 = (std::map< std::string,std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::map< std::string,std::string >::const_reverse_iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:StrMap_rend",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__mapT_std__string_std__string_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_std__string_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StrMap_rend" "', argument " "1"" of type '" "std::map< std::string,std::string > const *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,std::string > * >(argp1);
  result = ((std::map< std::string,std::string > const *)arg1)->rend();
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::map< std::string,std::string >::const_reverse_iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StrMap_erase__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::map< std::string,std::string > *arg1 = (std::map< std::string,std::string > *) 0 ;
  std::map< std::string,std::string >::key_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::map< std::string,std::string >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:StrMap_erase",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__mapT_std__string_std__string_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_std__string_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StrMap_erase" "', argument " "1"" of type '" "std::map< std::string,std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,std::string > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "StrMap_erase" "', argument " "2"" of type '" "std::map< std::string,std::string >::key_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "StrMap_erase" "', argument " "2"" of type '" "std::map< std::string,std::string >::key_type const &""'"); 
    }
    arg2 = ptr;
  }
  result = (arg1)->erase((std::map< std::string,std::string >::key_type const &)*arg2);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_StrMap_count(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::map< std::string,std::string > *arg1 = (std::map< std::string,std::string > *) 0 ;
  std::map< std::string,std::string >::key_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::map< std::string,std::string >::size_type result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:StrMap_count",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__mapT_std__string_std__string_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_std__string_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StrMap_count" "', argument " "1"" of type '" "std::map< std::string,std::string > const *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,std::string > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "StrMap_count" "', argument " "2"" of type '" "std::map< std::string,std::string >::key_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "StrMap_count" "', argument " "2"" of type '" "std::map< std::string,std::string >::key_type const &""'"); 
    }
    arg2 = ptr;
  }
  result = ((std::map< std::string,std::string > const *)arg1)->count((std::map< std::string,std::string >::key_type const &)*arg2);
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_StrMap_erase__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::map< std::string,std::string > *arg1 = (std::map< std::string,std::string > *) 0 ;
  std::map< std::string,std::string >::iterator arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:StrMap_erase",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__mapT_std__string_std__string_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_std__string_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StrMap_erase" "', argument " "1"" of type '" "std::map< std::string,std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,std::string > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "StrMap_erase" "', argument " "2"" of type '" "std::map< std::string,std::string >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::map< std::string,std::string >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::map< std::string,std::string >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "StrMap_erase" "', argument " "2"" of type '" "std::map< std::string,std::string >::iterator""'");
    }
  }
  (arg1)->erase(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StrMap_erase__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::map< std::string,std::string > *arg1 = (std::map< std::string,std::string > *) 0 ;
  std::map< std::string,std::string >::iterator arg2 ;
  std::map< std::string,std::string >::iterator arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::SwigPyIterator *iter2 = 0 ;
  int res2 ;
  swig::SwigPyIterator *iter3 = 0 ;
  int res3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:StrMap_erase",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__mapT_std__string_std__string_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_std__string_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StrMap_erase" "', argument " "1"" of type '" "std::map< std::string,std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,std::string > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "StrMap_erase" "', argument " "2"" of type '" "std::map< std::string,std::string >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::map< std::string,std::string >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::map< std::string,std::string >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "StrMap_erase" "', argument " "2"" of type '" "std::map< std::string,std::string >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(obj2, SWIG_as_voidptrptr(&iter3), swig::SwigPyIterator::descriptor(), 0);
  if (!SWIG_IsOK(res3) || !iter3) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "StrMap_erase" "', argument " "3"" of type '" "std::map< std::string,std::string >::iterator""'");
  } else {
    swig::SwigPyIterator_T<std::map< std::string,std::string >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::map< std::string,std::string >::iterator > *>(iter3);
    if (iter_t) {
      arg3 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "StrMap_erase" "', argument " "3"" of type '" "std::map< std::string,std::string >::iterator""'");
    }
  }
  (arg1)->erase(arg2,arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StrMap_erase(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::map<std::string,std::string,std::less< std::string >,std::allocator< std::pair< std::string const,std::string > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::map< std::string,std::string >::iterator > *>(iter) != 0));
      if (_v) {
        return _wrap_StrMap_erase__SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::map<std::string,std::string,std::less< std::string >,std::allocator< std::pair< std::string const,std::string > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_StrMap_erase__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::map<std::string,std::string,std::less< std::string >,std::allocator< std::pair< std::string const,std::string > > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::SwigPyIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::map< std::string,std::string >::iterator > *>(iter) != 0));
      if (_v) {
        swig::SwigPyIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[2], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::map< std::string,std::string >::iterator > *>(iter) != 0));
        if (_v) {
          return _wrap_StrMap_erase__SWIG_2(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'StrMap_erase'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    erase(std::map< std::string,std::string > *,std::map< std::string,std::string >::key_type const &)\n"
    "    erase(std::map< std::string,std::string > *,std::map< std::string,std::string >::iterator)\n"
    "    erase(std::map< std::string,std::string > *,std::map< std::string,std::string >::iterator,std::map< std::string,std::string >::iterator)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_StrMap_find(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::map< std::string,std::string > *arg1 = (std::map< std::string,std::string > *) 0 ;
  std::map< std::string,std::string >::key_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::map< std::string,std::string >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:StrMap_find",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__mapT_std__string_std__string_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_std__string_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StrMap_find" "', argument " "1"" of type '" "std::map< std::string,std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,std::string > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "StrMap_find" "', argument " "2"" of type '" "std::map< std::string,std::string >::key_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "StrMap_find" "', argument " "2"" of type '" "std::map< std::string,std::string >::key_type const &""'"); 
    }
    arg2 = ptr;
  }
  result = (arg1)->find((std::map< std::string,std::string >::key_type const &)*arg2);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::map< std::string,std::string >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_StrMap_lower_bound(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::map< std::string,std::string > *arg1 = (std::map< std::string,std::string > *) 0 ;
  std::map< std::string,std::string >::key_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::map< std::string,std::string >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:StrMap_lower_bound",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__mapT_std__string_std__string_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_std__string_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StrMap_lower_bound" "', argument " "1"" of type '" "std::map< std::string,std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,std::string > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "StrMap_lower_bound" "', argument " "2"" of type '" "std::map< std::string,std::string >::key_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "StrMap_lower_bound" "', argument " "2"" of type '" "std::map< std::string,std::string >::key_type const &""'"); 
    }
    arg2 = ptr;
  }
  result = (arg1)->lower_bound((std::map< std::string,std::string >::key_type const &)*arg2);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::map< std::string,std::string >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_StrMap_upper_bound(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::map< std::string,std::string > *arg1 = (std::map< std::string,std::string > *) 0 ;
  std::map< std::string,std::string >::key_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::map< std::string,std::string >::iterator result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:StrMap_upper_bound",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__mapT_std__string_std__string_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_std__string_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StrMap_upper_bound" "', argument " "1"" of type '" "std::map< std::string,std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,std::string > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "StrMap_upper_bound" "', argument " "2"" of type '" "std::map< std::string,std::string >::key_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "StrMap_upper_bound" "', argument " "2"" of type '" "std::map< std::string,std::string >::key_type const &""'"); 
    }
    arg2 = ptr;
  }
  result = (arg1)->upper_bound((std::map< std::string,std::string >::key_type const &)*arg2);
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::map< std::string,std::string >::iterator & >(result)),
    swig::SwigPyIterator::descriptor(),SWIG_POINTER_OWN);
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_StrMap(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::map< std::string,std::string > *arg1 = (std::map< std::string,std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_StrMap",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__mapT_std__string_std__string_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_std__string_t_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_StrMap" "', argument " "1"" of type '" "std::map< std::string,std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< std::string,std::string > * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *StrMap_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__mapT_std__string_std__string_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_std__string_t_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN int Swig_var_MaxStrLength_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable MaxStrLength is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_MaxStrLength_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(MM::MaxStrLength));
  return pyobj;
}


SWIGINTERN int Swig_var_g_Keyword_Name_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable g_Keyword_Name is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_g_Keyword_Name_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(MM::g_Keyword_Name);
  return pyobj;
}


SWIGINTERN int Swig_var_g_Keyword_Description_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable g_Keyword_Description is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_g_Keyword_Description_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(MM::g_Keyword_Description);
  return pyobj;
}


SWIGINTERN int Swig_var_g_Keyword_CameraName_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable g_Keyword_CameraName is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_g_Keyword_CameraName_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(MM::g_Keyword_CameraName);
  return pyobj;
}


SWIGINTERN int Swig_var_g_Keyword_CameraID_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable g_Keyword_CameraID is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_g_Keyword_CameraID_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(MM::g_Keyword_CameraID);
  return pyobj;
}


SWIGINTERN int Swig_var_g_Keyword_CameraChannelName_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable g_Keyword_CameraChannelName is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_g_Keyword_CameraChannelName_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(MM::g_Keyword_CameraChannelName);
  return pyobj;
}


SWIGINTERN int Swig_var_g_Keyword_CameraChannelIndex_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable g_Keyword_CameraChannelIndex is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_g_Keyword_CameraChannelIndex_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(MM::g_Keyword_CameraChannelIndex);
  return pyobj;
}


SWIGINTERN int Swig_var_g_Keyword_Binning_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable g_Keyword_Binning is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_g_Keyword_Binning_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(MM::g_Keyword_Binning);
  return pyobj;
}


SWIGINTERN int Swig_var_g_Keyword_Exposure_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable g_Keyword_Exposure is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_g_Keyword_Exposure_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(MM::g_Keyword_Exposure);
  return pyobj;
}


SWIGINTERN int Swig_var_g_Keyword_ActualExposure_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable g_Keyword_ActualExposure is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_g_Keyword_ActualExposure_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(MM::g_Keyword_ActualExposure);
  return pyobj;
}


SWIGINTERN int Swig_var_g_Keyword_ActualInterval_ms_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable g_Keyword_ActualInterval_ms is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_g_Keyword_ActualInterval_ms_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(MM::g_Keyword_ActualInterval_ms);
  return pyobj;
}


SWIGINTERN int Swig_var_g_Keyword_Interval_ms_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable g_Keyword_Interval_ms is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_g_Keyword_Interval_ms_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(MM::g_Keyword_Interval_ms);
  return pyobj;
}


SWIGINTERN int Swig_var_g_Keyword_Elapsed_Time_ms_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable g_Keyword_Elapsed_Time_ms is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_g_Keyword_Elapsed_Time_ms_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(MM::g_Keyword_Elapsed_Time_ms);
  return pyobj;
}


SWIGINTERN int Swig_var_g_Keyword_PixelType_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable g_Keyword_PixelType is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_g_Keyword_PixelType_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(MM::g_Keyword_PixelType);
  return pyobj;
}


SWIGINTERN int Swig_var_g_Keyword_ReadoutTime_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable g_Keyword_ReadoutTime is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_g_Keyword_ReadoutTime_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(MM::g_Keyword_ReadoutTime);
  return pyobj;
}


SWIGINTERN int Swig_var_g_Keyword_ReadoutMode_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable g_Keyword_ReadoutMode is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_g_Keyword_ReadoutMode_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(MM::g_Keyword_ReadoutMode);
  return pyobj;
}


SWIGINTERN int Swig_var_g_Keyword_Gain_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable g_Keyword_Gain is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_g_Keyword_Gain_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(MM::g_Keyword_Gain);
  return pyobj;
}


SWIGINTERN int Swig_var_g_Keyword_EMGain_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable g_Keyword_EMGain is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_g_Keyword_EMGain_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(MM::g_Keyword_EMGain);
  return pyobj;
}


SWIGINTERN int Swig_var_g_Keyword_Offset_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable g_Keyword_Offset is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_g_Keyword_Offset_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(MM::g_Keyword_Offset);
  return pyobj;
}


SWIGINTERN int Swig_var_g_Keyword_CCDTemperature_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable g_Keyword_CCDTemperature is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_g_Keyword_CCDTemperature_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(MM::g_Keyword_CCDTemperature);
  return pyobj;
}


SWIGINTERN int Swig_var_g_Keyword_CCDTemperatureSetPoint_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable g_Keyword_CCDTemperatureSetPoint is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_g_Keyword_CCDTemperatureSetPoint_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(MM::g_Keyword_CCDTemperatureSetPoint);
  return pyobj;
}


SWIGINTERN int Swig_var_g_Keyword_State_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable g_Keyword_State is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_g_Keyword_State_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(MM::g_Keyword_State);
  return pyobj;
}


SWIGINTERN int Swig_var_g_Keyword_Label_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable g_Keyword_Label is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_g_Keyword_Label_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(MM::g_Keyword_Label);
  return pyobj;
}


SWIGINTERN int Swig_var_g_Keyword_Position_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable g_Keyword_Position is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_g_Keyword_Position_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(MM::g_Keyword_Position);
  return pyobj;
}


SWIGINTERN int Swig_var_g_Keyword_Type_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable g_Keyword_Type is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_g_Keyword_Type_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(MM::g_Keyword_Type);
  return pyobj;
}


SWIGINTERN int Swig_var_g_Keyword_Delay_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable g_Keyword_Delay is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_g_Keyword_Delay_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(MM::g_Keyword_Delay);
  return pyobj;
}


SWIGINTERN int Swig_var_g_Keyword_BaudRate_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable g_Keyword_BaudRate is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_g_Keyword_BaudRate_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(MM::g_Keyword_BaudRate);
  return pyobj;
}


SWIGINTERN int Swig_var_g_Keyword_DataBits_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable g_Keyword_DataBits is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_g_Keyword_DataBits_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(MM::g_Keyword_DataBits);
  return pyobj;
}


SWIGINTERN int Swig_var_g_Keyword_StopBits_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable g_Keyword_StopBits is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_g_Keyword_StopBits_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(MM::g_Keyword_StopBits);
  return pyobj;
}


SWIGINTERN int Swig_var_g_Keyword_Parity_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable g_Keyword_Parity is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_g_Keyword_Parity_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(MM::g_Keyword_Parity);
  return pyobj;
}


SWIGINTERN int Swig_var_g_Keyword_Handshaking_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable g_Keyword_Handshaking is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_g_Keyword_Handshaking_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(MM::g_Keyword_Handshaking);
  return pyobj;
}


SWIGINTERN int Swig_var_g_Keyword_DelayBetweenCharsMs_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable g_Keyword_DelayBetweenCharsMs is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_g_Keyword_DelayBetweenCharsMs_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(MM::g_Keyword_DelayBetweenCharsMs);
  return pyobj;
}


SWIGINTERN int Swig_var_g_Keyword_Port_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable g_Keyword_Port is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_g_Keyword_Port_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(MM::g_Keyword_Port);
  return pyobj;
}


SWIGINTERN int Swig_var_g_Keyword_AnswerTimeout_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable g_Keyword_AnswerTimeout is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_g_Keyword_AnswerTimeout_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(MM::g_Keyword_AnswerTimeout);
  return pyobj;
}


SWIGINTERN int Swig_var_g_Keyword_Speed_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable g_Keyword_Speed is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_g_Keyword_Speed_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(MM::g_Keyword_Speed);
  return pyobj;
}


SWIGINTERN int Swig_var_g_Keyword_CoreDevice_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable g_Keyword_CoreDevice is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_g_Keyword_CoreDevice_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(MM::g_Keyword_CoreDevice);
  return pyobj;
}


SWIGINTERN int Swig_var_g_Keyword_CoreInitialize_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable g_Keyword_CoreInitialize is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_g_Keyword_CoreInitialize_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(MM::g_Keyword_CoreInitialize);
  return pyobj;
}


SWIGINTERN int Swig_var_g_Keyword_CoreCamera_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable g_Keyword_CoreCamera is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_g_Keyword_CoreCamera_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(MM::g_Keyword_CoreCamera);
  return pyobj;
}


SWIGINTERN int Swig_var_g_Keyword_CoreShutter_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable g_Keyword_CoreShutter is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_g_Keyword_CoreShutter_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(MM::g_Keyword_CoreShutter);
  return pyobj;
}


SWIGINTERN int Swig_var_g_Keyword_CoreXYStage_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable g_Keyword_CoreXYStage is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_g_Keyword_CoreXYStage_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(MM::g_Keyword_CoreXYStage);
  return pyobj;
}


SWIGINTERN int Swig_var_g_Keyword_CoreFocus_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable g_Keyword_CoreFocus is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_g_Keyword_CoreFocus_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(MM::g_Keyword_CoreFocus);
  return pyobj;
}


SWIGINTERN int Swig_var_g_Keyword_CoreAutoFocus_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable g_Keyword_CoreAutoFocus is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_g_Keyword_CoreAutoFocus_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(MM::g_Keyword_CoreAutoFocus);
  return pyobj;
}


SWIGINTERN int Swig_var_g_Keyword_CoreAutoShutter_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable g_Keyword_CoreAutoShutter is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_g_Keyword_CoreAutoShutter_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(MM::g_Keyword_CoreAutoShutter);
  return pyobj;
}


SWIGINTERN int Swig_var_g_Keyword_CoreChannelGroup_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable g_Keyword_CoreChannelGroup is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_g_Keyword_CoreChannelGroup_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(MM::g_Keyword_CoreChannelGroup);
  return pyobj;
}


SWIGINTERN int Swig_var_g_Keyword_CoreImageProcessor_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable g_Keyword_CoreImageProcessor is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_g_Keyword_CoreImageProcessor_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(MM::g_Keyword_CoreImageProcessor);
  return pyobj;
}


SWIGINTERN int Swig_var_g_Keyword_CoreSLM_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable g_Keyword_CoreSLM is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_g_Keyword_CoreSLM_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(MM::g_Keyword_CoreSLM);
  return pyobj;
}


SWIGINTERN int Swig_var_g_Keyword_CoreGalvo_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable g_Keyword_CoreGalvo is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_g_Keyword_CoreGalvo_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(MM::g_Keyword_CoreGalvo);
  return pyobj;
}


SWIGINTERN int Swig_var_g_Keyword_CoreTimeoutMs_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable g_Keyword_CoreTimeoutMs is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_g_Keyword_CoreTimeoutMs_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(MM::g_Keyword_CoreTimeoutMs);
  return pyobj;
}


SWIGINTERN int Swig_var_g_Keyword_Channel_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable g_Keyword_Channel is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_g_Keyword_Channel_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(MM::g_Keyword_Channel);
  return pyobj;
}


SWIGINTERN int Swig_var_g_Keyword_Version_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable g_Keyword_Version is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_g_Keyword_Version_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(MM::g_Keyword_Version);
  return pyobj;
}


SWIGINTERN int Swig_var_g_Keyword_ColorMode_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable g_Keyword_ColorMode is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_g_Keyword_ColorMode_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(MM::g_Keyword_ColorMode);
  return pyobj;
}


SWIGINTERN int Swig_var_g_Keyword_Transpose_SwapXY_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable g_Keyword_Transpose_SwapXY is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_g_Keyword_Transpose_SwapXY_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(MM::g_Keyword_Transpose_SwapXY);
  return pyobj;
}


SWIGINTERN int Swig_var_g_Keyword_Transpose_MirrorX_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable g_Keyword_Transpose_MirrorX is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_g_Keyword_Transpose_MirrorX_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(MM::g_Keyword_Transpose_MirrorX);
  return pyobj;
}


SWIGINTERN int Swig_var_g_Keyword_Transpose_MirrorY_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable g_Keyword_Transpose_MirrorY is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_g_Keyword_Transpose_MirrorY_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(MM::g_Keyword_Transpose_MirrorY);
  return pyobj;
}


SWIGINTERN int Swig_var_g_Keyword_Transpose_Correction_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable g_Keyword_Transpose_Correction is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_g_Keyword_Transpose_Correction_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(MM::g_Keyword_Transpose_Correction);
  return pyobj;
}


SWIGINTERN int Swig_var_g_Keyword_Closed_Position_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable g_Keyword_Closed_Position is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_g_Keyword_Closed_Position_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(MM::g_Keyword_Closed_Position);
  return pyobj;
}


SWIGINTERN int Swig_var_g_Keyword_HubID_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable g_Keyword_HubID is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_g_Keyword_HubID_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(MM::g_Keyword_HubID);
  return pyobj;
}


SWIGINTERN int Swig_var_g_Keyword_Meatdata_Exposure_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable g_Keyword_Meatdata_Exposure is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_g_Keyword_Meatdata_Exposure_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(MM::g_Keyword_Meatdata_Exposure);
  return pyobj;
}


SWIGINTERN int Swig_var_g_Keyword_Metadata_Score_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable g_Keyword_Metadata_Score is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_g_Keyword_Metadata_Score_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(MM::g_Keyword_Metadata_Score);
  return pyobj;
}


SWIGINTERN int Swig_var_g_Keyword_Metadata_ImageNumber_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable g_Keyword_Metadata_ImageNumber is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_g_Keyword_Metadata_ImageNumber_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(MM::g_Keyword_Metadata_ImageNumber);
  return pyobj;
}


SWIGINTERN int Swig_var_g_Keyword_Metadata_StartTime_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable g_Keyword_Metadata_StartTime is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_g_Keyword_Metadata_StartTime_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(MM::g_Keyword_Metadata_StartTime);
  return pyobj;
}


SWIGINTERN int Swig_var_g_Keyword_Metadata_ROI_X_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable g_Keyword_Metadata_ROI_X is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_g_Keyword_Metadata_ROI_X_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(MM::g_Keyword_Metadata_ROI_X);
  return pyobj;
}


SWIGINTERN int Swig_var_g_Keyword_Metadata_ROI_Y_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable g_Keyword_Metadata_ROI_Y is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_g_Keyword_Metadata_ROI_Y_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(MM::g_Keyword_Metadata_ROI_Y);
  return pyobj;
}


SWIGINTERN int Swig_var_g_Keyword_Metadata_TimeInCore_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable g_Keyword_Metadata_TimeInCore is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_g_Keyword_Metadata_TimeInCore_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(MM::g_Keyword_Metadata_TimeInCore);
  return pyobj;
}


SWIGINTERN int Swig_var_g_FieldDelimiters_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable g_FieldDelimiters is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_g_FieldDelimiters_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(MM::g_FieldDelimiters);
  return pyobj;
}


SWIGINTERN int Swig_var_g_CFGCommand_Device_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable g_CFGCommand_Device is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_g_CFGCommand_Device_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(MM::g_CFGCommand_Device);
  return pyobj;
}


SWIGINTERN int Swig_var_g_CFGCommand_Label_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable g_CFGCommand_Label is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_g_CFGCommand_Label_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(MM::g_CFGCommand_Label);
  return pyobj;
}


SWIGINTERN int Swig_var_g_CFGCommand_Property_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable g_CFGCommand_Property is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_g_CFGCommand_Property_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(MM::g_CFGCommand_Property);
  return pyobj;
}


SWIGINTERN int Swig_var_g_CFGCommand_Configuration_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable g_CFGCommand_Configuration is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_g_CFGCommand_Configuration_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(MM::g_CFGCommand_Configuration);
  return pyobj;
}


SWIGINTERN int Swig_var_g_CFGCommand_ConfigGroup_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable g_CFGCommand_ConfigGroup is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_g_CFGCommand_ConfigGroup_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(MM::g_CFGCommand_ConfigGroup);
  return pyobj;
}


SWIGINTERN int Swig_var_g_CFGCommand_Equipment_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable g_CFGCommand_Equipment is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_g_CFGCommand_Equipment_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(MM::g_CFGCommand_Equipment);
  return pyobj;
}


SWIGINTERN int Swig_var_g_CFGCommand_Delay_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable g_CFGCommand_Delay is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_g_CFGCommand_Delay_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(MM::g_CFGCommand_Delay);
  return pyobj;
}


SWIGINTERN int Swig_var_g_CFGCommand_ImageSynchro_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable g_CFGCommand_ImageSynchro is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_g_CFGCommand_ImageSynchro_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(MM::g_CFGCommand_ImageSynchro);
  return pyobj;
}


SWIGINTERN int Swig_var_g_CFGCommand_ConfigPixelSize_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable g_CFGCommand_ConfigPixelSize is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_g_CFGCommand_ConfigPixelSize_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(MM::g_CFGCommand_ConfigPixelSize);
  return pyobj;
}


SWIGINTERN int Swig_var_g_CFGCommand_PixelSize_um_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable g_CFGCommand_PixelSize_um is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_g_CFGCommand_PixelSize_um_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(MM::g_CFGCommand_PixelSize_um);
  return pyobj;
}


SWIGINTERN int Swig_var_g_CFGCommand_PixelSizeAffine_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable g_CFGCommand_PixelSizeAffine is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_g_CFGCommand_PixelSizeAffine_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(MM::g_CFGCommand_PixelSizeAffine);
  return pyobj;
}


SWIGINTERN int Swig_var_g_CFGCommand_ParentID_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable g_CFGCommand_ParentID is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_g_CFGCommand_ParentID_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(MM::g_CFGCommand_ParentID);
  return pyobj;
}


SWIGINTERN int Swig_var_g_CFGCommand_FocusDirection_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable g_CFGCommand_FocusDirection is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_g_CFGCommand_FocusDirection_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(MM::g_CFGCommand_FocusDirection);
  return pyobj;
}


SWIGINTERN int Swig_var_g_CFGGroup_System_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable g_CFGGroup_System is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_g_CFGGroup_System_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(MM::g_CFGGroup_System);
  return pyobj;
}


SWIGINTERN int Swig_var_g_CFGGroup_System_Startup_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable g_CFGGroup_System_Startup is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_g_CFGGroup_System_Startup_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(MM::g_CFGGroup_System_Startup);
  return pyobj;
}


SWIGINTERN int Swig_var_g_CFGGroup_System_Shutdown_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable g_CFGGroup_System_Shutdown is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_g_CFGGroup_System_Shutdown_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(MM::g_CFGGroup_System_Shutdown);
  return pyobj;
}


SWIGINTERN int Swig_var_g_CFGGroup_PixelSizeUm_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable g_CFGGroup_PixelSizeUm is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_g_CFGGroup_PixelSizeUm_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(MM::g_CFGGroup_PixelSizeUm);
  return pyobj;
}


SWIGINTERN int Swig_var__DATABITS_5_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable _DATABITS_5 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var__DATABITS_5_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(MM::_DATABITS_5));
  return pyobj;
}


SWIGINTERN int Swig_var__DATABITS_6_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable _DATABITS_6 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var__DATABITS_6_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(MM::_DATABITS_6));
  return pyobj;
}


SWIGINTERN int Swig_var__DATABITS_7_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable _DATABITS_7 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var__DATABITS_7_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(MM::_DATABITS_7));
  return pyobj;
}


SWIGINTERN int Swig_var__DATABITS_8_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable _DATABITS_8 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var__DATABITS_8_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(MM::_DATABITS_8));
  return pyobj;
}


SWIGINTERN int Swig_var__FLOWCONTROL_NONE_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable _FLOWCONTROL_NONE is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var__FLOWCONTROL_NONE_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(MM::_FLOWCONTROL_NONE));
  return pyobj;
}


SWIGINTERN int Swig_var__FLOWCONTROL_RTSCTS_IN_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable _FLOWCONTROL_RTSCTS_IN is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var__FLOWCONTROL_RTSCTS_IN_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(MM::_FLOWCONTROL_RTSCTS_IN));
  return pyobj;
}


SWIGINTERN int Swig_var__FLOWCONTROL_RTSCTS_OUT_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable _FLOWCONTROL_RTSCTS_OUT is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var__FLOWCONTROL_RTSCTS_OUT_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(MM::_FLOWCONTROL_RTSCTS_OUT));
  return pyobj;
}


SWIGINTERN int Swig_var__FLOWCONTROL_XONXOFF_IN_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable _FLOWCONTROL_XONXOFF_IN is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var__FLOWCONTROL_XONXOFF_IN_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(MM::_FLOWCONTROL_XONXOFF_IN));
  return pyobj;
}


SWIGINTERN int Swig_var__FLOWCONTROL_XONXOFF_OUT_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable _FLOWCONTROL_XONXOFF_OUT is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var__FLOWCONTROL_XONXOFF_OUT_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(MM::_FLOWCONTROL_XONXOFF_OUT));
  return pyobj;
}


SWIGINTERN int Swig_var__PARITY_EVEN_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable _PARITY_EVEN is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var__PARITY_EVEN_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(MM::_PARITY_EVEN));
  return pyobj;
}


SWIGINTERN int Swig_var__PARITY_MARK_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable _PARITY_MARK is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var__PARITY_MARK_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(MM::_PARITY_MARK));
  return pyobj;
}


SWIGINTERN int Swig_var__PARITY_NONE_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable _PARITY_NONE is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var__PARITY_NONE_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(MM::_PARITY_NONE));
  return pyobj;
}


SWIGINTERN int Swig_var__PARITY_ODD_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable _PARITY_ODD is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var__PARITY_ODD_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(MM::_PARITY_ODD));
  return pyobj;
}


SWIGINTERN int Swig_var__PARITY_SPACE_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable _PARITY_SPACE is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var__PARITY_SPACE_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(MM::_PARITY_SPACE));
  return pyobj;
}


SWIGINTERN int Swig_var__STOPBITS_1_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable _STOPBITS_1 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var__STOPBITS_1_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(MM::_STOPBITS_1));
  return pyobj;
}


SWIGINTERN int Swig_var__STOPBITS_1_5_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable _STOPBITS_1_5 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var__STOPBITS_1_5_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(MM::_STOPBITS_1_5));
  return pyobj;
}


SWIGINTERN int Swig_var__STOPBITS_2_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable _STOPBITS_2 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var__STOPBITS_2_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(MM::_STOPBITS_2));
  return pyobj;
}


SWIGINTERN PyObject *_wrap_new_CMMError__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  CMMError::Code arg2 ;
  int res1 = SWIG_OLDOBJ ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  CMMError *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_CMMError",&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_CMMError" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_CMMError" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_CMMError" "', argument " "2"" of type '" "CMMError::Code""'");
  } 
  arg2 = static_cast< CMMError::Code >(val2);
  result = (CMMError *)new CMMError((std::string const &)*arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_CMMError, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_CMMError__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  CMMError *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_CMMError",&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_CMMError" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_CMMError" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  result = (CMMError *)new CMMError((std::string const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_CMMError, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_CMMError__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  CMMError::Code arg2 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  CMMError *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_CMMError",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(obj0, &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_CMMError" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_CMMError" "', argument " "2"" of type '" "CMMError::Code""'");
  } 
  arg2 = static_cast< CMMError::Code >(val2);
  result = (CMMError *)new CMMError((char const *)arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_CMMError, SWIG_POINTER_NEW |  0 );
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_CMMError__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  PyObject * obj0 = 0 ;
  CMMError *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_CMMError",&obj0)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(obj0, &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_CMMError" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  result = (CMMError *)new CMMError((char const *)arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_CMMError, SWIG_POINTER_NEW |  0 );
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_CMMError__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  CMMError::Code arg2 ;
  CMMError *arg3 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  CMMError *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_CMMError",&obj0,&obj1,&obj2)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_CMMError" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_CMMError" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_CMMError" "', argument " "2"" of type '" "CMMError::Code""'");
  } 
  arg2 = static_cast< CMMError::Code >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_CMMError,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_CMMError" "', argument " "3"" of type '" "CMMError const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_CMMError" "', argument " "3"" of type '" "CMMError const &""'"); 
  }
  arg3 = reinterpret_cast< CMMError * >(argp3);
  result = (CMMError *)new CMMError((std::string const &)*arg1,arg2,(CMMError const &)*arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_CMMError, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_CMMError__SWIG_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  CMMError::Code arg2 ;
  CMMError *arg3 = 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  CMMError *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_CMMError",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(obj0, &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_CMMError" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_CMMError" "', argument " "2"" of type '" "CMMError::Code""'");
  } 
  arg2 = static_cast< CMMError::Code >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_CMMError,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_CMMError" "', argument " "3"" of type '" "CMMError const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_CMMError" "', argument " "3"" of type '" "CMMError const &""'"); 
  }
  arg3 = reinterpret_cast< CMMError * >(argp3);
  result = (CMMError *)new CMMError((char const *)arg1,arg2,(CMMError const &)*arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_CMMError, SWIG_POINTER_NEW |  0 );
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_CMMError__SWIG_6(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  CMMError *arg2 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  CMMError *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_CMMError",&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_CMMError" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_CMMError" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_CMMError,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_CMMError" "', argument " "2"" of type '" "CMMError const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_CMMError" "', argument " "2"" of type '" "CMMError const &""'"); 
  }
  arg2 = reinterpret_cast< CMMError * >(argp2);
  result = (CMMError *)new CMMError((std::string const &)*arg1,(CMMError const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_CMMError, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_CMMError__SWIG_7(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  CMMError *arg2 = 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  CMMError *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_CMMError",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(obj0, &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_CMMError" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_CMMError,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_CMMError" "', argument " "2"" of type '" "CMMError const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_CMMError" "', argument " "2"" of type '" "CMMError const &""'"); 
  }
  arg2 = reinterpret_cast< CMMError * >(argp2);
  result = (CMMError *)new CMMError((char const *)arg1,(CMMError const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_CMMError, SWIG_POINTER_NEW |  0 );
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_CMMError__SWIG_8(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CMMError *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  CMMError *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_CMMError",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_CMMError,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_CMMError" "', argument " "1"" of type '" "CMMError const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_CMMError" "', argument " "1"" of type '" "CMMError const &""'"); 
  }
  arg1 = reinterpret_cast< CMMError * >(argp1);
  result = (CMMError *)new CMMError((CMMError const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_CMMError, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_CMMError(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_CMMError, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_CMMError__SWIG_8(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_CMMError__SWIG_1(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_CMMError__SWIG_3(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_CMMError, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_CMMError__SWIG_6(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_CMMError__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_CMMError, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_CMMError__SWIG_7(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_CMMError__SWIG_2(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_CMMError, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_new_CMMError__SWIG_4(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_CMMError, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_new_CMMError__SWIG_5(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_CMMError'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    CMMError(std::string const &,CMMError::Code)\n"
    "    CMMError(std::string const &)\n"
    "    CMMError(char const *,CMMError::Code)\n"
    "    CMMError(char const *)\n"
    "    CMMError(std::string const &,CMMError::Code,CMMError const &)\n"
    "    CMMError(char const *,CMMError::Code,CMMError const &)\n"
    "    CMMError(std::string const &,CMMError const &)\n"
    "    CMMError(char const *,CMMError const &)\n"
    "    CMMError(CMMError const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_CMMError(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CMMError *arg1 = (CMMError *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_CMMError",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CMMError, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_CMMError" "', argument " "1"" of type '" "CMMError *""'"); 
  }
  arg1 = reinterpret_cast< CMMError * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMMError_what(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CMMError *arg1 = (CMMError *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  char *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CMMError_what",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CMMError, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CMMError_what" "', argument " "1"" of type '" "CMMError const *""'"); 
  }
  arg1 = reinterpret_cast< CMMError * >(argp1);
  result = (char *)((CMMError const *)arg1)->what();
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMMError_getMsg(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CMMError *arg1 = (CMMError *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CMMError_getMsg",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CMMError, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CMMError_getMsg" "', argument " "1"" of type '" "CMMError const *""'"); 
  }
  arg1 = reinterpret_cast< CMMError * >(argp1);
  result = ((CMMError const *)arg1)->getMsg();
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMMError_getFullMsg(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CMMError *arg1 = (CMMError *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CMMError_getFullMsg",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CMMError, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CMMError_getFullMsg" "', argument " "1"" of type '" "CMMError const *""'"); 
  }
  arg1 = reinterpret_cast< CMMError * >(argp1);
  result = ((CMMError const *)arg1)->getFullMsg();
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMMError_getCode(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CMMError *arg1 = (CMMError *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  CMMError::Code result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CMMError_getCode",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CMMError, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CMMError_getCode" "', argument " "1"" of type '" "CMMError const *""'"); 
  }
  arg1 = reinterpret_cast< CMMError * >(argp1);
  result = (CMMError::Code)((CMMError const *)arg1)->getCode();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMMError_getSpecificCode(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CMMError *arg1 = (CMMError *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  CMMError::Code result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CMMError_getSpecificCode",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CMMError, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CMMError_getSpecificCode" "', argument " "1"" of type '" "CMMError const *""'"); 
  }
  arg1 = reinterpret_cast< CMMError * >(argp1);
  result = (CMMError::Code)((CMMError const *)arg1)->getSpecificCode();
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMMError_getUnderlyingError(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CMMError *arg1 = (CMMError *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  CMMError *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CMMError_getUnderlyingError",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CMMError, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CMMError_getUnderlyingError" "', argument " "1"" of type '" "CMMError const *""'"); 
  }
  arg1 = reinterpret_cast< CMMError * >(argp1);
  result = (CMMError *)((CMMError const *)arg1)->getUnderlyingError();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_CMMError, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMMError___getitem__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CMMError *arg1 = (CMMError *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CMMError___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CMMError, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CMMError___getitem__" "', argument " "1"" of type '" "CMMError *""'"); 
  }
  arg1 = reinterpret_cast< CMMError * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CMMError___getitem__" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = CMMError___getitem__(arg1,arg2);
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMMError___str__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CMMError *arg1 = (CMMError *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CMMError___str__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CMMError, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CMMError___str__" "', argument " "1"" of type '" "CMMError *""'"); 
  }
  arg1 = reinterpret_cast< CMMError * >(argp1);
  result = CMMError___str__(arg1);
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *CMMError_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_CMMError, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_PropertySetting__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  bool arg4 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PropertySetting *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:new_PropertySetting",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(obj0, &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_PropertySetting" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_PropertySetting" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_PropertySetting" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  ecode4 = SWIG_AsVal_bool(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_PropertySetting" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = static_cast< bool >(val4);
  result = (PropertySetting *)new PropertySetting((char const *)arg1,(char const *)arg2,(char const *)arg3,arg4);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_PropertySetting, SWIG_POINTER_NEW |  0 );
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_PropertySetting__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PropertySetting *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_PropertySetting",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(obj0, &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_PropertySetting" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_PropertySetting" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_PropertySetting" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  result = (PropertySetting *)new PropertySetting((char const *)arg1,(char const *)arg2,(char const *)arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_PropertySetting, SWIG_POINTER_NEW |  0 );
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_PropertySetting__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  PropertySetting *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_PropertySetting")) SWIG_fail;
  result = (PropertySetting *)new PropertySetting();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_PropertySetting, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_PropertySetting(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 4); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_PropertySetting__SWIG_2(self, args);
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_new_PropertySetting__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_bool(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_new_PropertySetting__SWIG_0(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_PropertySetting'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    PropertySetting(char const *,char const *,char const *,bool)\n"
    "    PropertySetting(char const *,char const *,char const *)\n"
    "    PropertySetting()\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_PropertySetting(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  PropertySetting *arg1 = (PropertySetting *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_PropertySetting",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_PropertySetting, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_PropertySetting" "', argument " "1"" of type '" "PropertySetting *""'"); 
  }
  arg1 = reinterpret_cast< PropertySetting * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PropertySetting_getDeviceLabel(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  PropertySetting *arg1 = (PropertySetting *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PropertySetting_getDeviceLabel",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_PropertySetting, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PropertySetting_getDeviceLabel" "', argument " "1"" of type '" "PropertySetting const *""'"); 
  }
  arg1 = reinterpret_cast< PropertySetting * >(argp1);
  result = ((PropertySetting const *)arg1)->getDeviceLabel();
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PropertySetting_getPropertyName(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  PropertySetting *arg1 = (PropertySetting *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PropertySetting_getPropertyName",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_PropertySetting, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PropertySetting_getPropertyName" "', argument " "1"" of type '" "PropertySetting const *""'"); 
  }
  arg1 = reinterpret_cast< PropertySetting * >(argp1);
  result = ((PropertySetting const *)arg1)->getPropertyName();
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PropertySetting_getReadOnly(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  PropertySetting *arg1 = (PropertySetting *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PropertySetting_getReadOnly",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_PropertySetting, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PropertySetting_getReadOnly" "', argument " "1"" of type '" "PropertySetting const *""'"); 
  }
  arg1 = reinterpret_cast< PropertySetting * >(argp1);
  result = (bool)((PropertySetting const *)arg1)->getReadOnly();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PropertySetting_getPropertyValue(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  PropertySetting *arg1 = (PropertySetting *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PropertySetting_getPropertyValue",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_PropertySetting, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PropertySetting_getPropertyValue" "', argument " "1"" of type '" "PropertySetting const *""'"); 
  }
  arg1 = reinterpret_cast< PropertySetting * >(argp1);
  result = ((PropertySetting const *)arg1)->getPropertyValue();
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PropertySetting_getKey(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  PropertySetting *arg1 = (PropertySetting *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PropertySetting_getKey",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_PropertySetting, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PropertySetting_getKey" "', argument " "1"" of type '" "PropertySetting const *""'"); 
  }
  arg1 = reinterpret_cast< PropertySetting * >(argp1);
  result = ((PropertySetting const *)arg1)->getKey();
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PropertySetting_generateKey(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PropertySetting_generateKey",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(obj0, &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PropertySetting_generateKey" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PropertySetting_generateKey" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  result = PropertySetting::generateKey((char const *)arg1,(char const *)arg2);
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_PropertySetting_getVerbose(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  PropertySetting *arg1 = (PropertySetting *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PropertySetting_getVerbose",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_PropertySetting, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PropertySetting_getVerbose" "', argument " "1"" of type '" "PropertySetting const *""'"); 
  }
  arg1 = reinterpret_cast< PropertySetting * >(argp1);
  result = ((PropertySetting const *)arg1)->getVerbose();
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PropertySetting_isEqualTo(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  PropertySetting *arg1 = (PropertySetting *) 0 ;
  PropertySetting *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PropertySetting_isEqualTo",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_PropertySetting, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PropertySetting_isEqualTo" "', argument " "1"" of type '" "PropertySetting *""'"); 
  }
  arg1 = reinterpret_cast< PropertySetting * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_PropertySetting,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PropertySetting_isEqualTo" "', argument " "2"" of type '" "PropertySetting const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PropertySetting_isEqualTo" "', argument " "2"" of type '" "PropertySetting const &""'"); 
  }
  arg2 = reinterpret_cast< PropertySetting * >(argp2);
  result = (bool)(arg1)->isEqualTo((PropertySetting const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *PropertySetting_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_PropertySetting, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_PropertyPair__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PropertyPair *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_PropertyPair",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(obj0, &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_PropertyPair" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_PropertyPair" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  result = (PropertyPair *)new PropertyPair((char const *)arg1,(char const *)arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_PropertyPair, SWIG_POINTER_NEW |  0 );
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_PropertyPair__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  PropertyPair *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_PropertyPair")) SWIG_fail;
  result = (PropertyPair *)new PropertyPair();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_PropertyPair, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_PropertyPair(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_PropertyPair__SWIG_1(self, args);
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_PropertyPair__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_PropertyPair'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    PropertyPair(char const *,char const *)\n"
    "    PropertyPair()\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_PropertyPair(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  PropertyPair *arg1 = (PropertyPair *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_PropertyPair",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_PropertyPair, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_PropertyPair" "', argument " "1"" of type '" "PropertyPair *""'"); 
  }
  arg1 = reinterpret_cast< PropertyPair * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PropertyPair_getPropertyName(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  PropertyPair *arg1 = (PropertyPair *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PropertyPair_getPropertyName",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_PropertyPair, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PropertyPair_getPropertyName" "', argument " "1"" of type '" "PropertyPair const *""'"); 
  }
  arg1 = reinterpret_cast< PropertyPair * >(argp1);
  result = ((PropertyPair const *)arg1)->getPropertyName();
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PropertyPair_getPropertyValue(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  PropertyPair *arg1 = (PropertyPair *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PropertyPair_getPropertyValue",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_PropertyPair, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PropertyPair_getPropertyValue" "', argument " "1"" of type '" "PropertyPair const *""'"); 
  }
  arg1 = reinterpret_cast< PropertyPair * >(argp1);
  result = ((PropertyPair const *)arg1)->getPropertyValue();
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *PropertyPair_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_PropertyPair, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_Configuration(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Configuration *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_Configuration")) SWIG_fail;
  result = (Configuration *)new Configuration();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Configuration, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Configuration(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Configuration *arg1 = (Configuration *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_Configuration",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Configuration, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Configuration" "', argument " "1"" of type '" "Configuration *""'"); 
  }
  arg1 = reinterpret_cast< Configuration * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Configuration_addSetting(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Configuration *arg1 = (Configuration *) 0 ;
  PropertySetting *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Configuration_addSetting",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Configuration, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Configuration_addSetting" "', argument " "1"" of type '" "Configuration *""'"); 
  }
  arg1 = reinterpret_cast< Configuration * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_PropertySetting,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Configuration_addSetting" "', argument " "2"" of type '" "PropertySetting const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Configuration_addSetting" "', argument " "2"" of type '" "PropertySetting const &""'"); 
  }
  arg2 = reinterpret_cast< PropertySetting * >(argp2);
  (arg1)->addSetting((PropertySetting const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Configuration_deleteSetting(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Configuration *arg1 = (Configuration *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Configuration_deleteSetting",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Configuration, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Configuration_deleteSetting" "', argument " "1"" of type '" "Configuration *""'"); 
  }
  arg1 = reinterpret_cast< Configuration * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Configuration_deleteSetting" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Configuration_deleteSetting" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  (arg1)->deleteSetting((char const *)arg2,(char const *)arg3);
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Configuration_isPropertyIncluded(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Configuration *arg1 = (Configuration *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Configuration_isPropertyIncluded",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Configuration, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Configuration_isPropertyIncluded" "', argument " "1"" of type '" "Configuration *""'"); 
  }
  arg1 = reinterpret_cast< Configuration * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Configuration_isPropertyIncluded" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Configuration_isPropertyIncluded" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  result = (bool)(arg1)->isPropertyIncluded((char const *)arg2,(char const *)arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Configuration_isSettingIncluded(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Configuration *arg1 = (Configuration *) 0 ;
  PropertySetting *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Configuration_isSettingIncluded",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Configuration, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Configuration_isSettingIncluded" "', argument " "1"" of type '" "Configuration *""'"); 
  }
  arg1 = reinterpret_cast< Configuration * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_PropertySetting,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Configuration_isSettingIncluded" "', argument " "2"" of type '" "PropertySetting const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Configuration_isSettingIncluded" "', argument " "2"" of type '" "PropertySetting const &""'"); 
  }
  arg2 = reinterpret_cast< PropertySetting * >(argp2);
  result = (bool)(arg1)->isSettingIncluded((PropertySetting const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Configuration_isConfigurationIncluded(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Configuration *arg1 = (Configuration *) 0 ;
  Configuration *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Configuration_isConfigurationIncluded",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Configuration, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Configuration_isConfigurationIncluded" "', argument " "1"" of type '" "Configuration *""'"); 
  }
  arg1 = reinterpret_cast< Configuration * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Configuration,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Configuration_isConfigurationIncluded" "', argument " "2"" of type '" "Configuration const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Configuration_isConfigurationIncluded" "', argument " "2"" of type '" "Configuration const &""'"); 
  }
  arg2 = reinterpret_cast< Configuration * >(argp2);
  result = (bool)(arg1)->isConfigurationIncluded((Configuration const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Configuration_getSetting__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Configuration *arg1 = (Configuration *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PropertySetting result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Configuration_getSetting",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Configuration, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Configuration_getSetting" "', argument " "1"" of type '" "Configuration const *""'"); 
  }
  arg1 = reinterpret_cast< Configuration * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Configuration_getSetting" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  try {
    result = ((Configuration const *)arg1)->getSetting(arg2);
  }
  catch(CMMError &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new CMMError(static_cast< const CMMError& >(_e))),SWIGTYPE_p_CMMError,SWIG_POINTER_OWN), "CMMError", SWIGTYPE_p_CMMError); SWIG_fail;
  }
  
  resultobj = SWIG_NewPointerObj((new PropertySetting(static_cast< const PropertySetting& >(result))), SWIGTYPE_p_PropertySetting, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Configuration_getSetting__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Configuration *arg1 = (Configuration *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PropertySetting result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Configuration_getSetting",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Configuration, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Configuration_getSetting" "', argument " "1"" of type '" "Configuration *""'"); 
  }
  arg1 = reinterpret_cast< Configuration * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Configuration_getSetting" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Configuration_getSetting" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  result = (arg1)->getSetting((char const *)arg2,(char const *)arg3);
  resultobj = SWIG_NewPointerObj((new PropertySetting(static_cast< const PropertySetting& >(result))), SWIGTYPE_p_PropertySetting, SWIG_POINTER_OWN |  0 );
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Configuration_getSetting(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Configuration, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Configuration_getSetting__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Configuration, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_Configuration_getSetting__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'Configuration_getSetting'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    getSetting(Configuration const *,size_t)\n"
    "    getSetting(Configuration *,char const *,char const *)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Configuration_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Configuration *arg1 = (Configuration *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  size_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Configuration_size",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Configuration, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Configuration_size" "', argument " "1"" of type '" "Configuration const *""'"); 
  }
  arg1 = reinterpret_cast< Configuration * >(argp1);
  result = ((Configuration const *)arg1)->size();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Configuration_getVerbose(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Configuration *arg1 = (Configuration *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Configuration_getVerbose",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Configuration, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Configuration_getVerbose" "', argument " "1"" of type '" "Configuration const *""'"); 
  }
  arg1 = reinterpret_cast< Configuration * >(argp1);
  result = ((Configuration const *)arg1)->getVerbose();
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Configuration_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Configuration, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_PropertyBlock(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  PropertyBlock *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_PropertyBlock")) SWIG_fail;
  result = (PropertyBlock *)new PropertyBlock();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_PropertyBlock, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_PropertyBlock(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  PropertyBlock *arg1 = (PropertyBlock *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_PropertyBlock",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_PropertyBlock, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_PropertyBlock" "', argument " "1"" of type '" "PropertyBlock *""'"); 
  }
  arg1 = reinterpret_cast< PropertyBlock * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PropertyBlock_addPair(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  PropertyBlock *arg1 = (PropertyBlock *) 0 ;
  PropertyPair *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PropertyBlock_addPair",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_PropertyBlock, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PropertyBlock_addPair" "', argument " "1"" of type '" "PropertyBlock *""'"); 
  }
  arg1 = reinterpret_cast< PropertyBlock * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_PropertyPair,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PropertyBlock_addPair" "', argument " "2"" of type '" "PropertyPair const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PropertyBlock_addPair" "', argument " "2"" of type '" "PropertyPair const &""'"); 
  }
  arg2 = reinterpret_cast< PropertyPair * >(argp2);
  (arg1)->addPair((PropertyPair const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PropertyBlock_getPair(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  PropertyBlock *arg1 = (PropertyBlock *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PropertyPair result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PropertyBlock_getPair",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_PropertyBlock, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PropertyBlock_getPair" "', argument " "1"" of type '" "PropertyBlock const *""'"); 
  }
  arg1 = reinterpret_cast< PropertyBlock * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PropertyBlock_getPair" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  try {
    result = ((PropertyBlock const *)arg1)->getPair(arg2);
  }
  catch(CMMError &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new CMMError(static_cast< const CMMError& >(_e))),SWIGTYPE_p_CMMError,SWIG_POINTER_OWN), "CMMError", SWIGTYPE_p_CMMError); SWIG_fail;
  }
  
  resultobj = SWIG_NewPointerObj((new PropertyPair(static_cast< const PropertyPair& >(result))), SWIGTYPE_p_PropertyPair, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PropertyBlock_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  PropertyBlock *arg1 = (PropertyBlock *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  size_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PropertyBlock_size",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_PropertyBlock, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PropertyBlock_size" "', argument " "1"" of type '" "PropertyBlock const *""'"); 
  }
  arg1 = reinterpret_cast< PropertyBlock * >(argp1);
  result = ((PropertyBlock const *)arg1)->size();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PropertyBlock_getValue(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  PropertyBlock *arg1 = (PropertyBlock *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PropertyBlock_getValue",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_PropertyBlock, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PropertyBlock_getValue" "', argument " "1"" of type '" "PropertyBlock const *""'"); 
  }
  arg1 = reinterpret_cast< PropertyBlock * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PropertyBlock_getValue" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  try {
    result = ((PropertyBlock const *)arg1)->getValue((char const *)arg2);
  }
  catch(CMMError &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new CMMError(static_cast< const CMMError& >(_e))),SWIGTYPE_p_CMMError,SWIG_POINTER_OWN), "CMMError", SWIGTYPE_p_CMMError); SWIG_fail;
  }
  
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *PropertyBlock_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_PropertyBlock, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_CMMCore(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CMMCore *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_CMMCore")) SWIG_fail;
  result = (CMMCore *)new CMMCore();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_CMMCore, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_CMMCore(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CMMCore *arg1 = (CMMCore *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_CMMCore",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CMMCore, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_CMMCore" "', argument " "1"" of type '" "CMMCore *""'"); 
  }
  arg1 = reinterpret_cast< CMMCore * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMMCore_noop(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  if (!PyArg_ParseTuple(args,(char *)":CMMCore_noop")) SWIG_fail;
  CMMCore::noop();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMMCore_loadDevice(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:CMMCore_loadDevice",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CMMCore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CMMCore_loadDevice" "', argument " "1"" of type '" "CMMCore *""'"); 
  }
  arg1 = reinterpret_cast< CMMCore * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CMMCore_loadDevice" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CMMCore_loadDevice" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  res4 = SWIG_AsCharPtrAndSize(obj3, &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "CMMCore_loadDevice" "', argument " "4"" of type '" "char const *""'");
  }
  arg4 = reinterpret_cast< char * >(buf4);
  try {
    (arg1)->loadDevice((char const *)arg2,(char const *)arg3,(char const *)arg4);
  }
  catch(CMMError &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new CMMError(static_cast< const CMMError& >(_e))),SWIGTYPE_p_CMMError,SWIG_POINTER_OWN), "CMMError", SWIGTYPE_p_CMMError); SWIG_fail;
  }
  
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMMCore_unloadDevice(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CMMCore_unloadDevice",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CMMCore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CMMCore_unloadDevice" "', argument " "1"" of type '" "CMMCore *""'"); 
  }
  arg1 = reinterpret_cast< CMMCore * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CMMCore_unloadDevice" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  try {
    (arg1)->unloadDevice((char const *)arg2);
  }
  catch(CMMError &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new CMMError(static_cast< const CMMError& >(_e))),SWIGTYPE_p_CMMError,SWIG_POINTER_OWN), "CMMError", SWIGTYPE_p_CMMError); SWIG_fail;
  }
  
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMMCore_unloadAllDevices(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CMMCore *arg1 = (CMMCore *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CMMCore_unloadAllDevices",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CMMCore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CMMCore_unloadAllDevices" "', argument " "1"" of type '" "CMMCore *""'"); 
  }
  arg1 = reinterpret_cast< CMMCore * >(argp1);
  try {
    (arg1)->unloadAllDevices();
  }
  catch(CMMError &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new CMMError(static_cast< const CMMError& >(_e))),SWIGTYPE_p_CMMError,SWIG_POINTER_OWN), "CMMError", SWIGTYPE_p_CMMError); SWIG_fail;
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMMCore_initializeAllDevices(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CMMCore *arg1 = (CMMCore *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CMMCore_initializeAllDevices",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CMMCore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CMMCore_initializeAllDevices" "', argument " "1"" of type '" "CMMCore *""'"); 
  }
  arg1 = reinterpret_cast< CMMCore * >(argp1);
  try {
    (arg1)->initializeAllDevices();
  }
  catch(CMMError &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new CMMError(static_cast< const CMMError& >(_e))),SWIGTYPE_p_CMMError,SWIG_POINTER_OWN), "CMMError", SWIGTYPE_p_CMMError); SWIG_fail;
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMMCore_initializeDevice(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CMMCore_initializeDevice",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CMMCore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CMMCore_initializeDevice" "', argument " "1"" of type '" "CMMCore *""'"); 
  }
  arg1 = reinterpret_cast< CMMCore * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CMMCore_initializeDevice" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  try {
    (arg1)->initializeDevice((char const *)arg2);
  }
  catch(CMMError &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new CMMError(static_cast< const CMMError& >(_e))),SWIGTYPE_p_CMMError,SWIG_POINTER_OWN), "CMMError", SWIGTYPE_p_CMMError); SWIG_fail;
  }
  
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMMCore_reset(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CMMCore *arg1 = (CMMCore *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CMMCore_reset",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CMMCore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CMMCore_reset" "', argument " "1"" of type '" "CMMCore *""'"); 
  }
  arg1 = reinterpret_cast< CMMCore * >(argp1);
  try {
    (arg1)->reset();
  }
  catch(CMMError &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new CMMError(static_cast< const CMMError& >(_e))),SWIGTYPE_p_CMMError,SWIG_POINTER_OWN), "CMMError", SWIGTYPE_p_CMMError); SWIG_fail;
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMMCore_unloadLibrary(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CMMCore_unloadLibrary",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CMMCore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CMMCore_unloadLibrary" "', argument " "1"" of type '" "CMMCore *""'"); 
  }
  arg1 = reinterpret_cast< CMMCore * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CMMCore_unloadLibrary" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  try {
    (arg1)->unloadLibrary((char const *)arg2);
  }
  catch(CMMError &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new CMMError(static_cast< const CMMError& >(_e))),SWIGTYPE_p_CMMError,SWIG_POINTER_OWN), "CMMError", SWIGTYPE_p_CMMError); SWIG_fail;
  }
  
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMMCore_updateCoreProperties(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CMMCore *arg1 = (CMMCore *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CMMCore_updateCoreProperties",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CMMCore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CMMCore_updateCoreProperties" "', argument " "1"" of type '" "CMMCore *""'"); 
  }
  arg1 = reinterpret_cast< CMMCore * >(argp1);
  try {
    (arg1)->updateCoreProperties();
  }
  catch(CMMError &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new CMMError(static_cast< const CMMError& >(_e))),SWIGTYPE_p_CMMError,SWIG_POINTER_OWN), "CMMError", SWIGTYPE_p_CMMError); SWIG_fail;
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMMCore_getCoreErrorText(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CMMCore *arg1 = (CMMCore *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CMMCore_getCoreErrorText",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CMMCore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CMMCore_getCoreErrorText" "', argument " "1"" of type '" "CMMCore const *""'"); 
  }
  arg1 = reinterpret_cast< CMMCore * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CMMCore_getCoreErrorText" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = ((CMMCore const *)arg1)->getCoreErrorText(arg2);
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMMCore_getVersionInfo(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CMMCore *arg1 = (CMMCore *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CMMCore_getVersionInfo",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CMMCore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CMMCore_getVersionInfo" "', argument " "1"" of type '" "CMMCore const *""'"); 
  }
  arg1 = reinterpret_cast< CMMCore * >(argp1);
  result = ((CMMCore const *)arg1)->getVersionInfo();
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMMCore_getAPIVersionInfo(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CMMCore *arg1 = (CMMCore *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CMMCore_getAPIVersionInfo",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CMMCore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CMMCore_getAPIVersionInfo" "', argument " "1"" of type '" "CMMCore const *""'"); 
  }
  arg1 = reinterpret_cast< CMMCore * >(argp1);
  result = ((CMMCore const *)arg1)->getAPIVersionInfo();
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMMCore_getSystemState(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CMMCore *arg1 = (CMMCore *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Configuration result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CMMCore_getSystemState",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CMMCore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CMMCore_getSystemState" "', argument " "1"" of type '" "CMMCore *""'"); 
  }
  arg1 = reinterpret_cast< CMMCore * >(argp1);
  result = (arg1)->getSystemState();
  resultobj = SWIG_NewPointerObj((new Configuration(static_cast< const Configuration& >(result))), SWIGTYPE_p_Configuration, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMMCore_setSystemState(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CMMCore *arg1 = (CMMCore *) 0 ;
  Configuration *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CMMCore_setSystemState",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CMMCore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CMMCore_setSystemState" "', argument " "1"" of type '" "CMMCore *""'"); 
  }
  arg1 = reinterpret_cast< CMMCore * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Configuration,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CMMCore_setSystemState" "', argument " "2"" of type '" "Configuration const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CMMCore_setSystemState" "', argument " "2"" of type '" "Configuration const &""'"); 
  }
  arg2 = reinterpret_cast< Configuration * >(argp2);
  (arg1)->setSystemState((Configuration const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMMCore_getConfigState(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  Configuration result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:CMMCore_getConfigState",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CMMCore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CMMCore_getConfigState" "', argument " "1"" of type '" "CMMCore *""'"); 
  }
  arg1 = reinterpret_cast< CMMCore * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CMMCore_getConfigState" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CMMCore_getConfigState" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  try {
    result = (arg1)->getConfigState((char const *)arg2,(char const *)arg3);
  }
  catch(CMMError &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new CMMError(static_cast< const CMMError& >(_e))),SWIGTYPE_p_CMMError,SWIG_POINTER_OWN), "CMMError", SWIGTYPE_p_CMMError); SWIG_fail;
  }
  
  resultobj = SWIG_NewPointerObj((new Configuration(static_cast< const Configuration& >(result))), SWIGTYPE_p_Configuration, SWIG_POINTER_OWN |  0 );
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMMCore_getConfigGroupState(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Configuration result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CMMCore_getConfigGroupState",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CMMCore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CMMCore_getConfigGroupState" "', argument " "1"" of type '" "CMMCore *""'"); 
  }
  arg1 = reinterpret_cast< CMMCore * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CMMCore_getConfigGroupState" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  try {
    result = (arg1)->getConfigGroupState((char const *)arg2);
  }
  catch(CMMError &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new CMMError(static_cast< const CMMError& >(_e))),SWIGTYPE_p_CMMError,SWIG_POINTER_OWN), "CMMError", SWIGTYPE_p_CMMError); SWIG_fail;
  }
  
  resultobj = SWIG_NewPointerObj((new Configuration(static_cast< const Configuration& >(result))), SWIGTYPE_p_Configuration, SWIG_POINTER_OWN |  0 );
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMMCore_saveSystemState(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CMMCore_saveSystemState",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CMMCore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CMMCore_saveSystemState" "', argument " "1"" of type '" "CMMCore *""'"); 
  }
  arg1 = reinterpret_cast< CMMCore * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CMMCore_saveSystemState" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  try {
    (arg1)->saveSystemState((char const *)arg2);
  }
  catch(CMMError &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new CMMError(static_cast< const CMMError& >(_e))),SWIGTYPE_p_CMMError,SWIG_POINTER_OWN), "CMMError", SWIGTYPE_p_CMMError); SWIG_fail;
  }
  
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMMCore_loadSystemState(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CMMCore_loadSystemState",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CMMCore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CMMCore_loadSystemState" "', argument " "1"" of type '" "CMMCore *""'"); 
  }
  arg1 = reinterpret_cast< CMMCore * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CMMCore_loadSystemState" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  try {
    (arg1)->loadSystemState((char const *)arg2);
  }
  catch(CMMError &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new CMMError(static_cast< const CMMError& >(_e))),SWIGTYPE_p_CMMError,SWIG_POINTER_OWN), "CMMError", SWIGTYPE_p_CMMError); SWIG_fail;
  }
  
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMMCore_saveSystemConfiguration(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CMMCore_saveSystemConfiguration",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CMMCore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CMMCore_saveSystemConfiguration" "', argument " "1"" of type '" "CMMCore *""'"); 
  }
  arg1 = reinterpret_cast< CMMCore * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CMMCore_saveSystemConfiguration" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  try {
    (arg1)->saveSystemConfiguration((char const *)arg2);
  }
  catch(CMMError &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new CMMError(static_cast< const CMMError& >(_e))),SWIGTYPE_p_CMMError,SWIG_POINTER_OWN), "CMMError", SWIGTYPE_p_CMMError); SWIG_fail;
  }
  
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMMCore_loadSystemConfiguration(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CMMCore_loadSystemConfiguration",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CMMCore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CMMCore_loadSystemConfiguration" "', argument " "1"" of type '" "CMMCore *""'"); 
  }
  arg1 = reinterpret_cast< CMMCore * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CMMCore_loadSystemConfiguration" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  try {
    (arg1)->loadSystemConfiguration((char const *)arg2);
  }
  catch(CMMError &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new CMMError(static_cast< const CMMError& >(_e))),SWIGTYPE_p_CMMError,SWIG_POINTER_OWN), "CMMError", SWIGTYPE_p_CMMError); SWIG_fail;
  }
  
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMMCore_registerCallback(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CMMCore *arg1 = (CMMCore *) 0 ;
  MMEventCallback *arg2 = (MMEventCallback *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CMMCore_registerCallback",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CMMCore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CMMCore_registerCallback" "', argument " "1"" of type '" "CMMCore *""'"); 
  }
  arg1 = reinterpret_cast< CMMCore * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_MMEventCallback, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CMMCore_registerCallback" "', argument " "2"" of type '" "MMEventCallback *""'"); 
  }
  arg2 = reinterpret_cast< MMEventCallback * >(argp2);
  (arg1)->registerCallback(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMMCore_setPrimaryLogFile__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:CMMCore_setPrimaryLogFile",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CMMCore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CMMCore_setPrimaryLogFile" "', argument " "1"" of type '" "CMMCore *""'"); 
  }
  arg1 = reinterpret_cast< CMMCore * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CMMCore_setPrimaryLogFile" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CMMCore_setPrimaryLogFile" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  try {
    (arg1)->setPrimaryLogFile((char const *)arg2,arg3);
  }
  catch(CMMError &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new CMMError(static_cast< const CMMError& >(_e))),SWIGTYPE_p_CMMError,SWIG_POINTER_OWN), "CMMError", SWIGTYPE_p_CMMError); SWIG_fail;
  }
  
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMMCore_setPrimaryLogFile__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CMMCore_setPrimaryLogFile",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CMMCore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CMMCore_setPrimaryLogFile" "', argument " "1"" of type '" "CMMCore *""'"); 
  }
  arg1 = reinterpret_cast< CMMCore * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CMMCore_setPrimaryLogFile" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  try {
    (arg1)->setPrimaryLogFile((char const *)arg2);
  }
  catch(CMMError &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new CMMError(static_cast< const CMMError& >(_e))),SWIGTYPE_p_CMMError,SWIG_POINTER_OWN), "CMMError", SWIGTYPE_p_CMMError); SWIG_fail;
  }
  
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMMCore_setPrimaryLogFile(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_CMMCore, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_CMMCore_setPrimaryLogFile__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_CMMCore, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_CMMCore_setPrimaryLogFile__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'CMMCore_setPrimaryLogFile'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    setPrimaryLogFile(CMMCore *,char const *,bool)\n"
    "    setPrimaryLogFile(CMMCore *,char const *)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMMCore_getPrimaryLogFile(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CMMCore *arg1 = (CMMCore *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CMMCore_getPrimaryLogFile",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CMMCore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CMMCore_getPrimaryLogFile" "', argument " "1"" of type '" "CMMCore const *""'"); 
  }
  arg1 = reinterpret_cast< CMMCore * >(argp1);
  result = ((CMMCore const *)arg1)->getPrimaryLogFile();
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMMCore_logMessage__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CMMCore_logMessage",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CMMCore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CMMCore_logMessage" "', argument " "1"" of type '" "CMMCore *""'"); 
  }
  arg1 = reinterpret_cast< CMMCore * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CMMCore_logMessage" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  (arg1)->logMessage((char const *)arg2);
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMMCore_logMessage__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:CMMCore_logMessage",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CMMCore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CMMCore_logMessage" "', argument " "1"" of type '" "CMMCore *""'"); 
  }
  arg1 = reinterpret_cast< CMMCore * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CMMCore_logMessage" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CMMCore_logMessage" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  (arg1)->logMessage((char const *)arg2,arg3);
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMMCore_logMessage(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_CMMCore, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_CMMCore_logMessage__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_CMMCore, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_CMMCore_logMessage__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'CMMCore_logMessage'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    logMessage(CMMCore *,char const *)\n"
    "    logMessage(CMMCore *,char const *,bool)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMMCore_enableDebugLog(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CMMCore *arg1 = (CMMCore *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CMMCore_enableDebugLog",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CMMCore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CMMCore_enableDebugLog" "', argument " "1"" of type '" "CMMCore *""'"); 
  }
  arg1 = reinterpret_cast< CMMCore * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CMMCore_enableDebugLog" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  (arg1)->enableDebugLog(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMMCore_debugLogEnabled(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CMMCore *arg1 = (CMMCore *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CMMCore_debugLogEnabled",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CMMCore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CMMCore_debugLogEnabled" "', argument " "1"" of type '" "CMMCore *""'"); 
  }
  arg1 = reinterpret_cast< CMMCore * >(argp1);
  result = (bool)(arg1)->debugLogEnabled();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMMCore_enableStderrLog(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CMMCore *arg1 = (CMMCore *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CMMCore_enableStderrLog",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CMMCore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CMMCore_enableStderrLog" "', argument " "1"" of type '" "CMMCore *""'"); 
  }
  arg1 = reinterpret_cast< CMMCore * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CMMCore_enableStderrLog" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  (arg1)->enableStderrLog(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMMCore_stderrLogEnabled(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CMMCore *arg1 = (CMMCore *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CMMCore_stderrLogEnabled",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CMMCore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CMMCore_stderrLogEnabled" "', argument " "1"" of type '" "CMMCore *""'"); 
  }
  arg1 = reinterpret_cast< CMMCore * >(argp1);
  result = (bool)(arg1)->stderrLogEnabled();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMMCore_startSecondaryLogFile__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  bool arg3 ;
  bool arg4 ;
  bool arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  bool val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:CMMCore_startSecondaryLogFile",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CMMCore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CMMCore_startSecondaryLogFile" "', argument " "1"" of type '" "CMMCore *""'"); 
  }
  arg1 = reinterpret_cast< CMMCore * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CMMCore_startSecondaryLogFile" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CMMCore_startSecondaryLogFile" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  ecode4 = SWIG_AsVal_bool(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "CMMCore_startSecondaryLogFile" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = static_cast< bool >(val4);
  ecode5 = SWIG_AsVal_bool(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "CMMCore_startSecondaryLogFile" "', argument " "5"" of type '" "bool""'");
  } 
  arg5 = static_cast< bool >(val5);
  try {
    result = (int)(arg1)->startSecondaryLogFile((char const *)arg2,arg3,arg4,arg5);
  }
  catch(CMMError &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new CMMError(static_cast< const CMMError& >(_e))),SWIGTYPE_p_CMMError,SWIG_POINTER_OWN), "CMMError", SWIGTYPE_p_CMMError); SWIG_fail;
  }
  
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMMCore_startSecondaryLogFile__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  bool arg3 ;
  bool arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:CMMCore_startSecondaryLogFile",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CMMCore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CMMCore_startSecondaryLogFile" "', argument " "1"" of type '" "CMMCore *""'"); 
  }
  arg1 = reinterpret_cast< CMMCore * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CMMCore_startSecondaryLogFile" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CMMCore_startSecondaryLogFile" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  ecode4 = SWIG_AsVal_bool(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "CMMCore_startSecondaryLogFile" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = static_cast< bool >(val4);
  try {
    result = (int)(arg1)->startSecondaryLogFile((char const *)arg2,arg3,arg4);
  }
  catch(CMMError &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new CMMError(static_cast< const CMMError& >(_e))),SWIGTYPE_p_CMMError,SWIG_POINTER_OWN), "CMMError", SWIGTYPE_p_CMMError); SWIG_fail;
  }
  
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMMCore_startSecondaryLogFile__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:CMMCore_startSecondaryLogFile",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CMMCore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CMMCore_startSecondaryLogFile" "', argument " "1"" of type '" "CMMCore *""'"); 
  }
  arg1 = reinterpret_cast< CMMCore * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CMMCore_startSecondaryLogFile" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CMMCore_startSecondaryLogFile" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  try {
    result = (int)(arg1)->startSecondaryLogFile((char const *)arg2,arg3);
  }
  catch(CMMError &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new CMMError(static_cast< const CMMError& >(_e))),SWIGTYPE_p_CMMError,SWIG_POINTER_OWN), "CMMError", SWIGTYPE_p_CMMError); SWIG_fail;
  }
  
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMMCore_startSecondaryLogFile(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[6];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 5); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_CMMCore, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_CMMCore_startSecondaryLogFile__SWIG_2(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_CMMCore, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_bool(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_CMMCore_startSecondaryLogFile__SWIG_1(self, args);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_CMMCore, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_bool(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_bool(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_CMMCore_startSecondaryLogFile__SWIG_0(self, args);
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'CMMCore_startSecondaryLogFile'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    startSecondaryLogFile(CMMCore *,char const *,bool,bool,bool)\n"
    "    startSecondaryLogFile(CMMCore *,char const *,bool,bool)\n"
    "    startSecondaryLogFile(CMMCore *,char const *,bool)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMMCore_stopSecondaryLogFile(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CMMCore *arg1 = (CMMCore *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CMMCore_stopSecondaryLogFile",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CMMCore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CMMCore_stopSecondaryLogFile" "', argument " "1"" of type '" "CMMCore *""'"); 
  }
  arg1 = reinterpret_cast< CMMCore * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CMMCore_stopSecondaryLogFile" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  try {
    (arg1)->stopSecondaryLogFile(arg2);
  }
  catch(CMMError &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new CMMError(static_cast< const CMMError& >(_e))),SWIGTYPE_p_CMMError,SWIG_POINTER_OWN), "CMMError", SWIGTYPE_p_CMMError); SWIG_fail;
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMMCore_getDeviceAdapterSearchPaths(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CMMCore *arg1 = (CMMCore *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::string,std::allocator< std::string > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CMMCore_getDeviceAdapterSearchPaths",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CMMCore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CMMCore_getDeviceAdapterSearchPaths" "', argument " "1"" of type '" "CMMCore *""'"); 
  }
  arg1 = reinterpret_cast< CMMCore * >(argp1);
  result = (arg1)->getDeviceAdapterSearchPaths();
  resultobj = swig::from(static_cast< std::vector<std::string,std::allocator< std::string > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMMCore_setDeviceAdapterSearchPaths(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CMMCore *arg1 = (CMMCore *) 0 ;
  std::vector< std::string,std::allocator< std::string > > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CMMCore_setDeviceAdapterSearchPaths",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CMMCore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CMMCore_setDeviceAdapterSearchPaths" "', argument " "1"" of type '" "CMMCore *""'"); 
  }
  arg1 = reinterpret_cast< CMMCore * >(argp1);
  {
    std::vector<std::string,std::allocator< std::string > > *ptr = (std::vector<std::string,std::allocator< std::string > > *)0;
    res2 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CMMCore_setDeviceAdapterSearchPaths" "', argument " "2"" of type '" "std::vector< std::string,std::allocator< std::string > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CMMCore_setDeviceAdapterSearchPaths" "', argument " "2"" of type '" "std::vector< std::string,std::allocator< std::string > > const &""'"); 
    }
    arg2 = ptr;
  }
  (arg1)->setDeviceAdapterSearchPaths((std::vector< std::string,std::allocator< std::string > > const &)*arg2);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMMCore_addSearchPath(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CMMCore_addSearchPath",&obj0)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(obj0, &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CMMCore_addSearchPath" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  CMMCore::addSearchPath((char const *)arg1);
  resultobj = SWIG_Py_Void();
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMMCore_getDeviceAdapterNames(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CMMCore *arg1 = (CMMCore *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::string,std::allocator< std::string > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CMMCore_getDeviceAdapterNames",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CMMCore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CMMCore_getDeviceAdapterNames" "', argument " "1"" of type '" "CMMCore *""'"); 
  }
  arg1 = reinterpret_cast< CMMCore * >(argp1);
  try {
    result = (arg1)->getDeviceAdapterNames();
  }
  catch(CMMError &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new CMMError(static_cast< const CMMError& >(_e))),SWIGTYPE_p_CMMError,SWIG_POINTER_OWN), "CMMError", SWIGTYPE_p_CMMError); SWIG_fail;
  }
  
  resultobj = swig::from(static_cast< std::vector<std::string,std::allocator< std::string > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMMCore_getDeviceLibraries(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector< std::string,std::allocator< std::string > > result;
  
  if (!PyArg_ParseTuple(args,(char *)":CMMCore_getDeviceLibraries")) SWIG_fail;
  try {
    result = CMMCore::getDeviceLibraries();
  }
  catch(CMMError &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new CMMError(static_cast< const CMMError& >(_e))),SWIGTYPE_p_CMMError,SWIG_POINTER_OWN), "CMMError", SWIGTYPE_p_CMMError); SWIG_fail;
  }
  
  resultobj = swig::from(static_cast< std::vector<std::string,std::allocator< std::string > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMMCore_getAvailableDevices(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< std::string,std::allocator< std::string > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CMMCore_getAvailableDevices",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CMMCore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CMMCore_getAvailableDevices" "', argument " "1"" of type '" "CMMCore *""'"); 
  }
  arg1 = reinterpret_cast< CMMCore * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CMMCore_getAvailableDevices" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  try {
    result = (arg1)->getAvailableDevices((char const *)arg2);
  }
  catch(CMMError &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new CMMError(static_cast< const CMMError& >(_e))),SWIGTYPE_p_CMMError,SWIG_POINTER_OWN), "CMMError", SWIGTYPE_p_CMMError); SWIG_fail;
  }
  
  resultobj = swig::from(static_cast< std::vector<std::string,std::allocator< std::string > > >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMMCore_getAvailableDeviceDescriptions(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< std::string,std::allocator< std::string > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CMMCore_getAvailableDeviceDescriptions",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CMMCore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CMMCore_getAvailableDeviceDescriptions" "', argument " "1"" of type '" "CMMCore *""'"); 
  }
  arg1 = reinterpret_cast< CMMCore * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CMMCore_getAvailableDeviceDescriptions" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  try {
    result = (arg1)->getAvailableDeviceDescriptions((char const *)arg2);
  }
  catch(CMMError &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new CMMError(static_cast< const CMMError& >(_e))),SWIGTYPE_p_CMMError,SWIG_POINTER_OWN), "CMMError", SWIGTYPE_p_CMMError); SWIG_fail;
  }
  
  resultobj = swig::from(static_cast< std::vector<std::string,std::allocator< std::string > > >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMMCore_getAvailableDeviceTypes(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< long,std::allocator< long > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CMMCore_getAvailableDeviceTypes",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CMMCore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CMMCore_getAvailableDeviceTypes" "', argument " "1"" of type '" "CMMCore *""'"); 
  }
  arg1 = reinterpret_cast< CMMCore * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CMMCore_getAvailableDeviceTypes" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  try {
    result = (arg1)->getAvailableDeviceTypes((char const *)arg2);
  }
  catch(CMMError &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new CMMError(static_cast< const CMMError& >(_e))),SWIGTYPE_p_CMMError,SWIG_POINTER_OWN), "CMMError", SWIGTYPE_p_CMMError); SWIG_fail;
  }
  
  resultobj = swig::from(static_cast< std::vector<long,std::allocator< long > > >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMMCore_getLoadedDevices(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CMMCore *arg1 = (CMMCore *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::string,std::allocator< std::string > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CMMCore_getLoadedDevices",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CMMCore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CMMCore_getLoadedDevices" "', argument " "1"" of type '" "CMMCore const *""'"); 
  }
  arg1 = reinterpret_cast< CMMCore * >(argp1);
  result = ((CMMCore const *)arg1)->getLoadedDevices();
  resultobj = swig::from(static_cast< std::vector<std::string,std::allocator< std::string > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMMCore_getLoadedDevicesOfType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CMMCore *arg1 = (CMMCore *) 0 ;
  MM::DeviceType arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< std::string,std::allocator< std::string > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CMMCore_getLoadedDevicesOfType",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CMMCore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CMMCore_getLoadedDevicesOfType" "', argument " "1"" of type '" "CMMCore const *""'"); 
  }
  arg1 = reinterpret_cast< CMMCore * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CMMCore_getLoadedDevicesOfType" "', argument " "2"" of type '" "MM::DeviceType""'");
  } 
  arg2 = static_cast< MM::DeviceType >(val2);
  result = ((CMMCore const *)arg1)->getLoadedDevicesOfType(arg2);
  resultobj = swig::from(static_cast< std::vector<std::string,std::allocator< std::string > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMMCore_getDeviceType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  MM::DeviceType result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CMMCore_getDeviceType",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CMMCore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CMMCore_getDeviceType" "', argument " "1"" of type '" "CMMCore *""'"); 
  }
  arg1 = reinterpret_cast< CMMCore * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CMMCore_getDeviceType" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  try {
    result = (MM::DeviceType)(arg1)->getDeviceType((char const *)arg2);
  }
  catch(CMMError &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new CMMError(static_cast< const CMMError& >(_e))),SWIGTYPE_p_CMMError,SWIG_POINTER_OWN), "CMMError", SWIGTYPE_p_CMMError); SWIG_fail;
  }
  
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMMCore_getDeviceLibrary(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CMMCore_getDeviceLibrary",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CMMCore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CMMCore_getDeviceLibrary" "', argument " "1"" of type '" "CMMCore *""'"); 
  }
  arg1 = reinterpret_cast< CMMCore * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CMMCore_getDeviceLibrary" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  try {
    result = (arg1)->getDeviceLibrary((char const *)arg2);
  }
  catch(CMMError &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new CMMError(static_cast< const CMMError& >(_e))),SWIGTYPE_p_CMMError,SWIG_POINTER_OWN), "CMMError", SWIGTYPE_p_CMMError); SWIG_fail;
  }
  
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMMCore_getDeviceName(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CMMCore_getDeviceName",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CMMCore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CMMCore_getDeviceName" "', argument " "1"" of type '" "CMMCore *""'"); 
  }
  arg1 = reinterpret_cast< CMMCore * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CMMCore_getDeviceName" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  try {
    result = (arg1)->getDeviceName((char const *)arg2);
  }
  catch(CMMError &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new CMMError(static_cast< const CMMError& >(_e))),SWIGTYPE_p_CMMError,SWIG_POINTER_OWN), "CMMError", SWIGTYPE_p_CMMError); SWIG_fail;
  }
  
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMMCore_getDeviceDescription(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CMMCore_getDeviceDescription",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CMMCore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CMMCore_getDeviceDescription" "', argument " "1"" of type '" "CMMCore *""'"); 
  }
  arg1 = reinterpret_cast< CMMCore * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CMMCore_getDeviceDescription" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  try {
    result = (arg1)->getDeviceDescription((char const *)arg2);
  }
  catch(CMMError &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new CMMError(static_cast< const CMMError& >(_e))),SWIGTYPE_p_CMMError,SWIG_POINTER_OWN), "CMMError", SWIGTYPE_p_CMMError); SWIG_fail;
  }
  
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMMCore_getDevicePropertyNames(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< std::string,std::allocator< std::string > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CMMCore_getDevicePropertyNames",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CMMCore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CMMCore_getDevicePropertyNames" "', argument " "1"" of type '" "CMMCore *""'"); 
  }
  arg1 = reinterpret_cast< CMMCore * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CMMCore_getDevicePropertyNames" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  try {
    result = (arg1)->getDevicePropertyNames((char const *)arg2);
  }
  catch(CMMError &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new CMMError(static_cast< const CMMError& >(_e))),SWIGTYPE_p_CMMError,SWIG_POINTER_OWN), "CMMError", SWIGTYPE_p_CMMError); SWIG_fail;
  }
  
  resultobj = swig::from(static_cast< std::vector<std::string,std::allocator< std::string > > >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMMCore_hasProperty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:CMMCore_hasProperty",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CMMCore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CMMCore_hasProperty" "', argument " "1"" of type '" "CMMCore *""'"); 
  }
  arg1 = reinterpret_cast< CMMCore * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CMMCore_hasProperty" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CMMCore_hasProperty" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  try {
    result = (bool)(arg1)->hasProperty((char const *)arg2,(char const *)arg3);
  }
  catch(CMMError &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new CMMError(static_cast< const CMMError& >(_e))),SWIGTYPE_p_CMMError,SWIG_POINTER_OWN), "CMMError", SWIGTYPE_p_CMMError); SWIG_fail;
  }
  
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMMCore_getProperty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:CMMCore_getProperty",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CMMCore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CMMCore_getProperty" "', argument " "1"" of type '" "CMMCore *""'"); 
  }
  arg1 = reinterpret_cast< CMMCore * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CMMCore_getProperty" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CMMCore_getProperty" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  try {
    result = (arg1)->getProperty((char const *)arg2,(char const *)arg3);
  }
  catch(CMMError &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new CMMError(static_cast< const CMMError& >(_e))),SWIGTYPE_p_CMMError,SWIG_POINTER_OWN), "CMMError", SWIGTYPE_p_CMMError); SWIG_fail;
  }
  
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMMCore_setProperty__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:CMMCore_setProperty",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CMMCore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CMMCore_setProperty" "', argument " "1"" of type '" "CMMCore *""'"); 
  }
  arg1 = reinterpret_cast< CMMCore * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CMMCore_setProperty" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CMMCore_setProperty" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  res4 = SWIG_AsCharPtrAndSize(obj3, &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "CMMCore_setProperty" "', argument " "4"" of type '" "char const *""'");
  }
  arg4 = reinterpret_cast< char * >(buf4);
  try {
    (arg1)->setProperty((char const *)arg2,(char const *)arg3,(char const *)arg4);
  }
  catch(CMMError &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new CMMError(static_cast< const CMMError& >(_e))),SWIGTYPE_p_CMMError,SWIG_POINTER_OWN), "CMMError", SWIGTYPE_p_CMMError); SWIG_fail;
  }
  
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMMCore_setProperty__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  bool arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:CMMCore_setProperty",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CMMCore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CMMCore_setProperty" "', argument " "1"" of type '" "CMMCore *""'"); 
  }
  arg1 = reinterpret_cast< CMMCore * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CMMCore_setProperty" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CMMCore_setProperty" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  ecode4 = SWIG_AsVal_bool(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "CMMCore_setProperty" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = static_cast< bool >(val4);
  try {
    (arg1)->setProperty((char const *)arg2,(char const *)arg3,arg4);
  }
  catch(CMMError &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new CMMError(static_cast< const CMMError& >(_e))),SWIGTYPE_p_CMMError,SWIG_POINTER_OWN), "CMMError", SWIGTYPE_p_CMMError); SWIG_fail;
  }
  
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMMCore_setProperty__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  long arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  long val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:CMMCore_setProperty",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CMMCore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CMMCore_setProperty" "', argument " "1"" of type '" "CMMCore *""'"); 
  }
  arg1 = reinterpret_cast< CMMCore * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CMMCore_setProperty" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CMMCore_setProperty" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  ecode4 = SWIG_AsVal_long(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "CMMCore_setProperty" "', argument " "4"" of type '" "long""'");
  } 
  arg4 = static_cast< long >(val4);
  try {
    (arg1)->setProperty((char const *)arg2,(char const *)arg3,arg4);
  }
  catch(CMMError &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new CMMError(static_cast< const CMMError& >(_e))),SWIGTYPE_p_CMMError,SWIG_POINTER_OWN), "CMMError", SWIGTYPE_p_CMMError); SWIG_fail;
  }
  
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMMCore_setProperty__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  float arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  float val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:CMMCore_setProperty",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CMMCore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CMMCore_setProperty" "', argument " "1"" of type '" "CMMCore *""'"); 
  }
  arg1 = reinterpret_cast< CMMCore * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CMMCore_setProperty" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CMMCore_setProperty" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  ecode4 = SWIG_AsVal_float(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "CMMCore_setProperty" "', argument " "4"" of type '" "float""'");
  } 
  arg4 = static_cast< float >(val4);
  try {
    (arg1)->setProperty((char const *)arg2,(char const *)arg3,arg4);
  }
  catch(CMMError &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new CMMError(static_cast< const CMMError& >(_e))),SWIGTYPE_p_CMMError,SWIG_POINTER_OWN), "CMMError", SWIGTYPE_p_CMMError); SWIG_fail;
  }
  
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMMCore_setProperty__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  double arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:CMMCore_setProperty",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CMMCore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CMMCore_setProperty" "', argument " "1"" of type '" "CMMCore *""'"); 
  }
  arg1 = reinterpret_cast< CMMCore * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CMMCore_setProperty" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CMMCore_setProperty" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "CMMCore_setProperty" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  try {
    (arg1)->setProperty((char const *)arg2,(char const *)arg3,arg4);
  }
  catch(CMMError &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new CMMError(static_cast< const CMMError& >(_e))),SWIGTYPE_p_CMMError,SWIG_POINTER_OWN), "CMMError", SWIGTYPE_p_CMMError); SWIG_fail;
  }
  
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMMCore_setProperty(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 4); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_CMMCore, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_long(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_CMMCore_setProperty__SWIG_2(self, args);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_CMMCore, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_float(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_CMMCore_setProperty__SWIG_3(self, args);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_CMMCore, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_CMMCore_setProperty__SWIG_4(self, args);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_CMMCore, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_AsCharPtrAndSize(argv[3], 0, NULL, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_CMMCore_setProperty__SWIG_0(self, args);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_CMMCore, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_bool(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_CMMCore_setProperty__SWIG_1(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'CMMCore_setProperty'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    setProperty(CMMCore *,char const *,char const *,char const *)\n"
    "    setProperty(CMMCore *,char const *,char const *,bool const)\n"
    "    setProperty(CMMCore *,char const *,char const *,long const)\n"
    "    setProperty(CMMCore *,char const *,char const *,float const)\n"
    "    setProperty(CMMCore *,char const *,char const *,double const)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMMCore_getAllowedPropertyValues(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< std::string,std::allocator< std::string > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:CMMCore_getAllowedPropertyValues",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CMMCore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CMMCore_getAllowedPropertyValues" "', argument " "1"" of type '" "CMMCore *""'"); 
  }
  arg1 = reinterpret_cast< CMMCore * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CMMCore_getAllowedPropertyValues" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CMMCore_getAllowedPropertyValues" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  try {
    result = (arg1)->getAllowedPropertyValues((char const *)arg2,(char const *)arg3);
  }
  catch(CMMError &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new CMMError(static_cast< const CMMError& >(_e))),SWIGTYPE_p_CMMError,SWIG_POINTER_OWN), "CMMError", SWIGTYPE_p_CMMError); SWIG_fail;
  }
  
  resultobj = swig::from(static_cast< std::vector<std::string,std::allocator< std::string > > >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMMCore_isPropertyReadOnly(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:CMMCore_isPropertyReadOnly",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CMMCore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CMMCore_isPropertyReadOnly" "', argument " "1"" of type '" "CMMCore *""'"); 
  }
  arg1 = reinterpret_cast< CMMCore * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CMMCore_isPropertyReadOnly" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CMMCore_isPropertyReadOnly" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  try {
    result = (bool)(arg1)->isPropertyReadOnly((char const *)arg2,(char const *)arg3);
  }
  catch(CMMError &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new CMMError(static_cast< const CMMError& >(_e))),SWIGTYPE_p_CMMError,SWIG_POINTER_OWN), "CMMError", SWIGTYPE_p_CMMError); SWIG_fail;
  }
  
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMMCore_isPropertyPreInit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:CMMCore_isPropertyPreInit",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CMMCore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CMMCore_isPropertyPreInit" "', argument " "1"" of type '" "CMMCore *""'"); 
  }
  arg1 = reinterpret_cast< CMMCore * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CMMCore_isPropertyPreInit" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CMMCore_isPropertyPreInit" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  try {
    result = (bool)(arg1)->isPropertyPreInit((char const *)arg2,(char const *)arg3);
  }
  catch(CMMError &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new CMMError(static_cast< const CMMError& >(_e))),SWIGTYPE_p_CMMError,SWIG_POINTER_OWN), "CMMError", SWIGTYPE_p_CMMError); SWIG_fail;
  }
  
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMMCore_isPropertySequenceable(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:CMMCore_isPropertySequenceable",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CMMCore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CMMCore_isPropertySequenceable" "', argument " "1"" of type '" "CMMCore *""'"); 
  }
  arg1 = reinterpret_cast< CMMCore * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CMMCore_isPropertySequenceable" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CMMCore_isPropertySequenceable" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  try {
    result = (bool)(arg1)->isPropertySequenceable((char const *)arg2,(char const *)arg3);
  }
  catch(CMMError &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new CMMError(static_cast< const CMMError& >(_e))),SWIGTYPE_p_CMMError,SWIG_POINTER_OWN), "CMMError", SWIGTYPE_p_CMMError); SWIG_fail;
  }
  
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMMCore_hasPropertyLimits(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:CMMCore_hasPropertyLimits",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CMMCore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CMMCore_hasPropertyLimits" "', argument " "1"" of type '" "CMMCore *""'"); 
  }
  arg1 = reinterpret_cast< CMMCore * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CMMCore_hasPropertyLimits" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CMMCore_hasPropertyLimits" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  try {
    result = (bool)(arg1)->hasPropertyLimits((char const *)arg2,(char const *)arg3);
  }
  catch(CMMError &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new CMMError(static_cast< const CMMError& >(_e))),SWIGTYPE_p_CMMError,SWIG_POINTER_OWN), "CMMError", SWIGTYPE_p_CMMError); SWIG_fail;
  }
  
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMMCore_getPropertyLowerLimit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:CMMCore_getPropertyLowerLimit",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CMMCore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CMMCore_getPropertyLowerLimit" "', argument " "1"" of type '" "CMMCore *""'"); 
  }
  arg1 = reinterpret_cast< CMMCore * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CMMCore_getPropertyLowerLimit" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CMMCore_getPropertyLowerLimit" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  try {
    result = (double)(arg1)->getPropertyLowerLimit((char const *)arg2,(char const *)arg3);
  }
  catch(CMMError &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new CMMError(static_cast< const CMMError& >(_e))),SWIGTYPE_p_CMMError,SWIG_POINTER_OWN), "CMMError", SWIGTYPE_p_CMMError); SWIG_fail;
  }
  
  resultobj = SWIG_From_double(static_cast< double >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMMCore_getPropertyUpperLimit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:CMMCore_getPropertyUpperLimit",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CMMCore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CMMCore_getPropertyUpperLimit" "', argument " "1"" of type '" "CMMCore *""'"); 
  }
  arg1 = reinterpret_cast< CMMCore * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CMMCore_getPropertyUpperLimit" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CMMCore_getPropertyUpperLimit" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  try {
    result = (double)(arg1)->getPropertyUpperLimit((char const *)arg2,(char const *)arg3);
  }
  catch(CMMError &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new CMMError(static_cast< const CMMError& >(_e))),SWIGTYPE_p_CMMError,SWIG_POINTER_OWN), "CMMError", SWIGTYPE_p_CMMError); SWIG_fail;
  }
  
  resultobj = SWIG_From_double(static_cast< double >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMMCore_getPropertyType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  MM::PropertyType result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:CMMCore_getPropertyType",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CMMCore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CMMCore_getPropertyType" "', argument " "1"" of type '" "CMMCore *""'"); 
  }
  arg1 = reinterpret_cast< CMMCore * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CMMCore_getPropertyType" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CMMCore_getPropertyType" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  try {
    result = (MM::PropertyType)(arg1)->getPropertyType((char const *)arg2,(char const *)arg3);
  }
  catch(CMMError &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new CMMError(static_cast< const CMMError& >(_e))),SWIGTYPE_p_CMMError,SWIG_POINTER_OWN), "CMMError", SWIGTYPE_p_CMMError); SWIG_fail;
  }
  
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMMCore_startPropertySequence(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:CMMCore_startPropertySequence",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CMMCore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CMMCore_startPropertySequence" "', argument " "1"" of type '" "CMMCore *""'"); 
  }
  arg1 = reinterpret_cast< CMMCore * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CMMCore_startPropertySequence" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CMMCore_startPropertySequence" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  try {
    (arg1)->startPropertySequence((char const *)arg2,(char const *)arg3);
  }
  catch(CMMError &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new CMMError(static_cast< const CMMError& >(_e))),SWIGTYPE_p_CMMError,SWIG_POINTER_OWN), "CMMError", SWIGTYPE_p_CMMError); SWIG_fail;
  }
  
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMMCore_stopPropertySequence(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:CMMCore_stopPropertySequence",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CMMCore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CMMCore_stopPropertySequence" "', argument " "1"" of type '" "CMMCore *""'"); 
  }
  arg1 = reinterpret_cast< CMMCore * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CMMCore_stopPropertySequence" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CMMCore_stopPropertySequence" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  try {
    (arg1)->stopPropertySequence((char const *)arg2,(char const *)arg3);
  }
  catch(CMMError &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new CMMError(static_cast< const CMMError& >(_e))),SWIGTYPE_p_CMMError,SWIG_POINTER_OWN), "CMMError", SWIGTYPE_p_CMMError); SWIG_fail;
  }
  
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMMCore_getPropertySequenceMaxLength(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  long result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:CMMCore_getPropertySequenceMaxLength",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CMMCore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CMMCore_getPropertySequenceMaxLength" "', argument " "1"" of type '" "CMMCore *""'"); 
  }
  arg1 = reinterpret_cast< CMMCore * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CMMCore_getPropertySequenceMaxLength" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CMMCore_getPropertySequenceMaxLength" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  try {
    result = (long)(arg1)->getPropertySequenceMaxLength((char const *)arg2,(char const *)arg3);
  }
  catch(CMMError &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new CMMError(static_cast< const CMMError& >(_e))),SWIGTYPE_p_CMMError,SWIG_POINTER_OWN), "CMMError", SWIGTYPE_p_CMMError); SWIG_fail;
  }
  
  resultobj = SWIG_From_long(static_cast< long >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMMCore_loadPropertySequence(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  std::vector< std::string,std::allocator< std::string > > arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:CMMCore_loadPropertySequence",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CMMCore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CMMCore_loadPropertySequence" "', argument " "1"" of type '" "CMMCore *""'"); 
  }
  arg1 = reinterpret_cast< CMMCore * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CMMCore_loadPropertySequence" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CMMCore_loadPropertySequence" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  {
    std::vector<std::string,std::allocator< std::string > > *ptr = (std::vector<std::string,std::allocator< std::string > > *)0;
    int res = swig::asptr(obj3, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "CMMCore_loadPropertySequence" "', argument " "4"" of type '" "std::vector< std::string,std::allocator< std::string > >""'"); 
    }
    arg4 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  try {
    (arg1)->loadPropertySequence((char const *)arg2,(char const *)arg3,arg4);
  }
  catch(CMMError &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new CMMError(static_cast< const CMMError& >(_e))),SWIGTYPE_p_CMMError,SWIG_POINTER_OWN), "CMMError", SWIGTYPE_p_CMMError); SWIG_fail;
  }
  
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMMCore_deviceBusy(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CMMCore_deviceBusy",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CMMCore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CMMCore_deviceBusy" "', argument " "1"" of type '" "CMMCore *""'"); 
  }
  arg1 = reinterpret_cast< CMMCore * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CMMCore_deviceBusy" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  try {
    result = (bool)(arg1)->deviceBusy((char const *)arg2);
  }
  catch(CMMError &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new CMMError(static_cast< const CMMError& >(_e))),SWIGTYPE_p_CMMError,SWIG_POINTER_OWN), "CMMError", SWIGTYPE_p_CMMError); SWIG_fail;
  }
  
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMMCore_waitForDevice(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CMMCore_waitForDevice",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CMMCore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CMMCore_waitForDevice" "', argument " "1"" of type '" "CMMCore *""'"); 
  }
  arg1 = reinterpret_cast< CMMCore * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CMMCore_waitForDevice" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  try {
    (arg1)->waitForDevice((char const *)arg2);
  }
  catch(CMMError &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new CMMError(static_cast< const CMMError& >(_e))),SWIGTYPE_p_CMMError,SWIG_POINTER_OWN), "CMMError", SWIGTYPE_p_CMMError); SWIG_fail;
  }
  
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMMCore_waitForConfig(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:CMMCore_waitForConfig",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CMMCore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CMMCore_waitForConfig" "', argument " "1"" of type '" "CMMCore *""'"); 
  }
  arg1 = reinterpret_cast< CMMCore * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CMMCore_waitForConfig" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CMMCore_waitForConfig" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  try {
    (arg1)->waitForConfig((char const *)arg2,(char const *)arg3);
  }
  catch(CMMError &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new CMMError(static_cast< const CMMError& >(_e))),SWIGTYPE_p_CMMError,SWIG_POINTER_OWN), "CMMError", SWIGTYPE_p_CMMError); SWIG_fail;
  }
  
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMMCore_systemBusy(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CMMCore *arg1 = (CMMCore *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CMMCore_systemBusy",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CMMCore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CMMCore_systemBusy" "', argument " "1"" of type '" "CMMCore *""'"); 
  }
  arg1 = reinterpret_cast< CMMCore * >(argp1);
  try {
    result = (bool)(arg1)->systemBusy();
  }
  catch(CMMError &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new CMMError(static_cast< const CMMError& >(_e))),SWIGTYPE_p_CMMError,SWIG_POINTER_OWN), "CMMError", SWIGTYPE_p_CMMError); SWIG_fail;
  }
  
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMMCore_waitForSystem(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CMMCore *arg1 = (CMMCore *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CMMCore_waitForSystem",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CMMCore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CMMCore_waitForSystem" "', argument " "1"" of type '" "CMMCore *""'"); 
  }
  arg1 = reinterpret_cast< CMMCore * >(argp1);
  try {
    (arg1)->waitForSystem();
  }
  catch(CMMError &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new CMMError(static_cast< const CMMError& >(_e))),SWIGTYPE_p_CMMError,SWIG_POINTER_OWN), "CMMError", SWIGTYPE_p_CMMError); SWIG_fail;
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMMCore_waitForImageSynchro(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CMMCore *arg1 = (CMMCore *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CMMCore_waitForImageSynchro",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CMMCore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CMMCore_waitForImageSynchro" "', argument " "1"" of type '" "CMMCore *""'"); 
  }
  arg1 = reinterpret_cast< CMMCore * >(argp1);
  try {
    (arg1)->waitForImageSynchro();
  }
  catch(CMMError &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new CMMError(static_cast< const CMMError& >(_e))),SWIGTYPE_p_CMMError,SWIG_POINTER_OWN), "CMMError", SWIGTYPE_p_CMMError); SWIG_fail;
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMMCore_deviceTypeBusy(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CMMCore *arg1 = (CMMCore *) 0 ;
  MM::DeviceType arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CMMCore_deviceTypeBusy",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CMMCore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CMMCore_deviceTypeBusy" "', argument " "1"" of type '" "CMMCore *""'"); 
  }
  arg1 = reinterpret_cast< CMMCore * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CMMCore_deviceTypeBusy" "', argument " "2"" of type '" "MM::DeviceType""'");
  } 
  arg2 = static_cast< MM::DeviceType >(val2);
  try {
    result = (bool)(arg1)->deviceTypeBusy(arg2);
  }
  catch(CMMError &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new CMMError(static_cast< const CMMError& >(_e))),SWIGTYPE_p_CMMError,SWIG_POINTER_OWN), "CMMError", SWIGTYPE_p_CMMError); SWIG_fail;
  }
  
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMMCore_waitForDeviceType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CMMCore *arg1 = (CMMCore *) 0 ;
  MM::DeviceType arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CMMCore_waitForDeviceType",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CMMCore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CMMCore_waitForDeviceType" "', argument " "1"" of type '" "CMMCore *""'"); 
  }
  arg1 = reinterpret_cast< CMMCore * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CMMCore_waitForDeviceType" "', argument " "2"" of type '" "MM::DeviceType""'");
  } 
  arg2 = static_cast< MM::DeviceType >(val2);
  try {
    (arg1)->waitForDeviceType(arg2);
  }
  catch(CMMError &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new CMMError(static_cast< const CMMError& >(_e))),SWIGTYPE_p_CMMError,SWIG_POINTER_OWN), "CMMError", SWIGTYPE_p_CMMError); SWIG_fail;
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMMCore_getDeviceDelayMs(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CMMCore_getDeviceDelayMs",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CMMCore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CMMCore_getDeviceDelayMs" "', argument " "1"" of type '" "CMMCore *""'"); 
  }
  arg1 = reinterpret_cast< CMMCore * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CMMCore_getDeviceDelayMs" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  try {
    result = (double)(arg1)->getDeviceDelayMs((char const *)arg2);
  }
  catch(CMMError &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new CMMError(static_cast< const CMMError& >(_e))),SWIGTYPE_p_CMMError,SWIG_POINTER_OWN), "CMMError", SWIGTYPE_p_CMMError); SWIG_fail;
  }
  
  resultobj = SWIG_From_double(static_cast< double >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMMCore_setDeviceDelayMs(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:CMMCore_setDeviceDelayMs",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CMMCore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CMMCore_setDeviceDelayMs" "', argument " "1"" of type '" "CMMCore *""'"); 
  }
  arg1 = reinterpret_cast< CMMCore * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CMMCore_setDeviceDelayMs" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CMMCore_setDeviceDelayMs" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  try {
    (arg1)->setDeviceDelayMs((char const *)arg2,arg3);
  }
  catch(CMMError &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new CMMError(static_cast< const CMMError& >(_e))),SWIGTYPE_p_CMMError,SWIG_POINTER_OWN), "CMMError", SWIGTYPE_p_CMMError); SWIG_fail;
  }
  
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMMCore_usesDeviceDelay(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CMMCore_usesDeviceDelay",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CMMCore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CMMCore_usesDeviceDelay" "', argument " "1"" of type '" "CMMCore *""'"); 
  }
  arg1 = reinterpret_cast< CMMCore * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CMMCore_usesDeviceDelay" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  try {
    result = (bool)(arg1)->usesDeviceDelay((char const *)arg2);
  }
  catch(CMMError &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new CMMError(static_cast< const CMMError& >(_e))),SWIGTYPE_p_CMMError,SWIG_POINTER_OWN), "CMMError", SWIGTYPE_p_CMMError); SWIG_fail;
  }
  
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMMCore_setTimeoutMs(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CMMCore *arg1 = (CMMCore *) 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CMMCore_setTimeoutMs",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CMMCore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CMMCore_setTimeoutMs" "', argument " "1"" of type '" "CMMCore *""'"); 
  }
  arg1 = reinterpret_cast< CMMCore * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CMMCore_setTimeoutMs" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  (arg1)->setTimeoutMs(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMMCore_getTimeoutMs(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CMMCore *arg1 = (CMMCore *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  long result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CMMCore_getTimeoutMs",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CMMCore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CMMCore_getTimeoutMs" "', argument " "1"" of type '" "CMMCore *""'"); 
  }
  arg1 = reinterpret_cast< CMMCore * >(argp1);
  result = (long)(arg1)->getTimeoutMs();
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMMCore_sleep(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CMMCore *arg1 = (CMMCore *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CMMCore_sleep",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CMMCore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CMMCore_sleep" "', argument " "1"" of type '" "CMMCore const *""'"); 
  }
  arg1 = reinterpret_cast< CMMCore * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CMMCore_sleep" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ((CMMCore const *)arg1)->sleep(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMMCore_getCameraDevice(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CMMCore *arg1 = (CMMCore *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CMMCore_getCameraDevice",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CMMCore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CMMCore_getCameraDevice" "', argument " "1"" of type '" "CMMCore *""'"); 
  }
  arg1 = reinterpret_cast< CMMCore * >(argp1);
  result = (arg1)->getCameraDevice();
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMMCore_getShutterDevice(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CMMCore *arg1 = (CMMCore *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CMMCore_getShutterDevice",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CMMCore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CMMCore_getShutterDevice" "', argument " "1"" of type '" "CMMCore *""'"); 
  }
  arg1 = reinterpret_cast< CMMCore * >(argp1);
  result = (arg1)->getShutterDevice();
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMMCore_getFocusDevice(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CMMCore *arg1 = (CMMCore *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CMMCore_getFocusDevice",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CMMCore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CMMCore_getFocusDevice" "', argument " "1"" of type '" "CMMCore *""'"); 
  }
  arg1 = reinterpret_cast< CMMCore * >(argp1);
  result = (arg1)->getFocusDevice();
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMMCore_getXYStageDevice(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CMMCore *arg1 = (CMMCore *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CMMCore_getXYStageDevice",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CMMCore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CMMCore_getXYStageDevice" "', argument " "1"" of type '" "CMMCore *""'"); 
  }
  arg1 = reinterpret_cast< CMMCore * >(argp1);
  result = (arg1)->getXYStageDevice();
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMMCore_getAutoFocusDevice(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CMMCore *arg1 = (CMMCore *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CMMCore_getAutoFocusDevice",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CMMCore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CMMCore_getAutoFocusDevice" "', argument " "1"" of type '" "CMMCore *""'"); 
  }
  arg1 = reinterpret_cast< CMMCore * >(argp1);
  result = (arg1)->getAutoFocusDevice();
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMMCore_getImageProcessorDevice(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CMMCore *arg1 = (CMMCore *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CMMCore_getImageProcessorDevice",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CMMCore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CMMCore_getImageProcessorDevice" "', argument " "1"" of type '" "CMMCore *""'"); 
  }
  arg1 = reinterpret_cast< CMMCore * >(argp1);
  result = (arg1)->getImageProcessorDevice();
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMMCore_getSLMDevice(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CMMCore *arg1 = (CMMCore *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CMMCore_getSLMDevice",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CMMCore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CMMCore_getSLMDevice" "', argument " "1"" of type '" "CMMCore *""'"); 
  }
  arg1 = reinterpret_cast< CMMCore * >(argp1);
  result = (arg1)->getSLMDevice();
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMMCore_getGalvoDevice(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CMMCore *arg1 = (CMMCore *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CMMCore_getGalvoDevice",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CMMCore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CMMCore_getGalvoDevice" "', argument " "1"" of type '" "CMMCore *""'"); 
  }
  arg1 = reinterpret_cast< CMMCore * >(argp1);
  result = (arg1)->getGalvoDevice();
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMMCore_getChannelGroup(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CMMCore *arg1 = (CMMCore *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CMMCore_getChannelGroup",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CMMCore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CMMCore_getChannelGroup" "', argument " "1"" of type '" "CMMCore *""'"); 
  }
  arg1 = reinterpret_cast< CMMCore * >(argp1);
  result = (arg1)->getChannelGroup();
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMMCore_setCameraDevice(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CMMCore_setCameraDevice",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CMMCore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CMMCore_setCameraDevice" "', argument " "1"" of type '" "CMMCore *""'"); 
  }
  arg1 = reinterpret_cast< CMMCore * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CMMCore_setCameraDevice" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  try {
    (arg1)->setCameraDevice((char const *)arg2);
  }
  catch(CMMError &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new CMMError(static_cast< const CMMError& >(_e))),SWIGTYPE_p_CMMError,SWIG_POINTER_OWN), "CMMError", SWIGTYPE_p_CMMError); SWIG_fail;
  }
  
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMMCore_setShutterDevice(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CMMCore_setShutterDevice",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CMMCore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CMMCore_setShutterDevice" "', argument " "1"" of type '" "CMMCore *""'"); 
  }
  arg1 = reinterpret_cast< CMMCore * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CMMCore_setShutterDevice" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  try {
    (arg1)->setShutterDevice((char const *)arg2);
  }
  catch(CMMError &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new CMMError(static_cast< const CMMError& >(_e))),SWIGTYPE_p_CMMError,SWIG_POINTER_OWN), "CMMError", SWIGTYPE_p_CMMError); SWIG_fail;
  }
  
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMMCore_setFocusDevice(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CMMCore_setFocusDevice",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CMMCore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CMMCore_setFocusDevice" "', argument " "1"" of type '" "CMMCore *""'"); 
  }
  arg1 = reinterpret_cast< CMMCore * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CMMCore_setFocusDevice" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  try {
    (arg1)->setFocusDevice((char const *)arg2);
  }
  catch(CMMError &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new CMMError(static_cast< const CMMError& >(_e))),SWIGTYPE_p_CMMError,SWIG_POINTER_OWN), "CMMError", SWIGTYPE_p_CMMError); SWIG_fail;
  }
  
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMMCore_setXYStageDevice(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CMMCore_setXYStageDevice",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CMMCore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CMMCore_setXYStageDevice" "', argument " "1"" of type '" "CMMCore *""'"); 
  }
  arg1 = reinterpret_cast< CMMCore * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CMMCore_setXYStageDevice" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  try {
    (arg1)->setXYStageDevice((char const *)arg2);
  }
  catch(CMMError &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new CMMError(static_cast< const CMMError& >(_e))),SWIGTYPE_p_CMMError,SWIG_POINTER_OWN), "CMMError", SWIGTYPE_p_CMMError); SWIG_fail;
  }
  
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMMCore_setAutoFocusDevice(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CMMCore_setAutoFocusDevice",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CMMCore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CMMCore_setAutoFocusDevice" "', argument " "1"" of type '" "CMMCore *""'"); 
  }
  arg1 = reinterpret_cast< CMMCore * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CMMCore_setAutoFocusDevice" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  try {
    (arg1)->setAutoFocusDevice((char const *)arg2);
  }
  catch(CMMError &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new CMMError(static_cast< const CMMError& >(_e))),SWIGTYPE_p_CMMError,SWIG_POINTER_OWN), "CMMError", SWIGTYPE_p_CMMError); SWIG_fail;
  }
  
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMMCore_setImageProcessorDevice(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CMMCore_setImageProcessorDevice",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CMMCore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CMMCore_setImageProcessorDevice" "', argument " "1"" of type '" "CMMCore *""'"); 
  }
  arg1 = reinterpret_cast< CMMCore * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CMMCore_setImageProcessorDevice" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  try {
    (arg1)->setImageProcessorDevice((char const *)arg2);
  }
  catch(CMMError &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new CMMError(static_cast< const CMMError& >(_e))),SWIGTYPE_p_CMMError,SWIG_POINTER_OWN), "CMMError", SWIGTYPE_p_CMMError); SWIG_fail;
  }
  
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMMCore_setSLMDevice(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CMMCore_setSLMDevice",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CMMCore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CMMCore_setSLMDevice" "', argument " "1"" of type '" "CMMCore *""'"); 
  }
  arg1 = reinterpret_cast< CMMCore * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CMMCore_setSLMDevice" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  try {
    (arg1)->setSLMDevice((char const *)arg2);
  }
  catch(CMMError &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new CMMError(static_cast< const CMMError& >(_e))),SWIGTYPE_p_CMMError,SWIG_POINTER_OWN), "CMMError", SWIGTYPE_p_CMMError); SWIG_fail;
  }
  
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMMCore_setGalvoDevice(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CMMCore_setGalvoDevice",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CMMCore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CMMCore_setGalvoDevice" "', argument " "1"" of type '" "CMMCore *""'"); 
  }
  arg1 = reinterpret_cast< CMMCore * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CMMCore_setGalvoDevice" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  try {
    (arg1)->setGalvoDevice((char const *)arg2);
  }
  catch(CMMError &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new CMMError(static_cast< const CMMError& >(_e))),SWIGTYPE_p_CMMError,SWIG_POINTER_OWN), "CMMError", SWIGTYPE_p_CMMError); SWIG_fail;
  }
  
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMMCore_setChannelGroup(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CMMCore_setChannelGroup",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CMMCore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CMMCore_setChannelGroup" "', argument " "1"" of type '" "CMMCore *""'"); 
  }
  arg1 = reinterpret_cast< CMMCore * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CMMCore_setChannelGroup" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  try {
    (arg1)->setChannelGroup((char const *)arg2);
  }
  catch(CMMError &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new CMMError(static_cast< const CMMError& >(_e))),SWIGTYPE_p_CMMError,SWIG_POINTER_OWN), "CMMError", SWIGTYPE_p_CMMError); SWIG_fail;
  }
  
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMMCore_getSystemStateCache(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CMMCore *arg1 = (CMMCore *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Configuration result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CMMCore_getSystemStateCache",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CMMCore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CMMCore_getSystemStateCache" "', argument " "1"" of type '" "CMMCore const *""'"); 
  }
  arg1 = reinterpret_cast< CMMCore * >(argp1);
  result = ((CMMCore const *)arg1)->getSystemStateCache();
  resultobj = SWIG_NewPointerObj((new Configuration(static_cast< const Configuration& >(result))), SWIGTYPE_p_Configuration, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMMCore_updateSystemStateCache(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CMMCore *arg1 = (CMMCore *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CMMCore_updateSystemStateCache",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CMMCore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CMMCore_updateSystemStateCache" "', argument " "1"" of type '" "CMMCore *""'"); 
  }
  arg1 = reinterpret_cast< CMMCore * >(argp1);
  (arg1)->updateSystemStateCache();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMMCore_getPropertyFromCache(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:CMMCore_getPropertyFromCache",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CMMCore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CMMCore_getPropertyFromCache" "', argument " "1"" of type '" "CMMCore const *""'"); 
  }
  arg1 = reinterpret_cast< CMMCore * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CMMCore_getPropertyFromCache" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CMMCore_getPropertyFromCache" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  try {
    result = ((CMMCore const *)arg1)->getPropertyFromCache((char const *)arg2,(char const *)arg3);
  }
  catch(CMMError &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new CMMError(static_cast< const CMMError& >(_e))),SWIGTYPE_p_CMMError,SWIG_POINTER_OWN), "CMMError", SWIGTYPE_p_CMMError); SWIG_fail;
  }
  
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMMCore_getCurrentConfigFromCache(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CMMCore_getCurrentConfigFromCache",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CMMCore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CMMCore_getCurrentConfigFromCache" "', argument " "1"" of type '" "CMMCore *""'"); 
  }
  arg1 = reinterpret_cast< CMMCore * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CMMCore_getCurrentConfigFromCache" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  try {
    result = (arg1)->getCurrentConfigFromCache((char const *)arg2);
  }
  catch(CMMError &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new CMMError(static_cast< const CMMError& >(_e))),SWIGTYPE_p_CMMError,SWIG_POINTER_OWN), "CMMError", SWIGTYPE_p_CMMError); SWIG_fail;
  }
  
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMMCore_getConfigGroupStateFromCache(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Configuration result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CMMCore_getConfigGroupStateFromCache",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CMMCore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CMMCore_getConfigGroupStateFromCache" "', argument " "1"" of type '" "CMMCore *""'"); 
  }
  arg1 = reinterpret_cast< CMMCore * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CMMCore_getConfigGroupStateFromCache" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  try {
    result = (arg1)->getConfigGroupStateFromCache((char const *)arg2);
  }
  catch(CMMError &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new CMMError(static_cast< const CMMError& >(_e))),SWIGTYPE_p_CMMError,SWIG_POINTER_OWN), "CMMError", SWIGTYPE_p_CMMError); SWIG_fail;
  }
  
  resultobj = SWIG_NewPointerObj((new Configuration(static_cast< const Configuration& >(result))), SWIGTYPE_p_Configuration, SWIG_POINTER_OWN |  0 );
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMMCore_defineConfig__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:CMMCore_defineConfig",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CMMCore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CMMCore_defineConfig" "', argument " "1"" of type '" "CMMCore *""'"); 
  }
  arg1 = reinterpret_cast< CMMCore * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CMMCore_defineConfig" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CMMCore_defineConfig" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  try {
    (arg1)->defineConfig((char const *)arg2,(char const *)arg3);
  }
  catch(CMMError &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new CMMError(static_cast< const CMMError& >(_e))),SWIGTYPE_p_CMMError,SWIG_POINTER_OWN), "CMMError", SWIGTYPE_p_CMMError); SWIG_fail;
  }
  
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMMCore_defineConfig__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  char *arg5 = (char *) 0 ;
  char *arg6 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  int res5 ;
  char *buf5 = 0 ;
  int alloc5 = 0 ;
  int res6 ;
  char *buf6 = 0 ;
  int alloc6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:CMMCore_defineConfig",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CMMCore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CMMCore_defineConfig" "', argument " "1"" of type '" "CMMCore *""'"); 
  }
  arg1 = reinterpret_cast< CMMCore * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CMMCore_defineConfig" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CMMCore_defineConfig" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  res4 = SWIG_AsCharPtrAndSize(obj3, &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "CMMCore_defineConfig" "', argument " "4"" of type '" "char const *""'");
  }
  arg4 = reinterpret_cast< char * >(buf4);
  res5 = SWIG_AsCharPtrAndSize(obj4, &buf5, NULL, &alloc5);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "CMMCore_defineConfig" "', argument " "5"" of type '" "char const *""'");
  }
  arg5 = reinterpret_cast< char * >(buf5);
  res6 = SWIG_AsCharPtrAndSize(obj5, &buf6, NULL, &alloc6);
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "CMMCore_defineConfig" "', argument " "6"" of type '" "char const *""'");
  }
  arg6 = reinterpret_cast< char * >(buf6);
  try {
    (arg1)->defineConfig((char const *)arg2,(char const *)arg3,(char const *)arg4,(char const *)arg5,(char const *)arg6);
  }
  catch(CMMError &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new CMMError(static_cast< const CMMError& >(_e))),SWIGTYPE_p_CMMError,SWIG_POINTER_OWN), "CMMError", SWIGTYPE_p_CMMError); SWIG_fail;
  }
  
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMMCore_defineConfig(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[7];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 6); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_CMMCore, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_CMMCore_defineConfig__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_CMMCore, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_AsCharPtrAndSize(argv[3], 0, NULL, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            int res = SWIG_AsCharPtrAndSize(argv[4], 0, NULL, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              int res = SWIG_AsCharPtrAndSize(argv[5], 0, NULL, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                return _wrap_CMMCore_defineConfig__SWIG_1(self, args);
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'CMMCore_defineConfig'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    defineConfig(CMMCore *,char const *,char const *)\n"
    "    defineConfig(CMMCore *,char const *,char const *,char const *,char const *,char const *)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMMCore_defineConfigGroup(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CMMCore_defineConfigGroup",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CMMCore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CMMCore_defineConfigGroup" "', argument " "1"" of type '" "CMMCore *""'"); 
  }
  arg1 = reinterpret_cast< CMMCore * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CMMCore_defineConfigGroup" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  try {
    (arg1)->defineConfigGroup((char const *)arg2);
  }
  catch(CMMError &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new CMMError(static_cast< const CMMError& >(_e))),SWIGTYPE_p_CMMError,SWIG_POINTER_OWN), "CMMError", SWIGTYPE_p_CMMError); SWIG_fail;
  }
  
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMMCore_deleteConfigGroup(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CMMCore_deleteConfigGroup",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CMMCore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CMMCore_deleteConfigGroup" "', argument " "1"" of type '" "CMMCore *""'"); 
  }
  arg1 = reinterpret_cast< CMMCore * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CMMCore_deleteConfigGroup" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  try {
    (arg1)->deleteConfigGroup((char const *)arg2);
  }
  catch(CMMError &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new CMMError(static_cast< const CMMError& >(_e))),SWIGTYPE_p_CMMError,SWIG_POINTER_OWN), "CMMError", SWIGTYPE_p_CMMError); SWIG_fail;
  }
  
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMMCore_renameConfigGroup(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:CMMCore_renameConfigGroup",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CMMCore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CMMCore_renameConfigGroup" "', argument " "1"" of type '" "CMMCore *""'"); 
  }
  arg1 = reinterpret_cast< CMMCore * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CMMCore_renameConfigGroup" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CMMCore_renameConfigGroup" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  try {
    (arg1)->renameConfigGroup((char const *)arg2,(char const *)arg3);
  }
  catch(CMMError &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new CMMError(static_cast< const CMMError& >(_e))),SWIGTYPE_p_CMMError,SWIG_POINTER_OWN), "CMMError", SWIGTYPE_p_CMMError); SWIG_fail;
  }
  
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMMCore_isGroupDefined(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CMMCore_isGroupDefined",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CMMCore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CMMCore_isGroupDefined" "', argument " "1"" of type '" "CMMCore *""'"); 
  }
  arg1 = reinterpret_cast< CMMCore * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CMMCore_isGroupDefined" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  result = (bool)(arg1)->isGroupDefined((char const *)arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMMCore_isConfigDefined(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:CMMCore_isConfigDefined",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CMMCore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CMMCore_isConfigDefined" "', argument " "1"" of type '" "CMMCore *""'"); 
  }
  arg1 = reinterpret_cast< CMMCore * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CMMCore_isConfigDefined" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CMMCore_isConfigDefined" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  result = (bool)(arg1)->isConfigDefined((char const *)arg2,(char const *)arg3);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMMCore_setConfig(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:CMMCore_setConfig",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CMMCore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CMMCore_setConfig" "', argument " "1"" of type '" "CMMCore *""'"); 
  }
  arg1 = reinterpret_cast< CMMCore * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CMMCore_setConfig" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CMMCore_setConfig" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  try {
    (arg1)->setConfig((char const *)arg2,(char const *)arg3);
  }
  catch(CMMError &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new CMMError(static_cast< const CMMError& >(_e))),SWIGTYPE_p_CMMError,SWIG_POINTER_OWN), "CMMError", SWIGTYPE_p_CMMError); SWIG_fail;
  }
  
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMMCore_deleteConfig__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:CMMCore_deleteConfig",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CMMCore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CMMCore_deleteConfig" "', argument " "1"" of type '" "CMMCore *""'"); 
  }
  arg1 = reinterpret_cast< CMMCore * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CMMCore_deleteConfig" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CMMCore_deleteConfig" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  try {
    (arg1)->deleteConfig((char const *)arg2,(char const *)arg3);
  }
  catch(CMMError &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new CMMError(static_cast< const CMMError& >(_e))),SWIGTYPE_p_CMMError,SWIG_POINTER_OWN), "CMMError", SWIGTYPE_p_CMMError); SWIG_fail;
  }
  
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMMCore_deleteConfig__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  char *arg5 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  int res5 ;
  char *buf5 = 0 ;
  int alloc5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:CMMCore_deleteConfig",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CMMCore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CMMCore_deleteConfig" "', argument " "1"" of type '" "CMMCore *""'"); 
  }
  arg1 = reinterpret_cast< CMMCore * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CMMCore_deleteConfig" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CMMCore_deleteConfig" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  res4 = SWIG_AsCharPtrAndSize(obj3, &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "CMMCore_deleteConfig" "', argument " "4"" of type '" "char const *""'");
  }
  arg4 = reinterpret_cast< char * >(buf4);
  res5 = SWIG_AsCharPtrAndSize(obj4, &buf5, NULL, &alloc5);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "CMMCore_deleteConfig" "', argument " "5"" of type '" "char const *""'");
  }
  arg5 = reinterpret_cast< char * >(buf5);
  try {
    (arg1)->deleteConfig((char const *)arg2,(char const *)arg3,(char const *)arg4,(char const *)arg5);
  }
  catch(CMMError &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new CMMError(static_cast< const CMMError& >(_e))),SWIGTYPE_p_CMMError,SWIG_POINTER_OWN), "CMMError", SWIGTYPE_p_CMMError); SWIG_fail;
  }
  
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMMCore_deleteConfig(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[6];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 5); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_CMMCore, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_CMMCore_deleteConfig__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_CMMCore, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_AsCharPtrAndSize(argv[3], 0, NULL, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            int res = SWIG_AsCharPtrAndSize(argv[4], 0, NULL, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_CMMCore_deleteConfig__SWIG_1(self, args);
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'CMMCore_deleteConfig'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    deleteConfig(CMMCore *,char const *,char const *)\n"
    "    deleteConfig(CMMCore *,char const *,char const *,char const *,char const *)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMMCore_renameConfig(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:CMMCore_renameConfig",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CMMCore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CMMCore_renameConfig" "', argument " "1"" of type '" "CMMCore *""'"); 
  }
  arg1 = reinterpret_cast< CMMCore * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CMMCore_renameConfig" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CMMCore_renameConfig" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  res4 = SWIG_AsCharPtrAndSize(obj3, &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "CMMCore_renameConfig" "', argument " "4"" of type '" "char const *""'");
  }
  arg4 = reinterpret_cast< char * >(buf4);
  try {
    (arg1)->renameConfig((char const *)arg2,(char const *)arg3,(char const *)arg4);
  }
  catch(CMMError &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new CMMError(static_cast< const CMMError& >(_e))),SWIGTYPE_p_CMMError,SWIG_POINTER_OWN), "CMMError", SWIGTYPE_p_CMMError); SWIG_fail;
  }
  
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMMCore_getAvailableConfigGroups(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CMMCore *arg1 = (CMMCore *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::string,std::allocator< std::string > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CMMCore_getAvailableConfigGroups",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CMMCore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CMMCore_getAvailableConfigGroups" "', argument " "1"" of type '" "CMMCore const *""'"); 
  }
  arg1 = reinterpret_cast< CMMCore * >(argp1);
  result = ((CMMCore const *)arg1)->getAvailableConfigGroups();
  resultobj = swig::from(static_cast< std::vector<std::string,std::allocator< std::string > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMMCore_getAvailableConfigs(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< std::string,std::allocator< std::string > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CMMCore_getAvailableConfigs",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CMMCore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CMMCore_getAvailableConfigs" "', argument " "1"" of type '" "CMMCore const *""'"); 
  }
  arg1 = reinterpret_cast< CMMCore * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CMMCore_getAvailableConfigs" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  result = ((CMMCore const *)arg1)->getAvailableConfigs((char const *)arg2);
  resultobj = swig::from(static_cast< std::vector<std::string,std::allocator< std::string > > >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMMCore_getCurrentConfig(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CMMCore_getCurrentConfig",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CMMCore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CMMCore_getCurrentConfig" "', argument " "1"" of type '" "CMMCore *""'"); 
  }
  arg1 = reinterpret_cast< CMMCore * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CMMCore_getCurrentConfig" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  try {
    result = (arg1)->getCurrentConfig((char const *)arg2);
  }
  catch(CMMError &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new CMMError(static_cast< const CMMError& >(_e))),SWIGTYPE_p_CMMError,SWIG_POINTER_OWN), "CMMError", SWIGTYPE_p_CMMError); SWIG_fail;
  }
  
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMMCore_getConfigData(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  Configuration result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:CMMCore_getConfigData",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CMMCore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CMMCore_getConfigData" "', argument " "1"" of type '" "CMMCore *""'"); 
  }
  arg1 = reinterpret_cast< CMMCore * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CMMCore_getConfigData" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CMMCore_getConfigData" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  try {
    result = (arg1)->getConfigData((char const *)arg2,(char const *)arg3);
  }
  catch(CMMError &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new CMMError(static_cast< const CMMError& >(_e))),SWIGTYPE_p_CMMError,SWIG_POINTER_OWN), "CMMError", SWIGTYPE_p_CMMError); SWIG_fail;
  }
  
  resultobj = SWIG_NewPointerObj((new Configuration(static_cast< const Configuration& >(result))), SWIGTYPE_p_Configuration, SWIG_POINTER_OWN |  0 );
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMMCore_getCurrentPixelSizeConfig__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CMMCore *arg1 = (CMMCore *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CMMCore_getCurrentPixelSizeConfig",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CMMCore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CMMCore_getCurrentPixelSizeConfig" "', argument " "1"" of type '" "CMMCore *""'"); 
  }
  arg1 = reinterpret_cast< CMMCore * >(argp1);
  try {
    result = (arg1)->getCurrentPixelSizeConfig();
  }
  catch(CMMError &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new CMMError(static_cast< const CMMError& >(_e))),SWIGTYPE_p_CMMError,SWIG_POINTER_OWN), "CMMError", SWIGTYPE_p_CMMError); SWIG_fail;
  }
  
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMMCore_getCurrentPixelSizeConfig__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CMMCore *arg1 = (CMMCore *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CMMCore_getCurrentPixelSizeConfig",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CMMCore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CMMCore_getCurrentPixelSizeConfig" "', argument " "1"" of type '" "CMMCore *""'"); 
  }
  arg1 = reinterpret_cast< CMMCore * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CMMCore_getCurrentPixelSizeConfig" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  try {
    result = (arg1)->getCurrentPixelSizeConfig(arg2);
  }
  catch(CMMError &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new CMMError(static_cast< const CMMError& >(_e))),SWIGTYPE_p_CMMError,SWIG_POINTER_OWN), "CMMError", SWIGTYPE_p_CMMError); SWIG_fail;
  }
  
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMMCore_getCurrentPixelSizeConfig(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_CMMCore, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_CMMCore_getCurrentPixelSizeConfig__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_CMMCore, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_CMMCore_getCurrentPixelSizeConfig__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'CMMCore_getCurrentPixelSizeConfig'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    getCurrentPixelSizeConfig(CMMCore *)\n"
    "    getCurrentPixelSizeConfig(CMMCore *,bool)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMMCore_getPixelSizeUm__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CMMCore *arg1 = (CMMCore *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CMMCore_getPixelSizeUm",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CMMCore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CMMCore_getPixelSizeUm" "', argument " "1"" of type '" "CMMCore *""'"); 
  }
  arg1 = reinterpret_cast< CMMCore * >(argp1);
  result = (double)(arg1)->getPixelSizeUm();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMMCore_getPixelSizeUm__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CMMCore *arg1 = (CMMCore *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CMMCore_getPixelSizeUm",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CMMCore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CMMCore_getPixelSizeUm" "', argument " "1"" of type '" "CMMCore *""'"); 
  }
  arg1 = reinterpret_cast< CMMCore * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CMMCore_getPixelSizeUm" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  result = (double)(arg1)->getPixelSizeUm(arg2);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMMCore_getPixelSizeUm(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_CMMCore, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_CMMCore_getPixelSizeUm__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_CMMCore, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_CMMCore_getPixelSizeUm__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'CMMCore_getPixelSizeUm'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    getPixelSizeUm(CMMCore *)\n"
    "    getPixelSizeUm(CMMCore *,bool)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMMCore_getPixelSizeUmByID(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CMMCore_getPixelSizeUmByID",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CMMCore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CMMCore_getPixelSizeUmByID" "', argument " "1"" of type '" "CMMCore *""'"); 
  }
  arg1 = reinterpret_cast< CMMCore * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CMMCore_getPixelSizeUmByID" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  try {
    result = (double)(arg1)->getPixelSizeUmByID((char const *)arg2);
  }
  catch(CMMError &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new CMMError(static_cast< const CMMError& >(_e))),SWIGTYPE_p_CMMError,SWIG_POINTER_OWN), "CMMError", SWIGTYPE_p_CMMError); SWIG_fail;
  }
  
  resultobj = SWIG_From_double(static_cast< double >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMMCore_getPixelSizeAffine__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CMMCore *arg1 = (CMMCore *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< double,std::allocator< double > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CMMCore_getPixelSizeAffine",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CMMCore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CMMCore_getPixelSizeAffine" "', argument " "1"" of type '" "CMMCore *""'"); 
  }
  arg1 = reinterpret_cast< CMMCore * >(argp1);
  try {
    result = (arg1)->getPixelSizeAffine();
  }
  catch(CMMError &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new CMMError(static_cast< const CMMError& >(_e))),SWIGTYPE_p_CMMError,SWIG_POINTER_OWN), "CMMError", SWIGTYPE_p_CMMError); SWIG_fail;
  }
  
  resultobj = swig::from(static_cast< std::vector<double,std::allocator< double > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMMCore_getPixelSizeAffine__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CMMCore *arg1 = (CMMCore *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< double,std::allocator< double > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CMMCore_getPixelSizeAffine",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CMMCore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CMMCore_getPixelSizeAffine" "', argument " "1"" of type '" "CMMCore *""'"); 
  }
  arg1 = reinterpret_cast< CMMCore * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CMMCore_getPixelSizeAffine" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  try {
    result = (arg1)->getPixelSizeAffine(arg2);
  }
  catch(CMMError &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new CMMError(static_cast< const CMMError& >(_e))),SWIGTYPE_p_CMMError,SWIG_POINTER_OWN), "CMMError", SWIGTYPE_p_CMMError); SWIG_fail;
  }
  
  resultobj = swig::from(static_cast< std::vector<double,std::allocator< double > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMMCore_getPixelSizeAffine(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_CMMCore, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_CMMCore_getPixelSizeAffine__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_CMMCore, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_CMMCore_getPixelSizeAffine__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'CMMCore_getPixelSizeAffine'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    getPixelSizeAffine(CMMCore *)\n"
    "    getPixelSizeAffine(CMMCore *,bool)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMMCore_getPixelSizeAffineByID(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< double,std::allocator< double > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CMMCore_getPixelSizeAffineByID",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CMMCore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CMMCore_getPixelSizeAffineByID" "', argument " "1"" of type '" "CMMCore *""'"); 
  }
  arg1 = reinterpret_cast< CMMCore * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CMMCore_getPixelSizeAffineByID" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  try {
    result = (arg1)->getPixelSizeAffineByID((char const *)arg2);
  }
  catch(CMMError &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new CMMError(static_cast< const CMMError& >(_e))),SWIGTYPE_p_CMMError,SWIG_POINTER_OWN), "CMMError", SWIGTYPE_p_CMMError); SWIG_fail;
  }
  
  resultobj = swig::from(static_cast< std::vector<double,std::allocator< double > > >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMMCore_getMagnificationFactor(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CMMCore *arg1 = (CMMCore *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CMMCore_getMagnificationFactor",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CMMCore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CMMCore_getMagnificationFactor" "', argument " "1"" of type '" "CMMCore const *""'"); 
  }
  arg1 = reinterpret_cast< CMMCore * >(argp1);
  result = (double)((CMMCore const *)arg1)->getMagnificationFactor();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMMCore_setPixelSizeUm(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:CMMCore_setPixelSizeUm",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CMMCore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CMMCore_setPixelSizeUm" "', argument " "1"" of type '" "CMMCore *""'"); 
  }
  arg1 = reinterpret_cast< CMMCore * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CMMCore_setPixelSizeUm" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CMMCore_setPixelSizeUm" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  try {
    (arg1)->setPixelSizeUm((char const *)arg2,arg3);
  }
  catch(CMMError &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new CMMError(static_cast< const CMMError& >(_e))),SWIGTYPE_p_CMMError,SWIG_POINTER_OWN), "CMMError", SWIGTYPE_p_CMMError); SWIG_fail;
  }
  
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMMCore_setPixelSizeAffine(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  std::vector< double,std::allocator< double > > arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:CMMCore_setPixelSizeAffine",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CMMCore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CMMCore_setPixelSizeAffine" "', argument " "1"" of type '" "CMMCore *""'"); 
  }
  arg1 = reinterpret_cast< CMMCore * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CMMCore_setPixelSizeAffine" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  {
    std::vector<double,std::allocator< double > > *ptr = (std::vector<double,std::allocator< double > > *)0;
    int res = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "CMMCore_setPixelSizeAffine" "', argument " "3"" of type '" "std::vector< double,std::allocator< double > >""'"); 
    }
    arg3 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  try {
    (arg1)->setPixelSizeAffine((char const *)arg2,arg3);
  }
  catch(CMMError &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new CMMError(static_cast< const CMMError& >(_e))),SWIGTYPE_p_CMMError,SWIG_POINTER_OWN), "CMMError", SWIGTYPE_p_CMMError); SWIG_fail;
  }
  
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMMCore_definePixelSizeConfig__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  char *arg5 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  int res5 ;
  char *buf5 = 0 ;
  int alloc5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:CMMCore_definePixelSizeConfig",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CMMCore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CMMCore_definePixelSizeConfig" "', argument " "1"" of type '" "CMMCore *""'"); 
  }
  arg1 = reinterpret_cast< CMMCore * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CMMCore_definePixelSizeConfig" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CMMCore_definePixelSizeConfig" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  res4 = SWIG_AsCharPtrAndSize(obj3, &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "CMMCore_definePixelSizeConfig" "', argument " "4"" of type '" "char const *""'");
  }
  arg4 = reinterpret_cast< char * >(buf4);
  res5 = SWIG_AsCharPtrAndSize(obj4, &buf5, NULL, &alloc5);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "CMMCore_definePixelSizeConfig" "', argument " "5"" of type '" "char const *""'");
  }
  arg5 = reinterpret_cast< char * >(buf5);
  try {
    (arg1)->definePixelSizeConfig((char const *)arg2,(char const *)arg3,(char const *)arg4,(char const *)arg5);
  }
  catch(CMMError &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new CMMError(static_cast< const CMMError& >(_e))),SWIGTYPE_p_CMMError,SWIG_POINTER_OWN), "CMMError", SWIGTYPE_p_CMMError); SWIG_fail;
  }
  
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMMCore_definePixelSizeConfig__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CMMCore_definePixelSizeConfig",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CMMCore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CMMCore_definePixelSizeConfig" "', argument " "1"" of type '" "CMMCore *""'"); 
  }
  arg1 = reinterpret_cast< CMMCore * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CMMCore_definePixelSizeConfig" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  try {
    (arg1)->definePixelSizeConfig((char const *)arg2);
  }
  catch(CMMError &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new CMMError(static_cast< const CMMError& >(_e))),SWIGTYPE_p_CMMError,SWIG_POINTER_OWN), "CMMError", SWIGTYPE_p_CMMError); SWIG_fail;
  }
  
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMMCore_definePixelSizeConfig(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[6];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 5); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_CMMCore, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_CMMCore_definePixelSizeConfig__SWIG_1(self, args);
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_CMMCore, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_AsCharPtrAndSize(argv[3], 0, NULL, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            int res = SWIG_AsCharPtrAndSize(argv[4], 0, NULL, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_CMMCore_definePixelSizeConfig__SWIG_0(self, args);
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'CMMCore_definePixelSizeConfig'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    definePixelSizeConfig(CMMCore *,char const *,char const *,char const *,char const *)\n"
    "    definePixelSizeConfig(CMMCore *,char const *)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMMCore_getAvailablePixelSizeConfigs(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CMMCore *arg1 = (CMMCore *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::string,std::allocator< std::string > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CMMCore_getAvailablePixelSizeConfigs",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CMMCore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CMMCore_getAvailablePixelSizeConfigs" "', argument " "1"" of type '" "CMMCore const *""'"); 
  }
  arg1 = reinterpret_cast< CMMCore * >(argp1);
  result = ((CMMCore const *)arg1)->getAvailablePixelSizeConfigs();
  resultobj = swig::from(static_cast< std::vector<std::string,std::allocator< std::string > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMMCore_isPixelSizeConfigDefined(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CMMCore_isPixelSizeConfigDefined",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CMMCore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CMMCore_isPixelSizeConfigDefined" "', argument " "1"" of type '" "CMMCore const *""'"); 
  }
  arg1 = reinterpret_cast< CMMCore * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CMMCore_isPixelSizeConfigDefined" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  try {
    result = (bool)((CMMCore const *)arg1)->isPixelSizeConfigDefined((char const *)arg2);
  }
  catch(CMMError &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new CMMError(static_cast< const CMMError& >(_e))),SWIGTYPE_p_CMMError,SWIG_POINTER_OWN), "CMMError", SWIGTYPE_p_CMMError); SWIG_fail;
  }
  
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMMCore_setPixelSizeConfig(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CMMCore_setPixelSizeConfig",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CMMCore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CMMCore_setPixelSizeConfig" "', argument " "1"" of type '" "CMMCore *""'"); 
  }
  arg1 = reinterpret_cast< CMMCore * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CMMCore_setPixelSizeConfig" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  try {
    (arg1)->setPixelSizeConfig((char const *)arg2);
  }
  catch(CMMError &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new CMMError(static_cast< const CMMError& >(_e))),SWIGTYPE_p_CMMError,SWIG_POINTER_OWN), "CMMError", SWIGTYPE_p_CMMError); SWIG_fail;
  }
  
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMMCore_renamePixelSizeConfig(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:CMMCore_renamePixelSizeConfig",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CMMCore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CMMCore_renamePixelSizeConfig" "', argument " "1"" of type '" "CMMCore *""'"); 
  }
  arg1 = reinterpret_cast< CMMCore * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CMMCore_renamePixelSizeConfig" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CMMCore_renamePixelSizeConfig" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  try {
    (arg1)->renamePixelSizeConfig((char const *)arg2,(char const *)arg3);
  }
  catch(CMMError &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new CMMError(static_cast< const CMMError& >(_e))),SWIGTYPE_p_CMMError,SWIG_POINTER_OWN), "CMMError", SWIGTYPE_p_CMMError); SWIG_fail;
  }
  
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMMCore_deletePixelSizeConfig(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CMMCore_deletePixelSizeConfig",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CMMCore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CMMCore_deletePixelSizeConfig" "', argument " "1"" of type '" "CMMCore *""'"); 
  }
  arg1 = reinterpret_cast< CMMCore * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CMMCore_deletePixelSizeConfig" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  try {
    (arg1)->deletePixelSizeConfig((char const *)arg2);
  }
  catch(CMMError &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new CMMError(static_cast< const CMMError& >(_e))),SWIGTYPE_p_CMMError,SWIG_POINTER_OWN), "CMMError", SWIGTYPE_p_CMMError); SWIG_fail;
  }
  
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMMCore_getPixelSizeConfigData(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Configuration result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CMMCore_getPixelSizeConfigData",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CMMCore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CMMCore_getPixelSizeConfigData" "', argument " "1"" of type '" "CMMCore *""'"); 
  }
  arg1 = reinterpret_cast< CMMCore * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CMMCore_getPixelSizeConfigData" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  try {
    result = (arg1)->getPixelSizeConfigData((char const *)arg2);
  }
  catch(CMMError &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new CMMError(static_cast< const CMMError& >(_e))),SWIGTYPE_p_CMMError,SWIG_POINTER_OWN), "CMMError", SWIGTYPE_p_CMMError); SWIG_fail;
  }
  
  resultobj = SWIG_NewPointerObj((new Configuration(static_cast< const Configuration& >(result))), SWIGTYPE_p_Configuration, SWIG_POINTER_OWN |  0 );
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMMCore_definePropertyBlock(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:CMMCore_definePropertyBlock",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CMMCore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CMMCore_definePropertyBlock" "', argument " "1"" of type '" "CMMCore *""'"); 
  }
  arg1 = reinterpret_cast< CMMCore * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CMMCore_definePropertyBlock" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CMMCore_definePropertyBlock" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  res4 = SWIG_AsCharPtrAndSize(obj3, &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "CMMCore_definePropertyBlock" "', argument " "4"" of type '" "char const *""'");
  }
  arg4 = reinterpret_cast< char * >(buf4);
  (arg1)->definePropertyBlock((char const *)arg2,(char const *)arg3,(char const *)arg4);
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMMCore_getAvailablePropertyBlocks(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CMMCore *arg1 = (CMMCore *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::string,std::allocator< std::string > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CMMCore_getAvailablePropertyBlocks",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CMMCore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CMMCore_getAvailablePropertyBlocks" "', argument " "1"" of type '" "CMMCore const *""'"); 
  }
  arg1 = reinterpret_cast< CMMCore * >(argp1);
  result = ((CMMCore const *)arg1)->getAvailablePropertyBlocks();
  resultobj = swig::from(static_cast< std::vector<std::string,std::allocator< std::string > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMMCore_getPropertyBlockData(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PropertyBlock result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CMMCore_getPropertyBlockData",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CMMCore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CMMCore_getPropertyBlockData" "', argument " "1"" of type '" "CMMCore *""'"); 
  }
  arg1 = reinterpret_cast< CMMCore * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CMMCore_getPropertyBlockData" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  result = (arg1)->getPropertyBlockData((char const *)arg2);
  resultobj = SWIG_NewPointerObj((new PropertyBlock(static_cast< const PropertyBlock& >(result))), SWIGTYPE_p_PropertyBlock, SWIG_POINTER_OWN |  0 );
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMMCore_setROI__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CMMCore *arg1 = (CMMCore *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:CMMCore_setROI",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CMMCore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CMMCore_setROI" "', argument " "1"" of type '" "CMMCore *""'"); 
  }
  arg1 = reinterpret_cast< CMMCore * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CMMCore_setROI" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CMMCore_setROI" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "CMMCore_setROI" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_int(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "CMMCore_setROI" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  try {
    (arg1)->setROI(arg2,arg3,arg4,arg5);
  }
  catch(CMMError &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new CMMError(static_cast< const CMMError& >(_e))),SWIGTYPE_p_CMMError,SWIG_POINTER_OWN), "CMMError", SWIGTYPE_p_CMMError); SWIG_fail;
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMMCore_setROI__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  int val6 ;
  int ecode6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:CMMCore_setROI",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CMMCore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CMMCore_setROI" "', argument " "1"" of type '" "CMMCore *""'"); 
  }
  arg1 = reinterpret_cast< CMMCore * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CMMCore_setROI" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CMMCore_setROI" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "CMMCore_setROI" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  ecode5 = SWIG_AsVal_int(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "CMMCore_setROI" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  ecode6 = SWIG_AsVal_int(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "CMMCore_setROI" "', argument " "6"" of type '" "int""'");
  } 
  arg6 = static_cast< int >(val6);
  try {
    (arg1)->setROI((char const *)arg2,arg3,arg4,arg5,arg6);
  }
  catch(CMMError &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new CMMError(static_cast< const CMMError& >(_e))),SWIGTYPE_p_CMMError,SWIG_POINTER_OWN), "CMMError", SWIGTYPE_p_CMMError); SWIG_fail;
  }
  
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMMCore_setROI(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[7];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 6); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_CMMCore, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_CMMCore_setROI__SWIG_0(self, args);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_CMMCore, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_int(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                return _wrap_CMMCore_setROI__SWIG_1(self, args);
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'CMMCore_setROI'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    setROI(CMMCore *,int,int,int,int)\n"
    "    setROI(CMMCore *,char const *,int,int,int,int)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMMCore_getROI__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CMMCore *arg1 = (CMMCore *) 0 ;
  int *arg2 = 0 ;
  int *arg3 = 0 ;
  int *arg4 = 0 ;
  int *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int temp2 ;
  int res2 = SWIG_TMPOBJ ;
  int temp3 ;
  int res3 = SWIG_TMPOBJ ;
  int temp4 ;
  int res4 = SWIG_TMPOBJ ;
  int temp5 ;
  int res5 = SWIG_TMPOBJ ;
  PyObject * obj0 = 0 ;
  
  arg2 = &temp2;
  arg3 = &temp3;
  arg4 = &temp4;
  arg5 = &temp5;
  if (!PyArg_ParseTuple(args,(char *)"O:CMMCore_getROI",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CMMCore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CMMCore_getROI" "', argument " "1"" of type '" "CMMCore *""'"); 
  }
  arg1 = reinterpret_cast< CMMCore * >(argp1);
  try {
    (arg1)->getROI(*arg2,*arg3,*arg4,*arg5);
  }
  catch(CMMError &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new CMMError(static_cast< const CMMError& >(_e))),SWIGTYPE_p_CMMError,SWIG_POINTER_OWN), "CMMError", SWIGTYPE_p_CMMError); SWIG_fail;
  }
  
  resultobj = SWIG_Py_Void();
  if (SWIG_IsTmpObj(res2)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_int((*arg2)));
  } else {
    int new_flags = SWIG_IsNewObj(res2) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg2), SWIGTYPE_p_int, new_flags));
  }
  if (SWIG_IsTmpObj(res3)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_int((*arg3)));
  } else {
    int new_flags = SWIG_IsNewObj(res3) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg3), SWIGTYPE_p_int, new_flags));
  }
  if (SWIG_IsTmpObj(res4)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_int((*arg4)));
  } else {
    int new_flags = SWIG_IsNewObj(res4) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg4), SWIGTYPE_p_int, new_flags));
  }
  if (SWIG_IsTmpObj(res5)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_int((*arg5)));
  } else {
    int new_flags = SWIG_IsNewObj(res5) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg5), SWIGTYPE_p_int, new_flags));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMMCore_getROI__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  int *arg3 = 0 ;
  int *arg4 = 0 ;
  int *arg5 = 0 ;
  int *arg6 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int temp3 ;
  int res3 = SWIG_TMPOBJ ;
  int temp4 ;
  int res4 = SWIG_TMPOBJ ;
  int temp5 ;
  int res5 = SWIG_TMPOBJ ;
  int temp6 ;
  int res6 = SWIG_TMPOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  arg3 = &temp3;
  arg4 = &temp4;
  arg5 = &temp5;
  arg6 = &temp6;
  if (!PyArg_ParseTuple(args,(char *)"OO:CMMCore_getROI",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CMMCore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CMMCore_getROI" "', argument " "1"" of type '" "CMMCore *""'"); 
  }
  arg1 = reinterpret_cast< CMMCore * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CMMCore_getROI" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  try {
    (arg1)->getROI((char const *)arg2,*arg3,*arg4,*arg5,*arg6);
  }
  catch(CMMError &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new CMMError(static_cast< const CMMError& >(_e))),SWIGTYPE_p_CMMError,SWIG_POINTER_OWN), "CMMError", SWIGTYPE_p_CMMError); SWIG_fail;
  }
  
  resultobj = SWIG_Py_Void();
  if (SWIG_IsTmpObj(res3)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_int((*arg3)));
  } else {
    int new_flags = SWIG_IsNewObj(res3) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg3), SWIGTYPE_p_int, new_flags));
  }
  if (SWIG_IsTmpObj(res4)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_int((*arg4)));
  } else {
    int new_flags = SWIG_IsNewObj(res4) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg4), SWIGTYPE_p_int, new_flags));
  }
  if (SWIG_IsTmpObj(res5)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_int((*arg5)));
  } else {
    int new_flags = SWIG_IsNewObj(res5) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg5), SWIGTYPE_p_int, new_flags));
  }
  if (SWIG_IsTmpObj(res6)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_int((*arg6)));
  } else {
    int new_flags = SWIG_IsNewObj(res6) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg6), SWIGTYPE_p_int, new_flags));
  }
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMMCore_getROI(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_CMMCore, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_CMMCore_getROI__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_CMMCore, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_CMMCore_getROI__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'CMMCore_getROI'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    getROI(CMMCore *,int &,int &,int &,int &)\n"
    "    getROI(CMMCore *,char const *,int &,int &,int &,int &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMMCore_clearROI(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CMMCore *arg1 = (CMMCore *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CMMCore_clearROI",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CMMCore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CMMCore_clearROI" "', argument " "1"" of type '" "CMMCore *""'"); 
  }
  arg1 = reinterpret_cast< CMMCore * >(argp1);
  try {
    (arg1)->clearROI();
  }
  catch(CMMError &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new CMMError(static_cast< const CMMError& >(_e))),SWIGTYPE_p_CMMError,SWIG_POINTER_OWN), "CMMError", SWIGTYPE_p_CMMError); SWIG_fail;
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMMCore_isMultiROISupported(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CMMCore *arg1 = (CMMCore *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CMMCore_isMultiROISupported",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CMMCore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CMMCore_isMultiROISupported" "', argument " "1"" of type '" "CMMCore *""'"); 
  }
  arg1 = reinterpret_cast< CMMCore * >(argp1);
  try {
    result = (bool)(arg1)->isMultiROISupported();
  }
  catch(CMMError &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new CMMError(static_cast< const CMMError& >(_e))),SWIGTYPE_p_CMMError,SWIG_POINTER_OWN), "CMMError", SWIGTYPE_p_CMMError); SWIG_fail;
  }
  
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMMCore_isMultiROIEnabled(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CMMCore *arg1 = (CMMCore *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CMMCore_isMultiROIEnabled",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CMMCore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CMMCore_isMultiROIEnabled" "', argument " "1"" of type '" "CMMCore *""'"); 
  }
  arg1 = reinterpret_cast< CMMCore * >(argp1);
  try {
    result = (bool)(arg1)->isMultiROIEnabled();
  }
  catch(CMMError &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new CMMError(static_cast< const CMMError& >(_e))),SWIGTYPE_p_CMMError,SWIG_POINTER_OWN), "CMMError", SWIGTYPE_p_CMMError); SWIG_fail;
  }
  
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMMCore_setMultiROI(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CMMCore *arg1 = (CMMCore *) 0 ;
  SwigValueWrapper< std::vector< unsigned int,std::allocator< unsigned int > > > arg2 ;
  SwigValueWrapper< std::vector< unsigned int,std::allocator< unsigned int > > > arg3 ;
  SwigValueWrapper< std::vector< unsigned int,std::allocator< unsigned int > > > arg4 ;
  SwigValueWrapper< std::vector< unsigned int,std::allocator< unsigned int > > > arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  void *argp5 ;
  int res5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:CMMCore_setMultiROI",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CMMCore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CMMCore_setMultiROI" "', argument " "1"" of type '" "CMMCore *""'"); 
  }
  arg1 = reinterpret_cast< CMMCore * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CMMCore_setMultiROI" "', argument " "2"" of type '" "std::vector< unsigned int,std::allocator< unsigned int > >""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CMMCore_setMultiROI" "', argument " "2"" of type '" "std::vector< unsigned int,std::allocator< unsigned int > >""'");
    } else {
      std::vector< unsigned int,std::allocator< unsigned int > > * temp = reinterpret_cast< std::vector< unsigned int,std::allocator< unsigned int > > * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CMMCore_setMultiROI" "', argument " "3"" of type '" "std::vector< unsigned int,std::allocator< unsigned int > >""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CMMCore_setMultiROI" "', argument " "3"" of type '" "std::vector< unsigned int,std::allocator< unsigned int > >""'");
    } else {
      std::vector< unsigned int,std::allocator< unsigned int > > * temp = reinterpret_cast< std::vector< unsigned int,std::allocator< unsigned int > > * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  {
    res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t,  0  | 0);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "CMMCore_setMultiROI" "', argument " "4"" of type '" "std::vector< unsigned int,std::allocator< unsigned int > >""'"); 
    }  
    if (!argp4) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CMMCore_setMultiROI" "', argument " "4"" of type '" "std::vector< unsigned int,std::allocator< unsigned int > >""'");
    } else {
      std::vector< unsigned int,std::allocator< unsigned int > > * temp = reinterpret_cast< std::vector< unsigned int,std::allocator< unsigned int > > * >(argp4);
      arg4 = *temp;
      if (SWIG_IsNewObj(res4)) delete temp;
    }
  }
  {
    res5 = SWIG_ConvertPtr(obj4, &argp5, SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t,  0  | 0);
    if (!SWIG_IsOK(res5)) {
      SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "CMMCore_setMultiROI" "', argument " "5"" of type '" "std::vector< unsigned int,std::allocator< unsigned int > >""'"); 
    }  
    if (!argp5) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CMMCore_setMultiROI" "', argument " "5"" of type '" "std::vector< unsigned int,std::allocator< unsigned int > >""'");
    } else {
      std::vector< unsigned int,std::allocator< unsigned int > > * temp = reinterpret_cast< std::vector< unsigned int,std::allocator< unsigned int > > * >(argp5);
      arg5 = *temp;
      if (SWIG_IsNewObj(res5)) delete temp;
    }
  }
  try {
    (arg1)->setMultiROI(arg2,arg3,arg4,arg5);
  }
  catch(CMMError &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new CMMError(static_cast< const CMMError& >(_e))),SWIGTYPE_p_CMMError,SWIG_POINTER_OWN), "CMMError", SWIGTYPE_p_CMMError); SWIG_fail;
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMMCore_getMultiROI(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CMMCore *arg1 = (CMMCore *) 0 ;
  std::vector< unsigned int,std::allocator< unsigned int > > *arg2 = 0 ;
  std::vector< unsigned int,std::allocator< unsigned int > > *arg3 = 0 ;
  std::vector< unsigned int,std::allocator< unsigned int > > *arg4 = 0 ;
  std::vector< unsigned int,std::allocator< unsigned int > > *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:CMMCore_getMultiROI",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CMMCore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CMMCore_getMultiROI" "', argument " "1"" of type '" "CMMCore *""'"); 
  }
  arg1 = reinterpret_cast< CMMCore * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CMMCore_getMultiROI" "', argument " "2"" of type '" "std::vector< unsigned int,std::allocator< unsigned int > > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CMMCore_getMultiROI" "', argument " "2"" of type '" "std::vector< unsigned int,std::allocator< unsigned int > > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< unsigned int,std::allocator< unsigned int > > * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CMMCore_getMultiROI" "', argument " "3"" of type '" "std::vector< unsigned int,std::allocator< unsigned int > > &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CMMCore_getMultiROI" "', argument " "3"" of type '" "std::vector< unsigned int,std::allocator< unsigned int > > &""'"); 
  }
  arg3 = reinterpret_cast< std::vector< unsigned int,std::allocator< unsigned int > > * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "CMMCore_getMultiROI" "', argument " "4"" of type '" "std::vector< unsigned int,std::allocator< unsigned int > > &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CMMCore_getMultiROI" "', argument " "4"" of type '" "std::vector< unsigned int,std::allocator< unsigned int > > &""'"); 
  }
  arg4 = reinterpret_cast< std::vector< unsigned int,std::allocator< unsigned int > > * >(argp4);
  res5 = SWIG_ConvertPtr(obj4, &argp5, SWIGTYPE_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t,  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "CMMCore_getMultiROI" "', argument " "5"" of type '" "std::vector< unsigned int,std::allocator< unsigned int > > &""'"); 
  }
  if (!argp5) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CMMCore_getMultiROI" "', argument " "5"" of type '" "std::vector< unsigned int,std::allocator< unsigned int > > &""'"); 
  }
  arg5 = reinterpret_cast< std::vector< unsigned int,std::allocator< unsigned int > > * >(argp5);
  try {
    (arg1)->getMultiROI(*arg2,*arg3,*arg4,*arg5);
  }
  catch(CMMError &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new CMMError(static_cast< const CMMError& >(_e))),SWIGTYPE_p_CMMError,SWIG_POINTER_OWN), "CMMError", SWIGTYPE_p_CMMError); SWIG_fail;
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMMCore_setExposure__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CMMCore *arg1 = (CMMCore *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CMMCore_setExposure",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CMMCore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CMMCore_setExposure" "', argument " "1"" of type '" "CMMCore *""'"); 
  }
  arg1 = reinterpret_cast< CMMCore * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CMMCore_setExposure" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  try {
    (arg1)->setExposure(arg2);
  }
  catch(CMMError &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new CMMError(static_cast< const CMMError& >(_e))),SWIGTYPE_p_CMMError,SWIG_POINTER_OWN), "CMMError", SWIGTYPE_p_CMMError); SWIG_fail;
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMMCore_setExposure__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:CMMCore_setExposure",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CMMCore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CMMCore_setExposure" "', argument " "1"" of type '" "CMMCore *""'"); 
  }
  arg1 = reinterpret_cast< CMMCore * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CMMCore_setExposure" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CMMCore_setExposure" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  try {
    (arg1)->setExposure((char const *)arg2,arg3);
  }
  catch(CMMError &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new CMMError(static_cast< const CMMError& >(_e))),SWIGTYPE_p_CMMError,SWIG_POINTER_OWN), "CMMError", SWIGTYPE_p_CMMError); SWIG_fail;
  }
  
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMMCore_setExposure(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_CMMCore, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_CMMCore_setExposure__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_CMMCore, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_CMMCore_setExposure__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'CMMCore_setExposure'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    setExposure(CMMCore *,double)\n"
    "    setExposure(CMMCore *,char const *,double)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMMCore_getExposure__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CMMCore *arg1 = (CMMCore *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CMMCore_getExposure",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CMMCore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CMMCore_getExposure" "', argument " "1"" of type '" "CMMCore *""'"); 
  }
  arg1 = reinterpret_cast< CMMCore * >(argp1);
  try {
    result = (double)(arg1)->getExposure();
  }
  catch(CMMError &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new CMMError(static_cast< const CMMError& >(_e))),SWIGTYPE_p_CMMError,SWIG_POINTER_OWN), "CMMError", SWIGTYPE_p_CMMError); SWIG_fail;
  }
  
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMMCore_getExposure__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CMMCore_getExposure",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CMMCore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CMMCore_getExposure" "', argument " "1"" of type '" "CMMCore *""'"); 
  }
  arg1 = reinterpret_cast< CMMCore * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CMMCore_getExposure" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  try {
    result = (double)(arg1)->getExposure((char const *)arg2);
  }
  catch(CMMError &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new CMMError(static_cast< const CMMError& >(_e))),SWIGTYPE_p_CMMError,SWIG_POINTER_OWN), "CMMError", SWIGTYPE_p_CMMError); SWIG_fail;
  }
  
  resultobj = SWIG_From_double(static_cast< double >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMMCore_getExposure(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_CMMCore, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_CMMCore_getExposure__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_CMMCore, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_CMMCore_getExposure__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'CMMCore_getExposure'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    getExposure(CMMCore *)\n"
    "    getExposure(CMMCore *,char const *)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMMCore_snapImage(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CMMCore *arg1 = (CMMCore *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CMMCore_snapImage",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CMMCore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CMMCore_snapImage" "', argument " "1"" of type '" "CMMCore *""'"); 
  }
  arg1 = reinterpret_cast< CMMCore * >(argp1);
  try {
    (arg1)->snapImage();
  }
  catch(CMMError &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new CMMError(static_cast< const CMMError& >(_e))),SWIGTYPE_p_CMMError,SWIG_POINTER_OWN), "CMMError", SWIGTYPE_p_CMMError); SWIG_fail;
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMMCore_getImage__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CMMCore *arg1 = (CMMCore *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  void *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CMMCore_getImage",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CMMCore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CMMCore_getImage" "', argument " "1"" of type '" "CMMCore *""'"); 
  }
  arg1 = reinterpret_cast< CMMCore * >(argp1);
  try {
    result = (void *)(arg1)->getImage();
  }
  catch(CMMError &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new CMMError(static_cast< const CMMError& >(_e))),SWIGTYPE_p_CMMError,SWIG_POINTER_OWN), "CMMError", SWIGTYPE_p_CMMError); SWIG_fail;
  }
  
  {
    npy_intp dims[2];
    dims[0] = (arg1)->getImageHeight();
    dims[1] = (arg1)->getImageWidth();
    npy_intp pixelCount = dims[0] * dims[1];
    
    if ((arg1)->getBytesPerPixel() == 1)
    {
      PyObject * numpyArray = PyArray_SimpleNew(2, dims, NPY_UINT8);
      memcpy(PyArray_DATA((PyArrayObject *) numpyArray), result, pixelCount);
      resultobj = numpyArray;
    }
    else if ((arg1)->getBytesPerPixel() == 2)
    {
      PyObject * numpyArray = PyArray_SimpleNew(2, dims, NPY_UINT16);
      memcpy(PyArray_DATA((PyArrayObject *) numpyArray), result, pixelCount * 2);
      resultobj = numpyArray;
    }
    else if ((arg1)->getBytesPerPixel() == 4)
    {
      PyObject * numpyArray = PyArray_SimpleNew(2, dims, NPY_UINT32);
      memcpy(PyArray_DATA((PyArrayObject *) numpyArray), result, pixelCount * 4);
      resultobj = numpyArray;
    }
    else if ((arg1)->getBytesPerPixel() == 8)
    {
      PyObject * numpyArray = PyArray_SimpleNew(2, dims, NPY_UINT64);
      memcpy(PyArray_DATA((PyArrayObject *) numpyArray), result, pixelCount * 8);
      resultobj = numpyArray;
    }
    else
    {
      // don't know how to map
      // TODO: thow exception?
      // XXX Must do something, as returning NULL without setting error results
      // in an opaque error.
      resultobj = 0;
    }
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMMCore_getImage__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CMMCore *arg1 = (CMMCore *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  void *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CMMCore_getImage",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CMMCore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CMMCore_getImage" "', argument " "1"" of type '" "CMMCore *""'"); 
  }
  arg1 = reinterpret_cast< CMMCore * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CMMCore_getImage" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  try {
    result = (void *)(arg1)->getImage(arg2);
  }
  catch(CMMError &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new CMMError(static_cast< const CMMError& >(_e))),SWIGTYPE_p_CMMError,SWIG_POINTER_OWN), "CMMError", SWIGTYPE_p_CMMError); SWIG_fail;
  }
  
  {
    npy_intp dims[2];
    dims[0] = (arg1)->getImageHeight();
    dims[1] = (arg1)->getImageWidth();
    npy_intp pixelCount = dims[0] * dims[1];
    
    if ((arg1)->getBytesPerPixel() == 1)
    {
      PyObject * numpyArray = PyArray_SimpleNew(2, dims, NPY_UINT8);
      memcpy(PyArray_DATA((PyArrayObject *) numpyArray), result, pixelCount);
      resultobj = numpyArray;
    }
    else if ((arg1)->getBytesPerPixel() == 2)
    {
      PyObject * numpyArray = PyArray_SimpleNew(2, dims, NPY_UINT16);
      memcpy(PyArray_DATA((PyArrayObject *) numpyArray), result, pixelCount * 2);
      resultobj = numpyArray;
    }
    else if ((arg1)->getBytesPerPixel() == 4)
    {
      PyObject * numpyArray = PyArray_SimpleNew(2, dims, NPY_UINT32);
      memcpy(PyArray_DATA((PyArrayObject *) numpyArray), result, pixelCount * 4);
      resultobj = numpyArray;
    }
    else if ((arg1)->getBytesPerPixel() == 8)
    {
      PyObject * numpyArray = PyArray_SimpleNew(2, dims, NPY_UINT64);
      memcpy(PyArray_DATA((PyArrayObject *) numpyArray), result, pixelCount * 8);
      resultobj = numpyArray;
    }
    else
    {
      // don't know how to map
      // TODO: thow exception?
      // XXX Must do something, as returning NULL without setting error results
      // in an opaque error.
      resultobj = 0;
    }
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMMCore_getImage(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_CMMCore, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_CMMCore_getImage__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_CMMCore, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_CMMCore_getImage__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'CMMCore_getImage'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    getImage(CMMCore *)\n"
    "    getImage(CMMCore *,unsigned int)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMMCore_getImageWidth(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CMMCore *arg1 = (CMMCore *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CMMCore_getImageWidth",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CMMCore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CMMCore_getImageWidth" "', argument " "1"" of type '" "CMMCore *""'"); 
  }
  arg1 = reinterpret_cast< CMMCore * >(argp1);
  result = (unsigned int)(arg1)->getImageWidth();
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMMCore_getImageHeight(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CMMCore *arg1 = (CMMCore *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CMMCore_getImageHeight",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CMMCore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CMMCore_getImageHeight" "', argument " "1"" of type '" "CMMCore *""'"); 
  }
  arg1 = reinterpret_cast< CMMCore * >(argp1);
  result = (unsigned int)(arg1)->getImageHeight();
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMMCore_getBytesPerPixel(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CMMCore *arg1 = (CMMCore *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CMMCore_getBytesPerPixel",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CMMCore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CMMCore_getBytesPerPixel" "', argument " "1"" of type '" "CMMCore *""'"); 
  }
  arg1 = reinterpret_cast< CMMCore * >(argp1);
  result = (unsigned int)(arg1)->getBytesPerPixel();
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMMCore_getImageBitDepth(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CMMCore *arg1 = (CMMCore *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CMMCore_getImageBitDepth",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CMMCore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CMMCore_getImageBitDepth" "', argument " "1"" of type '" "CMMCore *""'"); 
  }
  arg1 = reinterpret_cast< CMMCore * >(argp1);
  result = (unsigned int)(arg1)->getImageBitDepth();
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMMCore_getNumberOfComponents(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CMMCore *arg1 = (CMMCore *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CMMCore_getNumberOfComponents",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CMMCore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CMMCore_getNumberOfComponents" "', argument " "1"" of type '" "CMMCore *""'"); 
  }
  arg1 = reinterpret_cast< CMMCore * >(argp1);
  result = (unsigned int)(arg1)->getNumberOfComponents();
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMMCore_getNumberOfCameraChannels(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CMMCore *arg1 = (CMMCore *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CMMCore_getNumberOfCameraChannels",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CMMCore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CMMCore_getNumberOfCameraChannels" "', argument " "1"" of type '" "CMMCore *""'"); 
  }
  arg1 = reinterpret_cast< CMMCore * >(argp1);
  result = (unsigned int)(arg1)->getNumberOfCameraChannels();
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMMCore_getCameraChannelName(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CMMCore *arg1 = (CMMCore *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CMMCore_getCameraChannelName",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CMMCore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CMMCore_getCameraChannelName" "', argument " "1"" of type '" "CMMCore *""'"); 
  }
  arg1 = reinterpret_cast< CMMCore * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CMMCore_getCameraChannelName" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  result = (arg1)->getCameraChannelName(arg2);
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMMCore_getImageBufferSize(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CMMCore *arg1 = (CMMCore *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  long result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CMMCore_getImageBufferSize",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CMMCore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CMMCore_getImageBufferSize" "', argument " "1"" of type '" "CMMCore *""'"); 
  }
  arg1 = reinterpret_cast< CMMCore * >(argp1);
  result = (long)(arg1)->getImageBufferSize();
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMMCore_assignImageSynchro(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CMMCore_assignImageSynchro",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CMMCore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CMMCore_assignImageSynchro" "', argument " "1"" of type '" "CMMCore *""'"); 
  }
  arg1 = reinterpret_cast< CMMCore * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CMMCore_assignImageSynchro" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  try {
    (arg1)->assignImageSynchro((char const *)arg2);
  }
  catch(CMMError &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new CMMError(static_cast< const CMMError& >(_e))),SWIGTYPE_p_CMMError,SWIG_POINTER_OWN), "CMMError", SWIGTYPE_p_CMMError); SWIG_fail;
  }
  
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMMCore_removeImageSynchro(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CMMCore_removeImageSynchro",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CMMCore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CMMCore_removeImageSynchro" "', argument " "1"" of type '" "CMMCore *""'"); 
  }
  arg1 = reinterpret_cast< CMMCore * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CMMCore_removeImageSynchro" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  try {
    (arg1)->removeImageSynchro((char const *)arg2);
  }
  catch(CMMError &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new CMMError(static_cast< const CMMError& >(_e))),SWIGTYPE_p_CMMError,SWIG_POINTER_OWN), "CMMError", SWIGTYPE_p_CMMError); SWIG_fail;
  }
  
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMMCore_removeImageSynchroAll(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CMMCore *arg1 = (CMMCore *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CMMCore_removeImageSynchroAll",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CMMCore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CMMCore_removeImageSynchroAll" "', argument " "1"" of type '" "CMMCore *""'"); 
  }
  arg1 = reinterpret_cast< CMMCore * >(argp1);
  (arg1)->removeImageSynchroAll();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMMCore_setAutoShutter(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CMMCore *arg1 = (CMMCore *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CMMCore_setAutoShutter",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CMMCore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CMMCore_setAutoShutter" "', argument " "1"" of type '" "CMMCore *""'"); 
  }
  arg1 = reinterpret_cast< CMMCore * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CMMCore_setAutoShutter" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  (arg1)->setAutoShutter(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMMCore_getAutoShutter(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CMMCore *arg1 = (CMMCore *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CMMCore_getAutoShutter",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CMMCore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CMMCore_getAutoShutter" "', argument " "1"" of type '" "CMMCore *""'"); 
  }
  arg1 = reinterpret_cast< CMMCore * >(argp1);
  result = (bool)(arg1)->getAutoShutter();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMMCore_setShutterOpen__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CMMCore *arg1 = (CMMCore *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CMMCore_setShutterOpen",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CMMCore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CMMCore_setShutterOpen" "', argument " "1"" of type '" "CMMCore *""'"); 
  }
  arg1 = reinterpret_cast< CMMCore * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CMMCore_setShutterOpen" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  try {
    (arg1)->setShutterOpen(arg2);
  }
  catch(CMMError &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new CMMError(static_cast< const CMMError& >(_e))),SWIGTYPE_p_CMMError,SWIG_POINTER_OWN), "CMMError", SWIGTYPE_p_CMMError); SWIG_fail;
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMMCore_getShutterOpen__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CMMCore *arg1 = (CMMCore *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CMMCore_getShutterOpen",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CMMCore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CMMCore_getShutterOpen" "', argument " "1"" of type '" "CMMCore *""'"); 
  }
  arg1 = reinterpret_cast< CMMCore * >(argp1);
  try {
    result = (bool)(arg1)->getShutterOpen();
  }
  catch(CMMError &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new CMMError(static_cast< const CMMError& >(_e))),SWIGTYPE_p_CMMError,SWIG_POINTER_OWN), "CMMError", SWIGTYPE_p_CMMError); SWIG_fail;
  }
  
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMMCore_setShutterOpen__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:CMMCore_setShutterOpen",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CMMCore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CMMCore_setShutterOpen" "', argument " "1"" of type '" "CMMCore *""'"); 
  }
  arg1 = reinterpret_cast< CMMCore * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CMMCore_setShutterOpen" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CMMCore_setShutterOpen" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  try {
    (arg1)->setShutterOpen((char const *)arg2,arg3);
  }
  catch(CMMError &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new CMMError(static_cast< const CMMError& >(_e))),SWIGTYPE_p_CMMError,SWIG_POINTER_OWN), "CMMError", SWIGTYPE_p_CMMError); SWIG_fail;
  }
  
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMMCore_setShutterOpen(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_CMMCore, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_CMMCore_setShutterOpen__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_CMMCore, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_CMMCore_setShutterOpen__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'CMMCore_setShutterOpen'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    setShutterOpen(CMMCore *,bool)\n"
    "    setShutterOpen(CMMCore *,char const *,bool)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMMCore_getShutterOpen__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CMMCore_getShutterOpen",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CMMCore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CMMCore_getShutterOpen" "', argument " "1"" of type '" "CMMCore *""'"); 
  }
  arg1 = reinterpret_cast< CMMCore * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CMMCore_getShutterOpen" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  try {
    result = (bool)(arg1)->getShutterOpen((char const *)arg2);
  }
  catch(CMMError &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new CMMError(static_cast< const CMMError& >(_e))),SWIGTYPE_p_CMMError,SWIG_POINTER_OWN), "CMMError", SWIGTYPE_p_CMMError); SWIG_fail;
  }
  
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMMCore_getShutterOpen(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_CMMCore, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_CMMCore_getShutterOpen__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_CMMCore, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_CMMCore_getShutterOpen__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'CMMCore_getShutterOpen'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    getShutterOpen(CMMCore *)\n"
    "    getShutterOpen(CMMCore *,char const *)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMMCore_startSequenceAcquisition__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CMMCore *arg1 = (CMMCore *) 0 ;
  long arg2 ;
  double arg3 ;
  bool arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:CMMCore_startSequenceAcquisition",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CMMCore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CMMCore_startSequenceAcquisition" "', argument " "1"" of type '" "CMMCore *""'"); 
  }
  arg1 = reinterpret_cast< CMMCore * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CMMCore_startSequenceAcquisition" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CMMCore_startSequenceAcquisition" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_bool(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "CMMCore_startSequenceAcquisition" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = static_cast< bool >(val4);
  try {
    (arg1)->startSequenceAcquisition(arg2,arg3,arg4);
  }
  catch(CMMError &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new CMMError(static_cast< const CMMError& >(_e))),SWIGTYPE_p_CMMError,SWIG_POINTER_OWN), "CMMError", SWIGTYPE_p_CMMError); SWIG_fail;
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMMCore_startSequenceAcquisition__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  long arg3 ;
  double arg4 ;
  bool arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  bool val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:CMMCore_startSequenceAcquisition",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CMMCore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CMMCore_startSequenceAcquisition" "', argument " "1"" of type '" "CMMCore *""'"); 
  }
  arg1 = reinterpret_cast< CMMCore * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CMMCore_startSequenceAcquisition" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CMMCore_startSequenceAcquisition" "', argument " "3"" of type '" "long""'");
  } 
  arg3 = static_cast< long >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "CMMCore_startSequenceAcquisition" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  ecode5 = SWIG_AsVal_bool(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "CMMCore_startSequenceAcquisition" "', argument " "5"" of type '" "bool""'");
  } 
  arg5 = static_cast< bool >(val5);
  try {
    (arg1)->startSequenceAcquisition((char const *)arg2,arg3,arg4,arg5);
  }
  catch(CMMError &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new CMMError(static_cast< const CMMError& >(_e))),SWIGTYPE_p_CMMError,SWIG_POINTER_OWN), "CMMError", SWIGTYPE_p_CMMError); SWIG_fail;
  }
  
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMMCore_startSequenceAcquisition(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[6];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 5); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_CMMCore, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_bool(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_CMMCore_startSequenceAcquisition__SWIG_0(self, args);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_CMMCore, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_bool(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_CMMCore_startSequenceAcquisition__SWIG_1(self, args);
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'CMMCore_startSequenceAcquisition'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    startSequenceAcquisition(CMMCore *,long,double,bool)\n"
    "    startSequenceAcquisition(CMMCore *,char const *,long,double,bool)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMMCore_prepareSequenceAcquisition(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CMMCore_prepareSequenceAcquisition",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CMMCore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CMMCore_prepareSequenceAcquisition" "', argument " "1"" of type '" "CMMCore *""'"); 
  }
  arg1 = reinterpret_cast< CMMCore * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CMMCore_prepareSequenceAcquisition" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  try {
    (arg1)->prepareSequenceAcquisition((char const *)arg2);
  }
  catch(CMMError &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new CMMError(static_cast< const CMMError& >(_e))),SWIGTYPE_p_CMMError,SWIG_POINTER_OWN), "CMMError", SWIGTYPE_p_CMMError); SWIG_fail;
  }
  
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMMCore_startContinuousSequenceAcquisition(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CMMCore *arg1 = (CMMCore *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CMMCore_startContinuousSequenceAcquisition",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CMMCore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CMMCore_startContinuousSequenceAcquisition" "', argument " "1"" of type '" "CMMCore *""'"); 
  }
  arg1 = reinterpret_cast< CMMCore * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CMMCore_startContinuousSequenceAcquisition" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  try {
    (arg1)->startContinuousSequenceAcquisition(arg2);
  }
  catch(CMMError &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new CMMError(static_cast< const CMMError& >(_e))),SWIGTYPE_p_CMMError,SWIG_POINTER_OWN), "CMMError", SWIGTYPE_p_CMMError); SWIG_fail;
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMMCore_stopSequenceAcquisition__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CMMCore *arg1 = (CMMCore *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CMMCore_stopSequenceAcquisition",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CMMCore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CMMCore_stopSequenceAcquisition" "', argument " "1"" of type '" "CMMCore *""'"); 
  }
  arg1 = reinterpret_cast< CMMCore * >(argp1);
  try {
    (arg1)->stopSequenceAcquisition();
  }
  catch(CMMError &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new CMMError(static_cast< const CMMError& >(_e))),SWIGTYPE_p_CMMError,SWIG_POINTER_OWN), "CMMError", SWIGTYPE_p_CMMError); SWIG_fail;
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMMCore_stopSequenceAcquisition__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CMMCore_stopSequenceAcquisition",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CMMCore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CMMCore_stopSequenceAcquisition" "', argument " "1"" of type '" "CMMCore *""'"); 
  }
  arg1 = reinterpret_cast< CMMCore * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CMMCore_stopSequenceAcquisition" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  try {
    (arg1)->stopSequenceAcquisition((char const *)arg2);
  }
  catch(CMMError &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new CMMError(static_cast< const CMMError& >(_e))),SWIGTYPE_p_CMMError,SWIG_POINTER_OWN), "CMMError", SWIGTYPE_p_CMMError); SWIG_fail;
  }
  
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMMCore_stopSequenceAcquisition(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_CMMCore, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_CMMCore_stopSequenceAcquisition__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_CMMCore, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_CMMCore_stopSequenceAcquisition__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'CMMCore_stopSequenceAcquisition'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    stopSequenceAcquisition(CMMCore *)\n"
    "    stopSequenceAcquisition(CMMCore *,char const *)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMMCore_isSequenceRunning__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CMMCore *arg1 = (CMMCore *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CMMCore_isSequenceRunning",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CMMCore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CMMCore_isSequenceRunning" "', argument " "1"" of type '" "CMMCore *""'"); 
  }
  arg1 = reinterpret_cast< CMMCore * >(argp1);
  result = (bool)(arg1)->isSequenceRunning();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMMCore_isSequenceRunning__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CMMCore_isSequenceRunning",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CMMCore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CMMCore_isSequenceRunning" "', argument " "1"" of type '" "CMMCore *""'"); 
  }
  arg1 = reinterpret_cast< CMMCore * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CMMCore_isSequenceRunning" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  try {
    result = (bool)(arg1)->isSequenceRunning((char const *)arg2);
  }
  catch(CMMError &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new CMMError(static_cast< const CMMError& >(_e))),SWIGTYPE_p_CMMError,SWIG_POINTER_OWN), "CMMError", SWIGTYPE_p_CMMError); SWIG_fail;
  }
  
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMMCore_isSequenceRunning(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_CMMCore, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_CMMCore_isSequenceRunning__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_CMMCore, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_CMMCore_isSequenceRunning__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'CMMCore_isSequenceRunning'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    isSequenceRunning(CMMCore *)\n"
    "    isSequenceRunning(CMMCore *,char const *)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMMCore_getLastImage(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CMMCore *arg1 = (CMMCore *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  void *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CMMCore_getLastImage",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CMMCore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CMMCore_getLastImage" "', argument " "1"" of type '" "CMMCore *""'"); 
  }
  arg1 = reinterpret_cast< CMMCore * >(argp1);
  try {
    result = (void *)(arg1)->getLastImage();
  }
  catch(CMMError &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new CMMError(static_cast< const CMMError& >(_e))),SWIGTYPE_p_CMMError,SWIG_POINTER_OWN), "CMMError", SWIGTYPE_p_CMMError); SWIG_fail;
  }
  
  {
    npy_intp dims[2];
    dims[0] = (arg1)->getImageHeight();
    dims[1] = (arg1)->getImageWidth();
    npy_intp pixelCount = dims[0] * dims[1];
    
    if ((arg1)->getBytesPerPixel() == 1)
    {
      PyObject * numpyArray = PyArray_SimpleNew(2, dims, NPY_UINT8);
      memcpy(PyArray_DATA((PyArrayObject *) numpyArray), result, pixelCount);
      resultobj = numpyArray;
    }
    else if ((arg1)->getBytesPerPixel() == 2)
    {
      PyObject * numpyArray = PyArray_SimpleNew(2, dims, NPY_UINT16);
      memcpy(PyArray_DATA((PyArrayObject *) numpyArray), result, pixelCount * 2);
      resultobj = numpyArray;
    }
    else if ((arg1)->getBytesPerPixel() == 4)
    {
      PyObject * numpyArray = PyArray_SimpleNew(2, dims, NPY_UINT32);
      memcpy(PyArray_DATA((PyArrayObject *) numpyArray), result, pixelCount * 4);
      resultobj = numpyArray;
    }
    else if ((arg1)->getBytesPerPixel() == 8)
    {
      PyObject * numpyArray = PyArray_SimpleNew(2, dims, NPY_UINT64);
      memcpy(PyArray_DATA((PyArrayObject *) numpyArray), result, pixelCount * 8);
      resultobj = numpyArray;
    }
    else
    {
      // don't know how to map
      // TODO: thow exception?
      // XXX Must do something, as returning NULL without setting error results
      // in an opaque error.
      resultobj = 0;
    }
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMMCore_popNextImage(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CMMCore *arg1 = (CMMCore *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  void *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CMMCore_popNextImage",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CMMCore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CMMCore_popNextImage" "', argument " "1"" of type '" "CMMCore *""'"); 
  }
  arg1 = reinterpret_cast< CMMCore * >(argp1);
  try {
    result = (void *)(arg1)->popNextImage();
  }
  catch(CMMError &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new CMMError(static_cast< const CMMError& >(_e))),SWIGTYPE_p_CMMError,SWIG_POINTER_OWN), "CMMError", SWIGTYPE_p_CMMError); SWIG_fail;
  }
  
  {
    npy_intp dims[2];
    dims[0] = (arg1)->getImageHeight();
    dims[1] = (arg1)->getImageWidth();
    npy_intp pixelCount = dims[0] * dims[1];
    
    if ((arg1)->getBytesPerPixel() == 1)
    {
      PyObject * numpyArray = PyArray_SimpleNew(2, dims, NPY_UINT8);
      memcpy(PyArray_DATA((PyArrayObject *) numpyArray), result, pixelCount);
      resultobj = numpyArray;
    }
    else if ((arg1)->getBytesPerPixel() == 2)
    {
      PyObject * numpyArray = PyArray_SimpleNew(2, dims, NPY_UINT16);
      memcpy(PyArray_DATA((PyArrayObject *) numpyArray), result, pixelCount * 2);
      resultobj = numpyArray;
    }
    else if ((arg1)->getBytesPerPixel() == 4)
    {
      PyObject * numpyArray = PyArray_SimpleNew(2, dims, NPY_UINT32);
      memcpy(PyArray_DATA((PyArrayObject *) numpyArray), result, pixelCount * 4);
      resultobj = numpyArray;
    }
    else if ((arg1)->getBytesPerPixel() == 8)
    {
      PyObject * numpyArray = PyArray_SimpleNew(2, dims, NPY_UINT64);
      memcpy(PyArray_DATA((PyArrayObject *) numpyArray), result, pixelCount * 8);
      resultobj = numpyArray;
    }
    else
    {
      // don't know how to map
      // TODO: thow exception?
      // XXX Must do something, as returning NULL without setting error results
      // in an opaque error.
      resultobj = 0;
    }
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMMCore_getLastImageMD__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CMMCore *arg1 = (CMMCore *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  Metadata *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  void *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:CMMCore_getLastImageMD",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CMMCore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CMMCore_getLastImageMD" "', argument " "1"" of type '" "CMMCore const *""'"); 
  }
  arg1 = reinterpret_cast< CMMCore * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CMMCore_getLastImageMD" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CMMCore_getLastImageMD" "', argument " "3"" of type '" "unsigned int""'");
  } 
  arg3 = static_cast< unsigned int >(val3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_Metadata,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "CMMCore_getLastImageMD" "', argument " "4"" of type '" "Metadata &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CMMCore_getLastImageMD" "', argument " "4"" of type '" "Metadata &""'"); 
  }
  arg4 = reinterpret_cast< Metadata * >(argp4);
  try {
    result = (void *)((CMMCore const *)arg1)->getLastImageMD(arg2,arg3,*arg4);
  }
  catch(CMMError &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new CMMError(static_cast< const CMMError& >(_e))),SWIGTYPE_p_CMMError,SWIG_POINTER_OWN), "CMMError", SWIGTYPE_p_CMMError); SWIG_fail;
  }
  
  {
    npy_intp dims[2];
    dims[0] = (arg1)->getImageHeight();
    dims[1] = (arg1)->getImageWidth();
    npy_intp pixelCount = dims[0] * dims[1];
    
    if ((arg1)->getBytesPerPixel() == 1)
    {
      PyObject * numpyArray = PyArray_SimpleNew(2, dims, NPY_UINT8);
      memcpy(PyArray_DATA((PyArrayObject *) numpyArray), result, pixelCount);
      resultobj = numpyArray;
    }
    else if ((arg1)->getBytesPerPixel() == 2)
    {
      PyObject * numpyArray = PyArray_SimpleNew(2, dims, NPY_UINT16);
      memcpy(PyArray_DATA((PyArrayObject *) numpyArray), result, pixelCount * 2);
      resultobj = numpyArray;
    }
    else if ((arg1)->getBytesPerPixel() == 4)
    {
      PyObject * numpyArray = PyArray_SimpleNew(2, dims, NPY_UINT32);
      memcpy(PyArray_DATA((PyArrayObject *) numpyArray), result, pixelCount * 4);
      resultobj = numpyArray;
    }
    else if ((arg1)->getBytesPerPixel() == 8)
    {
      PyObject * numpyArray = PyArray_SimpleNew(2, dims, NPY_UINT64);
      memcpy(PyArray_DATA((PyArrayObject *) numpyArray), result, pixelCount * 8);
      resultobj = numpyArray;
    }
    else
    {
      // don't know how to map
      // TODO: thow exception?
      // XXX Must do something, as returning NULL without setting error results
      // in an opaque error.
      resultobj = 0;
    }
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMMCore_popNextImageMD__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CMMCore *arg1 = (CMMCore *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  Metadata *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  void *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:CMMCore_popNextImageMD",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CMMCore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CMMCore_popNextImageMD" "', argument " "1"" of type '" "CMMCore *""'"); 
  }
  arg1 = reinterpret_cast< CMMCore * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CMMCore_popNextImageMD" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CMMCore_popNextImageMD" "', argument " "3"" of type '" "unsigned int""'");
  } 
  arg3 = static_cast< unsigned int >(val3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_Metadata,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "CMMCore_popNextImageMD" "', argument " "4"" of type '" "Metadata &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CMMCore_popNextImageMD" "', argument " "4"" of type '" "Metadata &""'"); 
  }
  arg4 = reinterpret_cast< Metadata * >(argp4);
  try {
    result = (void *)(arg1)->popNextImageMD(arg2,arg3,*arg4);
  }
  catch(CMMError &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new CMMError(static_cast< const CMMError& >(_e))),SWIGTYPE_p_CMMError,SWIG_POINTER_OWN), "CMMError", SWIGTYPE_p_CMMError); SWIG_fail;
  }
  
  {
    npy_intp dims[2];
    dims[0] = (arg1)->getImageHeight();
    dims[1] = (arg1)->getImageWidth();
    npy_intp pixelCount = dims[0] * dims[1];
    
    if ((arg1)->getBytesPerPixel() == 1)
    {
      PyObject * numpyArray = PyArray_SimpleNew(2, dims, NPY_UINT8);
      memcpy(PyArray_DATA((PyArrayObject *) numpyArray), result, pixelCount);
      resultobj = numpyArray;
    }
    else if ((arg1)->getBytesPerPixel() == 2)
    {
      PyObject * numpyArray = PyArray_SimpleNew(2, dims, NPY_UINT16);
      memcpy(PyArray_DATA((PyArrayObject *) numpyArray), result, pixelCount * 2);
      resultobj = numpyArray;
    }
    else if ((arg1)->getBytesPerPixel() == 4)
    {
      PyObject * numpyArray = PyArray_SimpleNew(2, dims, NPY_UINT32);
      memcpy(PyArray_DATA((PyArrayObject *) numpyArray), result, pixelCount * 4);
      resultobj = numpyArray;
    }
    else if ((arg1)->getBytesPerPixel() == 8)
    {
      PyObject * numpyArray = PyArray_SimpleNew(2, dims, NPY_UINT64);
      memcpy(PyArray_DATA((PyArrayObject *) numpyArray), result, pixelCount * 8);
      resultobj = numpyArray;
    }
    else
    {
      // don't know how to map
      // TODO: thow exception?
      // XXX Must do something, as returning NULL without setting error results
      // in an opaque error.
      resultobj = 0;
    }
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMMCore_getLastImageMD__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CMMCore *arg1 = (CMMCore *) 0 ;
  Metadata *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  void *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CMMCore_getLastImageMD",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CMMCore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CMMCore_getLastImageMD" "', argument " "1"" of type '" "CMMCore const *""'"); 
  }
  arg1 = reinterpret_cast< CMMCore * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Metadata,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CMMCore_getLastImageMD" "', argument " "2"" of type '" "Metadata &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CMMCore_getLastImageMD" "', argument " "2"" of type '" "Metadata &""'"); 
  }
  arg2 = reinterpret_cast< Metadata * >(argp2);
  try {
    result = (void *)((CMMCore const *)arg1)->getLastImageMD(*arg2);
  }
  catch(CMMError &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new CMMError(static_cast< const CMMError& >(_e))),SWIGTYPE_p_CMMError,SWIG_POINTER_OWN), "CMMError", SWIGTYPE_p_CMMError); SWIG_fail;
  }
  
  {
    npy_intp dims[2];
    dims[0] = (arg1)->getImageHeight();
    dims[1] = (arg1)->getImageWidth();
    npy_intp pixelCount = dims[0] * dims[1];
    
    if ((arg1)->getBytesPerPixel() == 1)
    {
      PyObject * numpyArray = PyArray_SimpleNew(2, dims, NPY_UINT8);
      memcpy(PyArray_DATA((PyArrayObject *) numpyArray), result, pixelCount);
      resultobj = numpyArray;
    }
    else if ((arg1)->getBytesPerPixel() == 2)
    {
      PyObject * numpyArray = PyArray_SimpleNew(2, dims, NPY_UINT16);
      memcpy(PyArray_DATA((PyArrayObject *) numpyArray), result, pixelCount * 2);
      resultobj = numpyArray;
    }
    else if ((arg1)->getBytesPerPixel() == 4)
    {
      PyObject * numpyArray = PyArray_SimpleNew(2, dims, NPY_UINT32);
      memcpy(PyArray_DATA((PyArrayObject *) numpyArray), result, pixelCount * 4);
      resultobj = numpyArray;
    }
    else if ((arg1)->getBytesPerPixel() == 8)
    {
      PyObject * numpyArray = PyArray_SimpleNew(2, dims, NPY_UINT64);
      memcpy(PyArray_DATA((PyArrayObject *) numpyArray), result, pixelCount * 8);
      resultobj = numpyArray;
    }
    else
    {
      // don't know how to map
      // TODO: thow exception?
      // XXX Must do something, as returning NULL without setting error results
      // in an opaque error.
      resultobj = 0;
    }
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMMCore_getLastImageMD(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 4); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_CMMCore, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Metadata, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_CMMCore_getLastImageMD__SWIG_1(self, args);
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_CMMCore, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_Metadata, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_CMMCore_getLastImageMD__SWIG_0(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'CMMCore_getLastImageMD'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    getLastImageMD(CMMCore const *,unsigned int,unsigned int,Metadata &)\n"
    "    getLastImageMD(CMMCore const *,Metadata &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMMCore_getNBeforeLastImageMD(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CMMCore *arg1 = (CMMCore *) 0 ;
  unsigned long arg2 ;
  Metadata *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  void *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:CMMCore_getNBeforeLastImageMD",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CMMCore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CMMCore_getNBeforeLastImageMD" "', argument " "1"" of type '" "CMMCore const *""'"); 
  }
  arg1 = reinterpret_cast< CMMCore * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CMMCore_getNBeforeLastImageMD" "', argument " "2"" of type '" "unsigned long""'");
  } 
  arg2 = static_cast< unsigned long >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Metadata,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CMMCore_getNBeforeLastImageMD" "', argument " "3"" of type '" "Metadata &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CMMCore_getNBeforeLastImageMD" "', argument " "3"" of type '" "Metadata &""'"); 
  }
  arg3 = reinterpret_cast< Metadata * >(argp3);
  try {
    result = (void *)((CMMCore const *)arg1)->getNBeforeLastImageMD(arg2,*arg3);
  }
  catch(CMMError &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new CMMError(static_cast< const CMMError& >(_e))),SWIGTYPE_p_CMMError,SWIG_POINTER_OWN), "CMMError", SWIGTYPE_p_CMMError); SWIG_fail;
  }
  
  {
    npy_intp dims[2];
    dims[0] = (arg1)->getImageHeight();
    dims[1] = (arg1)->getImageWidth();
    npy_intp pixelCount = dims[0] * dims[1];
    
    if ((arg1)->getBytesPerPixel() == 1)
    {
      PyObject * numpyArray = PyArray_SimpleNew(2, dims, NPY_UINT8);
      memcpy(PyArray_DATA((PyArrayObject *) numpyArray), result, pixelCount);
      resultobj = numpyArray;
    }
    else if ((arg1)->getBytesPerPixel() == 2)
    {
      PyObject * numpyArray = PyArray_SimpleNew(2, dims, NPY_UINT16);
      memcpy(PyArray_DATA((PyArrayObject *) numpyArray), result, pixelCount * 2);
      resultobj = numpyArray;
    }
    else if ((arg1)->getBytesPerPixel() == 4)
    {
      PyObject * numpyArray = PyArray_SimpleNew(2, dims, NPY_UINT32);
      memcpy(PyArray_DATA((PyArrayObject *) numpyArray), result, pixelCount * 4);
      resultobj = numpyArray;
    }
    else if ((arg1)->getBytesPerPixel() == 8)
    {
      PyObject * numpyArray = PyArray_SimpleNew(2, dims, NPY_UINT64);
      memcpy(PyArray_DATA((PyArrayObject *) numpyArray), result, pixelCount * 8);
      resultobj = numpyArray;
    }
    else
    {
      // don't know how to map
      // TODO: thow exception?
      // XXX Must do something, as returning NULL without setting error results
      // in an opaque error.
      resultobj = 0;
    }
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMMCore_popNextImageMD__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CMMCore *arg1 = (CMMCore *) 0 ;
  Metadata *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  void *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CMMCore_popNextImageMD",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CMMCore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CMMCore_popNextImageMD" "', argument " "1"" of type '" "CMMCore *""'"); 
  }
  arg1 = reinterpret_cast< CMMCore * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Metadata,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CMMCore_popNextImageMD" "', argument " "2"" of type '" "Metadata &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CMMCore_popNextImageMD" "', argument " "2"" of type '" "Metadata &""'"); 
  }
  arg2 = reinterpret_cast< Metadata * >(argp2);
  try {
    result = (void *)(arg1)->popNextImageMD(*arg2);
  }
  catch(CMMError &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new CMMError(static_cast< const CMMError& >(_e))),SWIGTYPE_p_CMMError,SWIG_POINTER_OWN), "CMMError", SWIGTYPE_p_CMMError); SWIG_fail;
  }
  
  {
    npy_intp dims[2];
    dims[0] = (arg1)->getImageHeight();
    dims[1] = (arg1)->getImageWidth();
    npy_intp pixelCount = dims[0] * dims[1];
    
    if ((arg1)->getBytesPerPixel() == 1)
    {
      PyObject * numpyArray = PyArray_SimpleNew(2, dims, NPY_UINT8);
      memcpy(PyArray_DATA((PyArrayObject *) numpyArray), result, pixelCount);
      resultobj = numpyArray;
    }
    else if ((arg1)->getBytesPerPixel() == 2)
    {
      PyObject * numpyArray = PyArray_SimpleNew(2, dims, NPY_UINT16);
      memcpy(PyArray_DATA((PyArrayObject *) numpyArray), result, pixelCount * 2);
      resultobj = numpyArray;
    }
    else if ((arg1)->getBytesPerPixel() == 4)
    {
      PyObject * numpyArray = PyArray_SimpleNew(2, dims, NPY_UINT32);
      memcpy(PyArray_DATA((PyArrayObject *) numpyArray), result, pixelCount * 4);
      resultobj = numpyArray;
    }
    else if ((arg1)->getBytesPerPixel() == 8)
    {
      PyObject * numpyArray = PyArray_SimpleNew(2, dims, NPY_UINT64);
      memcpy(PyArray_DATA((PyArrayObject *) numpyArray), result, pixelCount * 8);
      resultobj = numpyArray;
    }
    else
    {
      // don't know how to map
      // TODO: thow exception?
      // XXX Must do something, as returning NULL without setting error results
      // in an opaque error.
      resultobj = 0;
    }
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMMCore_popNextImageMD(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 4); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_CMMCore, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_Metadata, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_CMMCore_popNextImageMD__SWIG_1(self, args);
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_CMMCore, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_Metadata, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_CMMCore_popNextImageMD__SWIG_0(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'CMMCore_popNextImageMD'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    popNextImageMD(CMMCore *,unsigned int,unsigned int,Metadata &)\n"
    "    popNextImageMD(CMMCore *,Metadata &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMMCore_getRemainingImageCount(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CMMCore *arg1 = (CMMCore *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  long result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CMMCore_getRemainingImageCount",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CMMCore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CMMCore_getRemainingImageCount" "', argument " "1"" of type '" "CMMCore *""'"); 
  }
  arg1 = reinterpret_cast< CMMCore * >(argp1);
  result = (long)(arg1)->getRemainingImageCount();
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMMCore_getBufferTotalCapacity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CMMCore *arg1 = (CMMCore *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  long result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CMMCore_getBufferTotalCapacity",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CMMCore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CMMCore_getBufferTotalCapacity" "', argument " "1"" of type '" "CMMCore *""'"); 
  }
  arg1 = reinterpret_cast< CMMCore * >(argp1);
  result = (long)(arg1)->getBufferTotalCapacity();
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMMCore_getBufferFreeCapacity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CMMCore *arg1 = (CMMCore *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  long result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CMMCore_getBufferFreeCapacity",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CMMCore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CMMCore_getBufferFreeCapacity" "', argument " "1"" of type '" "CMMCore *""'"); 
  }
  arg1 = reinterpret_cast< CMMCore * >(argp1);
  result = (long)(arg1)->getBufferFreeCapacity();
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMMCore_isBufferOverflowed(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CMMCore *arg1 = (CMMCore *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CMMCore_isBufferOverflowed",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CMMCore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CMMCore_isBufferOverflowed" "', argument " "1"" of type '" "CMMCore const *""'"); 
  }
  arg1 = reinterpret_cast< CMMCore * >(argp1);
  result = (bool)((CMMCore const *)arg1)->isBufferOverflowed();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMMCore_setCircularBufferMemoryFootprint(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CMMCore *arg1 = (CMMCore *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CMMCore_setCircularBufferMemoryFootprint",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CMMCore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CMMCore_setCircularBufferMemoryFootprint" "', argument " "1"" of type '" "CMMCore *""'"); 
  }
  arg1 = reinterpret_cast< CMMCore * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CMMCore_setCircularBufferMemoryFootprint" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  try {
    (arg1)->setCircularBufferMemoryFootprint(arg2);
  }
  catch(CMMError &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new CMMError(static_cast< const CMMError& >(_e))),SWIGTYPE_p_CMMError,SWIG_POINTER_OWN), "CMMError", SWIGTYPE_p_CMMError); SWIG_fail;
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMMCore_getCircularBufferMemoryFootprint(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CMMCore *arg1 = (CMMCore *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CMMCore_getCircularBufferMemoryFootprint",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CMMCore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CMMCore_getCircularBufferMemoryFootprint" "', argument " "1"" of type '" "CMMCore *""'"); 
  }
  arg1 = reinterpret_cast< CMMCore * >(argp1);
  result = (unsigned int)(arg1)->getCircularBufferMemoryFootprint();
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMMCore_initializeCircularBuffer(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CMMCore *arg1 = (CMMCore *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CMMCore_initializeCircularBuffer",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CMMCore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CMMCore_initializeCircularBuffer" "', argument " "1"" of type '" "CMMCore *""'"); 
  }
  arg1 = reinterpret_cast< CMMCore * >(argp1);
  try {
    (arg1)->initializeCircularBuffer();
  }
  catch(CMMError &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new CMMError(static_cast< const CMMError& >(_e))),SWIGTYPE_p_CMMError,SWIG_POINTER_OWN), "CMMError", SWIGTYPE_p_CMMError); SWIG_fail;
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMMCore_clearCircularBuffer(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CMMCore *arg1 = (CMMCore *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CMMCore_clearCircularBuffer",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CMMCore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CMMCore_clearCircularBuffer" "', argument " "1"" of type '" "CMMCore *""'"); 
  }
  arg1 = reinterpret_cast< CMMCore * >(argp1);
  try {
    (arg1)->clearCircularBuffer();
  }
  catch(CMMError &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new CMMError(static_cast< const CMMError& >(_e))),SWIGTYPE_p_CMMError,SWIG_POINTER_OWN), "CMMError", SWIGTYPE_p_CMMError); SWIG_fail;
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMMCore_isExposureSequenceable(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CMMCore_isExposureSequenceable",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CMMCore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CMMCore_isExposureSequenceable" "', argument " "1"" of type '" "CMMCore *""'"); 
  }
  arg1 = reinterpret_cast< CMMCore * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CMMCore_isExposureSequenceable" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  try {
    result = (bool)(arg1)->isExposureSequenceable((char const *)arg2);
  }
  catch(CMMError &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new CMMError(static_cast< const CMMError& >(_e))),SWIGTYPE_p_CMMError,SWIG_POINTER_OWN), "CMMError", SWIGTYPE_p_CMMError); SWIG_fail;
  }
  
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMMCore_startExposureSequence(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CMMCore_startExposureSequence",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CMMCore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CMMCore_startExposureSequence" "', argument " "1"" of type '" "CMMCore *""'"); 
  }
  arg1 = reinterpret_cast< CMMCore * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CMMCore_startExposureSequence" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  try {
    (arg1)->startExposureSequence((char const *)arg2);
  }
  catch(CMMError &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new CMMError(static_cast< const CMMError& >(_e))),SWIGTYPE_p_CMMError,SWIG_POINTER_OWN), "CMMError", SWIGTYPE_p_CMMError); SWIG_fail;
  }
  
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMMCore_stopExposureSequence(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CMMCore_stopExposureSequence",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CMMCore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CMMCore_stopExposureSequence" "', argument " "1"" of type '" "CMMCore *""'"); 
  }
  arg1 = reinterpret_cast< CMMCore * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CMMCore_stopExposureSequence" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  try {
    (arg1)->stopExposureSequence((char const *)arg2);
  }
  catch(CMMError &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new CMMError(static_cast< const CMMError& >(_e))),SWIGTYPE_p_CMMError,SWIG_POINTER_OWN), "CMMError", SWIGTYPE_p_CMMError); SWIG_fail;
  }
  
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMMCore_getExposureSequenceMaxLength(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  long result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CMMCore_getExposureSequenceMaxLength",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CMMCore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CMMCore_getExposureSequenceMaxLength" "', argument " "1"" of type '" "CMMCore *""'"); 
  }
  arg1 = reinterpret_cast< CMMCore * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CMMCore_getExposureSequenceMaxLength" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  try {
    result = (long)(arg1)->getExposureSequenceMaxLength((char const *)arg2);
  }
  catch(CMMError &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new CMMError(static_cast< const CMMError& >(_e))),SWIGTYPE_p_CMMError,SWIG_POINTER_OWN), "CMMError", SWIGTYPE_p_CMMError); SWIG_fail;
  }
  
  resultobj = SWIG_From_long(static_cast< long >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMMCore_loadExposureSequence(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  std::vector< double,std::allocator< double > > arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:CMMCore_loadExposureSequence",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CMMCore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CMMCore_loadExposureSequence" "', argument " "1"" of type '" "CMMCore *""'"); 
  }
  arg1 = reinterpret_cast< CMMCore * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CMMCore_loadExposureSequence" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  {
    std::vector<double,std::allocator< double > > *ptr = (std::vector<double,std::allocator< double > > *)0;
    int res = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "CMMCore_loadExposureSequence" "', argument " "3"" of type '" "std::vector< double,std::allocator< double > >""'"); 
    }
    arg3 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  try {
    (arg1)->loadExposureSequence((char const *)arg2,arg3);
  }
  catch(CMMError &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new CMMError(static_cast< const CMMError& >(_e))),SWIGTYPE_p_CMMError,SWIG_POINTER_OWN), "CMMError", SWIGTYPE_p_CMMError); SWIG_fail;
  }
  
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMMCore_getLastFocusScore(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CMMCore *arg1 = (CMMCore *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CMMCore_getLastFocusScore",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CMMCore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CMMCore_getLastFocusScore" "', argument " "1"" of type '" "CMMCore *""'"); 
  }
  arg1 = reinterpret_cast< CMMCore * >(argp1);
  result = (double)(arg1)->getLastFocusScore();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMMCore_getCurrentFocusScore(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CMMCore *arg1 = (CMMCore *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CMMCore_getCurrentFocusScore",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CMMCore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CMMCore_getCurrentFocusScore" "', argument " "1"" of type '" "CMMCore *""'"); 
  }
  arg1 = reinterpret_cast< CMMCore * >(argp1);
  result = (double)(arg1)->getCurrentFocusScore();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMMCore_enableContinuousFocus(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CMMCore *arg1 = (CMMCore *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CMMCore_enableContinuousFocus",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CMMCore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CMMCore_enableContinuousFocus" "', argument " "1"" of type '" "CMMCore *""'"); 
  }
  arg1 = reinterpret_cast< CMMCore * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CMMCore_enableContinuousFocus" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  try {
    (arg1)->enableContinuousFocus(arg2);
  }
  catch(CMMError &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new CMMError(static_cast< const CMMError& >(_e))),SWIGTYPE_p_CMMError,SWIG_POINTER_OWN), "CMMError", SWIGTYPE_p_CMMError); SWIG_fail;
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMMCore_isContinuousFocusEnabled(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CMMCore *arg1 = (CMMCore *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CMMCore_isContinuousFocusEnabled",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CMMCore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CMMCore_isContinuousFocusEnabled" "', argument " "1"" of type '" "CMMCore *""'"); 
  }
  arg1 = reinterpret_cast< CMMCore * >(argp1);
  try {
    result = (bool)(arg1)->isContinuousFocusEnabled();
  }
  catch(CMMError &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new CMMError(static_cast< const CMMError& >(_e))),SWIGTYPE_p_CMMError,SWIG_POINTER_OWN), "CMMError", SWIGTYPE_p_CMMError); SWIG_fail;
  }
  
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMMCore_isContinuousFocusLocked(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CMMCore *arg1 = (CMMCore *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CMMCore_isContinuousFocusLocked",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CMMCore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CMMCore_isContinuousFocusLocked" "', argument " "1"" of type '" "CMMCore *""'"); 
  }
  arg1 = reinterpret_cast< CMMCore * >(argp1);
  try {
    result = (bool)(arg1)->isContinuousFocusLocked();
  }
  catch(CMMError &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new CMMError(static_cast< const CMMError& >(_e))),SWIGTYPE_p_CMMError,SWIG_POINTER_OWN), "CMMError", SWIGTYPE_p_CMMError); SWIG_fail;
  }
  
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMMCore_isContinuousFocusDrive(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CMMCore_isContinuousFocusDrive",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CMMCore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CMMCore_isContinuousFocusDrive" "', argument " "1"" of type '" "CMMCore *""'"); 
  }
  arg1 = reinterpret_cast< CMMCore * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CMMCore_isContinuousFocusDrive" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  try {
    result = (bool)(arg1)->isContinuousFocusDrive((char const *)arg2);
  }
  catch(CMMError &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new CMMError(static_cast< const CMMError& >(_e))),SWIGTYPE_p_CMMError,SWIG_POINTER_OWN), "CMMError", SWIGTYPE_p_CMMError); SWIG_fail;
  }
  
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMMCore_fullFocus(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CMMCore *arg1 = (CMMCore *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CMMCore_fullFocus",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CMMCore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CMMCore_fullFocus" "', argument " "1"" of type '" "CMMCore *""'"); 
  }
  arg1 = reinterpret_cast< CMMCore * >(argp1);
  try {
    (arg1)->fullFocus();
  }
  catch(CMMError &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new CMMError(static_cast< const CMMError& >(_e))),SWIGTYPE_p_CMMError,SWIG_POINTER_OWN), "CMMError", SWIGTYPE_p_CMMError); SWIG_fail;
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMMCore_incrementalFocus(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CMMCore *arg1 = (CMMCore *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CMMCore_incrementalFocus",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CMMCore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CMMCore_incrementalFocus" "', argument " "1"" of type '" "CMMCore *""'"); 
  }
  arg1 = reinterpret_cast< CMMCore * >(argp1);
  try {
    (arg1)->incrementalFocus();
  }
  catch(CMMError &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new CMMError(static_cast< const CMMError& >(_e))),SWIGTYPE_p_CMMError,SWIG_POINTER_OWN), "CMMError", SWIGTYPE_p_CMMError); SWIG_fail;
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMMCore_setAutoFocusOffset(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CMMCore *arg1 = (CMMCore *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CMMCore_setAutoFocusOffset",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CMMCore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CMMCore_setAutoFocusOffset" "', argument " "1"" of type '" "CMMCore *""'"); 
  }
  arg1 = reinterpret_cast< CMMCore * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CMMCore_setAutoFocusOffset" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  try {
    (arg1)->setAutoFocusOffset(arg2);
  }
  catch(CMMError &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new CMMError(static_cast< const CMMError& >(_e))),SWIGTYPE_p_CMMError,SWIG_POINTER_OWN), "CMMError", SWIGTYPE_p_CMMError); SWIG_fail;
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMMCore_getAutoFocusOffset(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CMMCore *arg1 = (CMMCore *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CMMCore_getAutoFocusOffset",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CMMCore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CMMCore_getAutoFocusOffset" "', argument " "1"" of type '" "CMMCore *""'"); 
  }
  arg1 = reinterpret_cast< CMMCore * >(argp1);
  try {
    result = (double)(arg1)->getAutoFocusOffset();
  }
  catch(CMMError &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new CMMError(static_cast< const CMMError& >(_e))),SWIGTYPE_p_CMMError,SWIG_POINTER_OWN), "CMMError", SWIGTYPE_p_CMMError); SWIG_fail;
  }
  
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMMCore_setState(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  long arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:CMMCore_setState",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CMMCore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CMMCore_setState" "', argument " "1"" of type '" "CMMCore *""'"); 
  }
  arg1 = reinterpret_cast< CMMCore * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CMMCore_setState" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CMMCore_setState" "', argument " "3"" of type '" "long""'");
  } 
  arg3 = static_cast< long >(val3);
  try {
    (arg1)->setState((char const *)arg2,arg3);
  }
  catch(CMMError &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new CMMError(static_cast< const CMMError& >(_e))),SWIGTYPE_p_CMMError,SWIG_POINTER_OWN), "CMMError", SWIGTYPE_p_CMMError); SWIG_fail;
  }
  
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMMCore_getState(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  long result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CMMCore_getState",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CMMCore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CMMCore_getState" "', argument " "1"" of type '" "CMMCore *""'"); 
  }
  arg1 = reinterpret_cast< CMMCore * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CMMCore_getState" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  try {
    result = (long)(arg1)->getState((char const *)arg2);
  }
  catch(CMMError &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new CMMError(static_cast< const CMMError& >(_e))),SWIGTYPE_p_CMMError,SWIG_POINTER_OWN), "CMMError", SWIGTYPE_p_CMMError); SWIG_fail;
  }
  
  resultobj = SWIG_From_long(static_cast< long >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMMCore_getNumberOfStates(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  long result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CMMCore_getNumberOfStates",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CMMCore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CMMCore_getNumberOfStates" "', argument " "1"" of type '" "CMMCore *""'"); 
  }
  arg1 = reinterpret_cast< CMMCore * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CMMCore_getNumberOfStates" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  result = (long)(arg1)->getNumberOfStates((char const *)arg2);
  resultobj = SWIG_From_long(static_cast< long >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMMCore_setStateLabel(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:CMMCore_setStateLabel",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CMMCore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CMMCore_setStateLabel" "', argument " "1"" of type '" "CMMCore *""'"); 
  }
  arg1 = reinterpret_cast< CMMCore * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CMMCore_setStateLabel" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CMMCore_setStateLabel" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  try {
    (arg1)->setStateLabel((char const *)arg2,(char const *)arg3);
  }
  catch(CMMError &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new CMMError(static_cast< const CMMError& >(_e))),SWIGTYPE_p_CMMError,SWIG_POINTER_OWN), "CMMError", SWIGTYPE_p_CMMError); SWIG_fail;
  }
  
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMMCore_getStateLabel(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CMMCore_getStateLabel",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CMMCore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CMMCore_getStateLabel" "', argument " "1"" of type '" "CMMCore *""'"); 
  }
  arg1 = reinterpret_cast< CMMCore * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CMMCore_getStateLabel" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  try {
    result = (arg1)->getStateLabel((char const *)arg2);
  }
  catch(CMMError &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new CMMError(static_cast< const CMMError& >(_e))),SWIGTYPE_p_CMMError,SWIG_POINTER_OWN), "CMMError", SWIGTYPE_p_CMMError); SWIG_fail;
  }
  
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMMCore_defineStateLabel(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  long arg3 ;
  char *arg4 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:CMMCore_defineStateLabel",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CMMCore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CMMCore_defineStateLabel" "', argument " "1"" of type '" "CMMCore *""'"); 
  }
  arg1 = reinterpret_cast< CMMCore * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CMMCore_defineStateLabel" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CMMCore_defineStateLabel" "', argument " "3"" of type '" "long""'");
  } 
  arg3 = static_cast< long >(val3);
  res4 = SWIG_AsCharPtrAndSize(obj3, &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "CMMCore_defineStateLabel" "', argument " "4"" of type '" "char const *""'");
  }
  arg4 = reinterpret_cast< char * >(buf4);
  try {
    (arg1)->defineStateLabel((char const *)arg2,arg3,(char const *)arg4);
  }
  catch(CMMError &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new CMMError(static_cast< const CMMError& >(_e))),SWIGTYPE_p_CMMError,SWIG_POINTER_OWN), "CMMError", SWIGTYPE_p_CMMError); SWIG_fail;
  }
  
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMMCore_getStateLabels(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< std::string,std::allocator< std::string > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CMMCore_getStateLabels",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CMMCore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CMMCore_getStateLabels" "', argument " "1"" of type '" "CMMCore *""'"); 
  }
  arg1 = reinterpret_cast< CMMCore * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CMMCore_getStateLabels" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  try {
    result = (arg1)->getStateLabels((char const *)arg2);
  }
  catch(CMMError &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new CMMError(static_cast< const CMMError& >(_e))),SWIGTYPE_p_CMMError,SWIG_POINTER_OWN), "CMMError", SWIGTYPE_p_CMMError); SWIG_fail;
  }
  
  resultobj = swig::from(static_cast< std::vector<std::string,std::allocator< std::string > > >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMMCore_getStateFromLabel(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  long result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:CMMCore_getStateFromLabel",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CMMCore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CMMCore_getStateFromLabel" "', argument " "1"" of type '" "CMMCore *""'"); 
  }
  arg1 = reinterpret_cast< CMMCore * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CMMCore_getStateFromLabel" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CMMCore_getStateFromLabel" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  try {
    result = (long)(arg1)->getStateFromLabel((char const *)arg2,(char const *)arg3);
  }
  catch(CMMError &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new CMMError(static_cast< const CMMError& >(_e))),SWIGTYPE_p_CMMError,SWIG_POINTER_OWN), "CMMError", SWIGTYPE_p_CMMError); SWIG_fail;
  }
  
  resultobj = SWIG_From_long(static_cast< long >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMMCore_getStateLabelData(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PropertyBlock result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:CMMCore_getStateLabelData",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CMMCore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CMMCore_getStateLabelData" "', argument " "1"" of type '" "CMMCore *""'"); 
  }
  arg1 = reinterpret_cast< CMMCore * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CMMCore_getStateLabelData" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CMMCore_getStateLabelData" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  result = (arg1)->getStateLabelData((char const *)arg2,(char const *)arg3);
  resultobj = SWIG_NewPointerObj((new PropertyBlock(static_cast< const PropertyBlock& >(result))), SWIGTYPE_p_PropertyBlock, SWIG_POINTER_OWN |  0 );
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMMCore_getData(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PropertyBlock result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CMMCore_getData",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CMMCore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CMMCore_getData" "', argument " "1"" of type '" "CMMCore *""'"); 
  }
  arg1 = reinterpret_cast< CMMCore * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CMMCore_getData" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  result = (arg1)->getData((char const *)arg2);
  resultobj = SWIG_NewPointerObj((new PropertyBlock(static_cast< const PropertyBlock& >(result))), SWIGTYPE_p_PropertyBlock, SWIG_POINTER_OWN |  0 );
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMMCore_setPosition__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:CMMCore_setPosition",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CMMCore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CMMCore_setPosition" "', argument " "1"" of type '" "CMMCore *""'"); 
  }
  arg1 = reinterpret_cast< CMMCore * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CMMCore_setPosition" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CMMCore_setPosition" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  try {
    (arg1)->setPosition((char const *)arg2,arg3);
  }
  catch(CMMError &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new CMMError(static_cast< const CMMError& >(_e))),SWIGTYPE_p_CMMError,SWIG_POINTER_OWN), "CMMError", SWIGTYPE_p_CMMError); SWIG_fail;
  }
  
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMMCore_setPosition__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CMMCore *arg1 = (CMMCore *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CMMCore_setPosition",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CMMCore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CMMCore_setPosition" "', argument " "1"" of type '" "CMMCore *""'"); 
  }
  arg1 = reinterpret_cast< CMMCore * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CMMCore_setPosition" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  try {
    (arg1)->setPosition(arg2);
  }
  catch(CMMError &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new CMMError(static_cast< const CMMError& >(_e))),SWIGTYPE_p_CMMError,SWIG_POINTER_OWN), "CMMError", SWIGTYPE_p_CMMError); SWIG_fail;
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMMCore_setPosition(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_CMMCore, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_CMMCore_setPosition__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_CMMCore, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_CMMCore_setPosition__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'CMMCore_setPosition'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    setPosition(CMMCore *,char const *,double)\n"
    "    setPosition(CMMCore *,double)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMMCore_getPosition__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CMMCore_getPosition",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CMMCore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CMMCore_getPosition" "', argument " "1"" of type '" "CMMCore *""'"); 
  }
  arg1 = reinterpret_cast< CMMCore * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CMMCore_getPosition" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  try {
    result = (double)(arg1)->getPosition((char const *)arg2);
  }
  catch(CMMError &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new CMMError(static_cast< const CMMError& >(_e))),SWIGTYPE_p_CMMError,SWIG_POINTER_OWN), "CMMError", SWIGTYPE_p_CMMError); SWIG_fail;
  }
  
  resultobj = SWIG_From_double(static_cast< double >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMMCore_getPosition__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CMMCore *arg1 = (CMMCore *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CMMCore_getPosition",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CMMCore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CMMCore_getPosition" "', argument " "1"" of type '" "CMMCore *""'"); 
  }
  arg1 = reinterpret_cast< CMMCore * >(argp1);
  try {
    result = (double)(arg1)->getPosition();
  }
  catch(CMMError &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new CMMError(static_cast< const CMMError& >(_e))),SWIGTYPE_p_CMMError,SWIG_POINTER_OWN), "CMMError", SWIGTYPE_p_CMMError); SWIG_fail;
  }
  
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMMCore_getPosition(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_CMMCore, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_CMMCore_getPosition__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_CMMCore, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_CMMCore_getPosition__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'CMMCore_getPosition'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    getPosition(CMMCore *,char const *)\n"
    "    getPosition(CMMCore *)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMMCore_setRelativePosition__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:CMMCore_setRelativePosition",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CMMCore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CMMCore_setRelativePosition" "', argument " "1"" of type '" "CMMCore *""'"); 
  }
  arg1 = reinterpret_cast< CMMCore * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CMMCore_setRelativePosition" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CMMCore_setRelativePosition" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  try {
    (arg1)->setRelativePosition((char const *)arg2,arg3);
  }
  catch(CMMError &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new CMMError(static_cast< const CMMError& >(_e))),SWIGTYPE_p_CMMError,SWIG_POINTER_OWN), "CMMError", SWIGTYPE_p_CMMError); SWIG_fail;
  }
  
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMMCore_setRelativePosition__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CMMCore *arg1 = (CMMCore *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CMMCore_setRelativePosition",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CMMCore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CMMCore_setRelativePosition" "', argument " "1"" of type '" "CMMCore *""'"); 
  }
  arg1 = reinterpret_cast< CMMCore * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CMMCore_setRelativePosition" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  try {
    (arg1)->setRelativePosition(arg2);
  }
  catch(CMMError &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new CMMError(static_cast< const CMMError& >(_e))),SWIGTYPE_p_CMMError,SWIG_POINTER_OWN), "CMMError", SWIGTYPE_p_CMMError); SWIG_fail;
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMMCore_setRelativePosition(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_CMMCore, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_CMMCore_setRelativePosition__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_CMMCore, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_CMMCore_setRelativePosition__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'CMMCore_setRelativePosition'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    setRelativePosition(CMMCore *,char const *,double)\n"
    "    setRelativePosition(CMMCore *,double)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMMCore_setOrigin__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CMMCore_setOrigin",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CMMCore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CMMCore_setOrigin" "', argument " "1"" of type '" "CMMCore *""'"); 
  }
  arg1 = reinterpret_cast< CMMCore * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CMMCore_setOrigin" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  try {
    (arg1)->setOrigin((char const *)arg2);
  }
  catch(CMMError &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new CMMError(static_cast< const CMMError& >(_e))),SWIGTYPE_p_CMMError,SWIG_POINTER_OWN), "CMMError", SWIGTYPE_p_CMMError); SWIG_fail;
  }
  
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMMCore_setOrigin__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CMMCore *arg1 = (CMMCore *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CMMCore_setOrigin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CMMCore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CMMCore_setOrigin" "', argument " "1"" of type '" "CMMCore *""'"); 
  }
  arg1 = reinterpret_cast< CMMCore * >(argp1);
  try {
    (arg1)->setOrigin();
  }
  catch(CMMError &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new CMMError(static_cast< const CMMError& >(_e))),SWIGTYPE_p_CMMError,SWIG_POINTER_OWN), "CMMError", SWIGTYPE_p_CMMError); SWIG_fail;
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMMCore_setOrigin(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_CMMCore, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_CMMCore_setOrigin__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_CMMCore, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_CMMCore_setOrigin__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'CMMCore_setOrigin'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    setOrigin(CMMCore *,char const *)\n"
    "    setOrigin(CMMCore *)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMMCore_setAdapterOrigin__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:CMMCore_setAdapterOrigin",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CMMCore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CMMCore_setAdapterOrigin" "', argument " "1"" of type '" "CMMCore *""'"); 
  }
  arg1 = reinterpret_cast< CMMCore * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CMMCore_setAdapterOrigin" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CMMCore_setAdapterOrigin" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  try {
    (arg1)->setAdapterOrigin((char const *)arg2,arg3);
  }
  catch(CMMError &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new CMMError(static_cast< const CMMError& >(_e))),SWIGTYPE_p_CMMError,SWIG_POINTER_OWN), "CMMError", SWIGTYPE_p_CMMError); SWIG_fail;
  }
  
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMMCore_setAdapterOrigin__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CMMCore *arg1 = (CMMCore *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CMMCore_setAdapterOrigin",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CMMCore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CMMCore_setAdapterOrigin" "', argument " "1"" of type '" "CMMCore *""'"); 
  }
  arg1 = reinterpret_cast< CMMCore * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CMMCore_setAdapterOrigin" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  try {
    (arg1)->setAdapterOrigin(arg2);
  }
  catch(CMMError &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new CMMError(static_cast< const CMMError& >(_e))),SWIGTYPE_p_CMMError,SWIG_POINTER_OWN), "CMMError", SWIGTYPE_p_CMMError); SWIG_fail;
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMMCore_setAdapterOrigin(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_CMMCore, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_CMMCore_setAdapterOrigin__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_CMMCore, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_CMMCore_setAdapterOrigin__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'CMMCore_setAdapterOrigin'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    setAdapterOrigin(CMMCore *,char const *,double)\n"
    "    setAdapterOrigin(CMMCore *,double)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMMCore_setFocusDirection(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:CMMCore_setFocusDirection",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CMMCore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CMMCore_setFocusDirection" "', argument " "1"" of type '" "CMMCore *""'"); 
  }
  arg1 = reinterpret_cast< CMMCore * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CMMCore_setFocusDirection" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CMMCore_setFocusDirection" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  (arg1)->setFocusDirection((char const *)arg2,arg3);
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMMCore_getFocusDirection(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CMMCore_getFocusDirection",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CMMCore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CMMCore_getFocusDirection" "', argument " "1"" of type '" "CMMCore *""'"); 
  }
  arg1 = reinterpret_cast< CMMCore * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CMMCore_getFocusDirection" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  try {
    result = (int)(arg1)->getFocusDirection((char const *)arg2);
  }
  catch(CMMError &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new CMMError(static_cast< const CMMError& >(_e))),SWIGTYPE_p_CMMError,SWIG_POINTER_OWN), "CMMError", SWIGTYPE_p_CMMError); SWIG_fail;
  }
  
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMMCore_isStageSequenceable(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CMMCore_isStageSequenceable",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CMMCore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CMMCore_isStageSequenceable" "', argument " "1"" of type '" "CMMCore *""'"); 
  }
  arg1 = reinterpret_cast< CMMCore * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CMMCore_isStageSequenceable" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  try {
    result = (bool)(arg1)->isStageSequenceable((char const *)arg2);
  }
  catch(CMMError &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new CMMError(static_cast< const CMMError& >(_e))),SWIGTYPE_p_CMMError,SWIG_POINTER_OWN), "CMMError", SWIGTYPE_p_CMMError); SWIG_fail;
  }
  
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMMCore_isStageLinearSequenceable(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CMMCore_isStageLinearSequenceable",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CMMCore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CMMCore_isStageLinearSequenceable" "', argument " "1"" of type '" "CMMCore *""'"); 
  }
  arg1 = reinterpret_cast< CMMCore * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CMMCore_isStageLinearSequenceable" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  try {
    result = (bool)(arg1)->isStageLinearSequenceable((char const *)arg2);
  }
  catch(CMMError &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new CMMError(static_cast< const CMMError& >(_e))),SWIGTYPE_p_CMMError,SWIG_POINTER_OWN), "CMMError", SWIGTYPE_p_CMMError); SWIG_fail;
  }
  
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMMCore_startStageSequence(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CMMCore_startStageSequence",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CMMCore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CMMCore_startStageSequence" "', argument " "1"" of type '" "CMMCore *""'"); 
  }
  arg1 = reinterpret_cast< CMMCore * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CMMCore_startStageSequence" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  try {
    (arg1)->startStageSequence((char const *)arg2);
  }
  catch(CMMError &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new CMMError(static_cast< const CMMError& >(_e))),SWIGTYPE_p_CMMError,SWIG_POINTER_OWN), "CMMError", SWIGTYPE_p_CMMError); SWIG_fail;
  }
  
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMMCore_stopStageSequence(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CMMCore_stopStageSequence",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CMMCore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CMMCore_stopStageSequence" "', argument " "1"" of type '" "CMMCore *""'"); 
  }
  arg1 = reinterpret_cast< CMMCore * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CMMCore_stopStageSequence" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  try {
    (arg1)->stopStageSequence((char const *)arg2);
  }
  catch(CMMError &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new CMMError(static_cast< const CMMError& >(_e))),SWIGTYPE_p_CMMError,SWIG_POINTER_OWN), "CMMError", SWIGTYPE_p_CMMError); SWIG_fail;
  }
  
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMMCore_getStageSequenceMaxLength(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  long result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CMMCore_getStageSequenceMaxLength",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CMMCore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CMMCore_getStageSequenceMaxLength" "', argument " "1"" of type '" "CMMCore *""'"); 
  }
  arg1 = reinterpret_cast< CMMCore * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CMMCore_getStageSequenceMaxLength" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  try {
    result = (long)(arg1)->getStageSequenceMaxLength((char const *)arg2);
  }
  catch(CMMError &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new CMMError(static_cast< const CMMError& >(_e))),SWIGTYPE_p_CMMError,SWIG_POINTER_OWN), "CMMError", SWIGTYPE_p_CMMError); SWIG_fail;
  }
  
  resultobj = SWIG_From_long(static_cast< long >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMMCore_loadStageSequence(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  std::vector< double,std::allocator< double > > arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:CMMCore_loadStageSequence",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CMMCore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CMMCore_loadStageSequence" "', argument " "1"" of type '" "CMMCore *""'"); 
  }
  arg1 = reinterpret_cast< CMMCore * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CMMCore_loadStageSequence" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  {
    std::vector<double,std::allocator< double > > *ptr = (std::vector<double,std::allocator< double > > *)0;
    int res = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "CMMCore_loadStageSequence" "', argument " "3"" of type '" "std::vector< double,std::allocator< double > >""'"); 
    }
    arg3 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  try {
    (arg1)->loadStageSequence((char const *)arg2,arg3);
  }
  catch(CMMError &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new CMMError(static_cast< const CMMError& >(_e))),SWIGTYPE_p_CMMError,SWIG_POINTER_OWN), "CMMError", SWIGTYPE_p_CMMError); SWIG_fail;
  }
  
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMMCore_setStageLinearSequence(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  double arg3 ;
  int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:CMMCore_setStageLinearSequence",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CMMCore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CMMCore_setStageLinearSequence" "', argument " "1"" of type '" "CMMCore *""'"); 
  }
  arg1 = reinterpret_cast< CMMCore * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CMMCore_setStageLinearSequence" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CMMCore_setStageLinearSequence" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "CMMCore_setStageLinearSequence" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  try {
    (arg1)->setStageLinearSequence((char const *)arg2,arg3,arg4);
  }
  catch(CMMError &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new CMMError(static_cast< const CMMError& >(_e))),SWIGTYPE_p_CMMError,SWIG_POINTER_OWN), "CMMError", SWIGTYPE_p_CMMError); SWIG_fail;
  }
  
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMMCore_setXYPosition__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  double arg3 ;
  double arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:CMMCore_setXYPosition",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CMMCore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CMMCore_setXYPosition" "', argument " "1"" of type '" "CMMCore *""'"); 
  }
  arg1 = reinterpret_cast< CMMCore * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CMMCore_setXYPosition" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CMMCore_setXYPosition" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "CMMCore_setXYPosition" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  try {
    (arg1)->setXYPosition((char const *)arg2,arg3,arg4);
  }
  catch(CMMError &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new CMMError(static_cast< const CMMError& >(_e))),SWIGTYPE_p_CMMError,SWIG_POINTER_OWN), "CMMError", SWIGTYPE_p_CMMError); SWIG_fail;
  }
  
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMMCore_setXYPosition__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CMMCore *arg1 = (CMMCore *) 0 ;
  double arg2 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:CMMCore_setXYPosition",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CMMCore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CMMCore_setXYPosition" "', argument " "1"" of type '" "CMMCore *""'"); 
  }
  arg1 = reinterpret_cast< CMMCore * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CMMCore_setXYPosition" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CMMCore_setXYPosition" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  try {
    (arg1)->setXYPosition(arg2,arg3);
  }
  catch(CMMError &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new CMMError(static_cast< const CMMError& >(_e))),SWIGTYPE_p_CMMError,SWIG_POINTER_OWN), "CMMError", SWIGTYPE_p_CMMError); SWIG_fail;
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMMCore_setXYPosition(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 4); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_CMMCore, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_CMMCore_setXYPosition__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_CMMCore, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_CMMCore_setXYPosition__SWIG_0(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'CMMCore_setXYPosition'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    setXYPosition(CMMCore *,char const *,double,double)\n"
    "    setXYPosition(CMMCore *,double,double)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMMCore_setRelativeXYPosition__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  double arg3 ;
  double arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:CMMCore_setRelativeXYPosition",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CMMCore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CMMCore_setRelativeXYPosition" "', argument " "1"" of type '" "CMMCore *""'"); 
  }
  arg1 = reinterpret_cast< CMMCore * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CMMCore_setRelativeXYPosition" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CMMCore_setRelativeXYPosition" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "CMMCore_setRelativeXYPosition" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  try {
    (arg1)->setRelativeXYPosition((char const *)arg2,arg3,arg4);
  }
  catch(CMMError &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new CMMError(static_cast< const CMMError& >(_e))),SWIGTYPE_p_CMMError,SWIG_POINTER_OWN), "CMMError", SWIGTYPE_p_CMMError); SWIG_fail;
  }
  
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMMCore_setRelativeXYPosition__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CMMCore *arg1 = (CMMCore *) 0 ;
  double arg2 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:CMMCore_setRelativeXYPosition",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CMMCore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CMMCore_setRelativeXYPosition" "', argument " "1"" of type '" "CMMCore *""'"); 
  }
  arg1 = reinterpret_cast< CMMCore * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CMMCore_setRelativeXYPosition" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CMMCore_setRelativeXYPosition" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  try {
    (arg1)->setRelativeXYPosition(arg2,arg3);
  }
  catch(CMMError &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new CMMError(static_cast< const CMMError& >(_e))),SWIGTYPE_p_CMMError,SWIG_POINTER_OWN), "CMMError", SWIGTYPE_p_CMMError); SWIG_fail;
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMMCore_setRelativeXYPosition(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 4); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_CMMCore, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_CMMCore_setRelativeXYPosition__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_CMMCore, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_CMMCore_setRelativeXYPosition__SWIG_0(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'CMMCore_setRelativeXYPosition'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    setRelativeXYPosition(CMMCore *,char const *,double,double)\n"
    "    setRelativeXYPosition(CMMCore *,double,double)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMMCore_getXYPosition__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  double *arg3 = 0 ;
  double *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  double temp3 ;
  int res3 = SWIG_TMPOBJ ;
  double temp4 ;
  int res4 = SWIG_TMPOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  arg3 = &temp3;
  arg4 = &temp4;
  if (!PyArg_ParseTuple(args,(char *)"OO:CMMCore_getXYPosition",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CMMCore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CMMCore_getXYPosition" "', argument " "1"" of type '" "CMMCore *""'"); 
  }
  arg1 = reinterpret_cast< CMMCore * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CMMCore_getXYPosition" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  try {
    (arg1)->getXYPosition((char const *)arg2,*arg3,*arg4);
  }
  catch(CMMError &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new CMMError(static_cast< const CMMError& >(_e))),SWIGTYPE_p_CMMError,SWIG_POINTER_OWN), "CMMError", SWIGTYPE_p_CMMError); SWIG_fail;
  }
  
  resultobj = SWIG_Py_Void();
  if (SWIG_IsTmpObj(res3)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_double((*arg3)));
  } else {
    int new_flags = SWIG_IsNewObj(res3) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg3), SWIGTYPE_p_double, new_flags));
  }
  if (SWIG_IsTmpObj(res4)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_double((*arg4)));
  } else {
    int new_flags = SWIG_IsNewObj(res4) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg4), SWIGTYPE_p_double, new_flags));
  }
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMMCore_getXYPosition__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CMMCore *arg1 = (CMMCore *) 0 ;
  double *arg2 = 0 ;
  double *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double temp2 ;
  int res2 = SWIG_TMPOBJ ;
  double temp3 ;
  int res3 = SWIG_TMPOBJ ;
  PyObject * obj0 = 0 ;
  
  arg2 = &temp2;
  arg3 = &temp3;
  if (!PyArg_ParseTuple(args,(char *)"O:CMMCore_getXYPosition",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CMMCore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CMMCore_getXYPosition" "', argument " "1"" of type '" "CMMCore *""'"); 
  }
  arg1 = reinterpret_cast< CMMCore * >(argp1);
  try {
    (arg1)->getXYPosition(*arg2,*arg3);
  }
  catch(CMMError &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new CMMError(static_cast< const CMMError& >(_e))),SWIGTYPE_p_CMMError,SWIG_POINTER_OWN), "CMMError", SWIGTYPE_p_CMMError); SWIG_fail;
  }
  
  resultobj = SWIG_Py_Void();
  if (SWIG_IsTmpObj(res2)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_double((*arg2)));
  } else {
    int new_flags = SWIG_IsNewObj(res2) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg2), SWIGTYPE_p_double, new_flags));
  }
  if (SWIG_IsTmpObj(res3)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_double((*arg3)));
  } else {
    int new_flags = SWIG_IsNewObj(res3) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg3), SWIGTYPE_p_double, new_flags));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMMCore_getXYPosition(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_CMMCore, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_CMMCore_getXYPosition__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_CMMCore, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_CMMCore_getXYPosition__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'CMMCore_getXYPosition'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    getXYPosition(CMMCore *,char const *,double &,double &)\n"
    "    getXYPosition(CMMCore *,double &,double &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMMCore_getXPosition__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CMMCore_getXPosition",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CMMCore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CMMCore_getXPosition" "', argument " "1"" of type '" "CMMCore *""'"); 
  }
  arg1 = reinterpret_cast< CMMCore * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CMMCore_getXPosition" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  try {
    result = (double)(arg1)->getXPosition((char const *)arg2);
  }
  catch(CMMError &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new CMMError(static_cast< const CMMError& >(_e))),SWIGTYPE_p_CMMError,SWIG_POINTER_OWN), "CMMError", SWIGTYPE_p_CMMError); SWIG_fail;
  }
  
  resultobj = SWIG_From_double(static_cast< double >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMMCore_getYPosition__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CMMCore_getYPosition",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CMMCore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CMMCore_getYPosition" "', argument " "1"" of type '" "CMMCore *""'"); 
  }
  arg1 = reinterpret_cast< CMMCore * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CMMCore_getYPosition" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  try {
    result = (double)(arg1)->getYPosition((char const *)arg2);
  }
  catch(CMMError &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new CMMError(static_cast< const CMMError& >(_e))),SWIGTYPE_p_CMMError,SWIG_POINTER_OWN), "CMMError", SWIGTYPE_p_CMMError); SWIG_fail;
  }
  
  resultobj = SWIG_From_double(static_cast< double >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMMCore_getXPosition__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CMMCore *arg1 = (CMMCore *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CMMCore_getXPosition",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CMMCore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CMMCore_getXPosition" "', argument " "1"" of type '" "CMMCore *""'"); 
  }
  arg1 = reinterpret_cast< CMMCore * >(argp1);
  try {
    result = (double)(arg1)->getXPosition();
  }
  catch(CMMError &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new CMMError(static_cast< const CMMError& >(_e))),SWIGTYPE_p_CMMError,SWIG_POINTER_OWN), "CMMError", SWIGTYPE_p_CMMError); SWIG_fail;
  }
  
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMMCore_getXPosition(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_CMMCore, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_CMMCore_getXPosition__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_CMMCore, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_CMMCore_getXPosition__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'CMMCore_getXPosition'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    getXPosition(CMMCore *,char const *)\n"
    "    getXPosition(CMMCore *)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMMCore_getYPosition__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CMMCore *arg1 = (CMMCore *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CMMCore_getYPosition",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CMMCore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CMMCore_getYPosition" "', argument " "1"" of type '" "CMMCore *""'"); 
  }
  arg1 = reinterpret_cast< CMMCore * >(argp1);
  try {
    result = (double)(arg1)->getYPosition();
  }
  catch(CMMError &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new CMMError(static_cast< const CMMError& >(_e))),SWIGTYPE_p_CMMError,SWIG_POINTER_OWN), "CMMError", SWIGTYPE_p_CMMError); SWIG_fail;
  }
  
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMMCore_getYPosition(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_CMMCore, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_CMMCore_getYPosition__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_CMMCore, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_CMMCore_getYPosition__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'CMMCore_getYPosition'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    getYPosition(CMMCore *,char const *)\n"
    "    getYPosition(CMMCore *)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMMCore_stop(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CMMCore_stop",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CMMCore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CMMCore_stop" "', argument " "1"" of type '" "CMMCore *""'"); 
  }
  arg1 = reinterpret_cast< CMMCore * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CMMCore_stop" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  try {
    (arg1)->stop((char const *)arg2);
  }
  catch(CMMError &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new CMMError(static_cast< const CMMError& >(_e))),SWIGTYPE_p_CMMError,SWIG_POINTER_OWN), "CMMError", SWIGTYPE_p_CMMError); SWIG_fail;
  }
  
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMMCore_home(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CMMCore_home",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CMMCore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CMMCore_home" "', argument " "1"" of type '" "CMMCore *""'"); 
  }
  arg1 = reinterpret_cast< CMMCore * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CMMCore_home" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  try {
    (arg1)->home((char const *)arg2);
  }
  catch(CMMError &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new CMMError(static_cast< const CMMError& >(_e))),SWIGTYPE_p_CMMError,SWIG_POINTER_OWN), "CMMError", SWIGTYPE_p_CMMError); SWIG_fail;
  }
  
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMMCore_setOriginXY__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CMMCore_setOriginXY",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CMMCore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CMMCore_setOriginXY" "', argument " "1"" of type '" "CMMCore *""'"); 
  }
  arg1 = reinterpret_cast< CMMCore * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CMMCore_setOriginXY" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  try {
    (arg1)->setOriginXY((char const *)arg2);
  }
  catch(CMMError &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new CMMError(static_cast< const CMMError& >(_e))),SWIGTYPE_p_CMMError,SWIG_POINTER_OWN), "CMMError", SWIGTYPE_p_CMMError); SWIG_fail;
  }
  
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMMCore_setOriginXY__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CMMCore *arg1 = (CMMCore *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CMMCore_setOriginXY",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CMMCore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CMMCore_setOriginXY" "', argument " "1"" of type '" "CMMCore *""'"); 
  }
  arg1 = reinterpret_cast< CMMCore * >(argp1);
  try {
    (arg1)->setOriginXY();
  }
  catch(CMMError &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new CMMError(static_cast< const CMMError& >(_e))),SWIGTYPE_p_CMMError,SWIG_POINTER_OWN), "CMMError", SWIGTYPE_p_CMMError); SWIG_fail;
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMMCore_setOriginXY(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_CMMCore, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_CMMCore_setOriginXY__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_CMMCore, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_CMMCore_setOriginXY__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'CMMCore_setOriginXY'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    setOriginXY(CMMCore *,char const *)\n"
    "    setOriginXY(CMMCore *)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMMCore_setOriginX__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CMMCore_setOriginX",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CMMCore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CMMCore_setOriginX" "', argument " "1"" of type '" "CMMCore *""'"); 
  }
  arg1 = reinterpret_cast< CMMCore * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CMMCore_setOriginX" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  try {
    (arg1)->setOriginX((char const *)arg2);
  }
  catch(CMMError &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new CMMError(static_cast< const CMMError& >(_e))),SWIGTYPE_p_CMMError,SWIG_POINTER_OWN), "CMMError", SWIGTYPE_p_CMMError); SWIG_fail;
  }
  
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMMCore_setOriginX__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CMMCore *arg1 = (CMMCore *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CMMCore_setOriginX",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CMMCore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CMMCore_setOriginX" "', argument " "1"" of type '" "CMMCore *""'"); 
  }
  arg1 = reinterpret_cast< CMMCore * >(argp1);
  try {
    (arg1)->setOriginX();
  }
  catch(CMMError &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new CMMError(static_cast< const CMMError& >(_e))),SWIGTYPE_p_CMMError,SWIG_POINTER_OWN), "CMMError", SWIGTYPE_p_CMMError); SWIG_fail;
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMMCore_setOriginX(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_CMMCore, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_CMMCore_setOriginX__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_CMMCore, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_CMMCore_setOriginX__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'CMMCore_setOriginX'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    setOriginX(CMMCore *,char const *)\n"
    "    setOriginX(CMMCore *)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMMCore_setOriginY__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CMMCore_setOriginY",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CMMCore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CMMCore_setOriginY" "', argument " "1"" of type '" "CMMCore *""'"); 
  }
  arg1 = reinterpret_cast< CMMCore * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CMMCore_setOriginY" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  try {
    (arg1)->setOriginY((char const *)arg2);
  }
  catch(CMMError &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new CMMError(static_cast< const CMMError& >(_e))),SWIGTYPE_p_CMMError,SWIG_POINTER_OWN), "CMMError", SWIGTYPE_p_CMMError); SWIG_fail;
  }
  
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMMCore_setOriginY__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CMMCore *arg1 = (CMMCore *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CMMCore_setOriginY",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CMMCore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CMMCore_setOriginY" "', argument " "1"" of type '" "CMMCore *""'"); 
  }
  arg1 = reinterpret_cast< CMMCore * >(argp1);
  try {
    (arg1)->setOriginY();
  }
  catch(CMMError &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new CMMError(static_cast< const CMMError& >(_e))),SWIGTYPE_p_CMMError,SWIG_POINTER_OWN), "CMMError", SWIGTYPE_p_CMMError); SWIG_fail;
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMMCore_setOriginY(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_CMMCore, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_CMMCore_setOriginY__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_CMMCore, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_CMMCore_setOriginY__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'CMMCore_setOriginY'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    setOriginY(CMMCore *,char const *)\n"
    "    setOriginY(CMMCore *)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMMCore_setAdapterOriginXY__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  double arg3 ;
  double arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:CMMCore_setAdapterOriginXY",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CMMCore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CMMCore_setAdapterOriginXY" "', argument " "1"" of type '" "CMMCore *""'"); 
  }
  arg1 = reinterpret_cast< CMMCore * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CMMCore_setAdapterOriginXY" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CMMCore_setAdapterOriginXY" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "CMMCore_setAdapterOriginXY" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  try {
    (arg1)->setAdapterOriginXY((char const *)arg2,arg3,arg4);
  }
  catch(CMMError &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new CMMError(static_cast< const CMMError& >(_e))),SWIGTYPE_p_CMMError,SWIG_POINTER_OWN), "CMMError", SWIGTYPE_p_CMMError); SWIG_fail;
  }
  
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMMCore_setAdapterOriginXY__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CMMCore *arg1 = (CMMCore *) 0 ;
  double arg2 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:CMMCore_setAdapterOriginXY",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CMMCore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CMMCore_setAdapterOriginXY" "', argument " "1"" of type '" "CMMCore *""'"); 
  }
  arg1 = reinterpret_cast< CMMCore * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CMMCore_setAdapterOriginXY" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CMMCore_setAdapterOriginXY" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  try {
    (arg1)->setAdapterOriginXY(arg2,arg3);
  }
  catch(CMMError &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new CMMError(static_cast< const CMMError& >(_e))),SWIGTYPE_p_CMMError,SWIG_POINTER_OWN), "CMMError", SWIGTYPE_p_CMMError); SWIG_fail;
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMMCore_setAdapterOriginXY(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 4); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_CMMCore, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_CMMCore_setAdapterOriginXY__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_CMMCore, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_CMMCore_setAdapterOriginXY__SWIG_0(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'CMMCore_setAdapterOriginXY'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    setAdapterOriginXY(CMMCore *,char const *,double,double)\n"
    "    setAdapterOriginXY(CMMCore *,double,double)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMMCore_isXYStageSequenceable(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CMMCore_isXYStageSequenceable",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CMMCore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CMMCore_isXYStageSequenceable" "', argument " "1"" of type '" "CMMCore *""'"); 
  }
  arg1 = reinterpret_cast< CMMCore * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CMMCore_isXYStageSequenceable" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  try {
    result = (bool)(arg1)->isXYStageSequenceable((char const *)arg2);
  }
  catch(CMMError &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new CMMError(static_cast< const CMMError& >(_e))),SWIGTYPE_p_CMMError,SWIG_POINTER_OWN), "CMMError", SWIGTYPE_p_CMMError); SWIG_fail;
  }
  
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMMCore_startXYStageSequence(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CMMCore_startXYStageSequence",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CMMCore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CMMCore_startXYStageSequence" "', argument " "1"" of type '" "CMMCore *""'"); 
  }
  arg1 = reinterpret_cast< CMMCore * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CMMCore_startXYStageSequence" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  try {
    (arg1)->startXYStageSequence((char const *)arg2);
  }
  catch(CMMError &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new CMMError(static_cast< const CMMError& >(_e))),SWIGTYPE_p_CMMError,SWIG_POINTER_OWN), "CMMError", SWIGTYPE_p_CMMError); SWIG_fail;
  }
  
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMMCore_stopXYStageSequence(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CMMCore_stopXYStageSequence",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CMMCore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CMMCore_stopXYStageSequence" "', argument " "1"" of type '" "CMMCore *""'"); 
  }
  arg1 = reinterpret_cast< CMMCore * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CMMCore_stopXYStageSequence" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  try {
    (arg1)->stopXYStageSequence((char const *)arg2);
  }
  catch(CMMError &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new CMMError(static_cast< const CMMError& >(_e))),SWIGTYPE_p_CMMError,SWIG_POINTER_OWN), "CMMError", SWIGTYPE_p_CMMError); SWIG_fail;
  }
  
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMMCore_getXYStageSequenceMaxLength(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  long result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CMMCore_getXYStageSequenceMaxLength",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CMMCore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CMMCore_getXYStageSequenceMaxLength" "', argument " "1"" of type '" "CMMCore *""'"); 
  }
  arg1 = reinterpret_cast< CMMCore * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CMMCore_getXYStageSequenceMaxLength" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  try {
    result = (long)(arg1)->getXYStageSequenceMaxLength((char const *)arg2);
  }
  catch(CMMError &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new CMMError(static_cast< const CMMError& >(_e))),SWIGTYPE_p_CMMError,SWIG_POINTER_OWN), "CMMError", SWIGTYPE_p_CMMError); SWIG_fail;
  }
  
  resultobj = SWIG_From_long(static_cast< long >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMMCore_loadXYStageSequence(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  std::vector< double,std::allocator< double > > arg3 ;
  std::vector< double,std::allocator< double > > arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:CMMCore_loadXYStageSequence",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CMMCore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CMMCore_loadXYStageSequence" "', argument " "1"" of type '" "CMMCore *""'"); 
  }
  arg1 = reinterpret_cast< CMMCore * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CMMCore_loadXYStageSequence" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  {
    std::vector<double,std::allocator< double > > *ptr = (std::vector<double,std::allocator< double > > *)0;
    int res = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "CMMCore_loadXYStageSequence" "', argument " "3"" of type '" "std::vector< double,std::allocator< double > >""'"); 
    }
    arg3 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::vector<double,std::allocator< double > > *ptr = (std::vector<double,std::allocator< double > > *)0;
    int res = swig::asptr(obj3, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "CMMCore_loadXYStageSequence" "', argument " "4"" of type '" "std::vector< double,std::allocator< double > >""'"); 
    }
    arg4 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  try {
    (arg1)->loadXYStageSequence((char const *)arg2,arg3,arg4);
  }
  catch(CMMError &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new CMMError(static_cast< const CMMError& >(_e))),SWIGTYPE_p_CMMError,SWIG_POINTER_OWN), "CMMError", SWIGTYPE_p_CMMError); SWIG_fail;
  }
  
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMMCore_setSerialProperties(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  char *arg5 = (char *) 0 ;
  char *arg6 = (char *) 0 ;
  char *arg7 = (char *) 0 ;
  char *arg8 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  int res5 ;
  char *buf5 = 0 ;
  int alloc5 = 0 ;
  int res6 ;
  char *buf6 = 0 ;
  int alloc6 = 0 ;
  int res7 ;
  char *buf7 = 0 ;
  int alloc7 = 0 ;
  int res8 ;
  char *buf8 = 0 ;
  int alloc8 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOOO:CMMCore_setSerialProperties",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CMMCore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CMMCore_setSerialProperties" "', argument " "1"" of type '" "CMMCore *""'"); 
  }
  arg1 = reinterpret_cast< CMMCore * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CMMCore_setSerialProperties" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CMMCore_setSerialProperties" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  res4 = SWIG_AsCharPtrAndSize(obj3, &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "CMMCore_setSerialProperties" "', argument " "4"" of type '" "char const *""'");
  }
  arg4 = reinterpret_cast< char * >(buf4);
  res5 = SWIG_AsCharPtrAndSize(obj4, &buf5, NULL, &alloc5);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "CMMCore_setSerialProperties" "', argument " "5"" of type '" "char const *""'");
  }
  arg5 = reinterpret_cast< char * >(buf5);
  res6 = SWIG_AsCharPtrAndSize(obj5, &buf6, NULL, &alloc6);
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "CMMCore_setSerialProperties" "', argument " "6"" of type '" "char const *""'");
  }
  arg6 = reinterpret_cast< char * >(buf6);
  res7 = SWIG_AsCharPtrAndSize(obj6, &buf7, NULL, &alloc7);
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "CMMCore_setSerialProperties" "', argument " "7"" of type '" "char const *""'");
  }
  arg7 = reinterpret_cast< char * >(buf7);
  res8 = SWIG_AsCharPtrAndSize(obj7, &buf8, NULL, &alloc8);
  if (!SWIG_IsOK(res8)) {
    SWIG_exception_fail(SWIG_ArgError(res8), "in method '" "CMMCore_setSerialProperties" "', argument " "8"" of type '" "char const *""'");
  }
  arg8 = reinterpret_cast< char * >(buf8);
  try {
    (arg1)->setSerialProperties((char const *)arg2,(char const *)arg3,(char const *)arg4,(char const *)arg5,(char const *)arg6,(char const *)arg7,(char const *)arg8);
  }
  catch(CMMError &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new CMMError(static_cast< const CMMError& >(_e))),SWIGTYPE_p_CMMError,SWIG_POINTER_OWN), "CMMError", SWIGTYPE_p_CMMError); SWIG_fail;
  }
  
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  if (alloc7 == SWIG_NEWOBJ) delete[] buf7;
  if (alloc8 == SWIG_NEWOBJ) delete[] buf8;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  if (alloc7 == SWIG_NEWOBJ) delete[] buf7;
  if (alloc8 == SWIG_NEWOBJ) delete[] buf8;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMMCore_setSerialPortCommand(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:CMMCore_setSerialPortCommand",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CMMCore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CMMCore_setSerialPortCommand" "', argument " "1"" of type '" "CMMCore *""'"); 
  }
  arg1 = reinterpret_cast< CMMCore * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CMMCore_setSerialPortCommand" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CMMCore_setSerialPortCommand" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  res4 = SWIG_AsCharPtrAndSize(obj3, &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "CMMCore_setSerialPortCommand" "', argument " "4"" of type '" "char const *""'");
  }
  arg4 = reinterpret_cast< char * >(buf4);
  try {
    (arg1)->setSerialPortCommand((char const *)arg2,(char const *)arg3,(char const *)arg4);
  }
  catch(CMMError &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new CMMError(static_cast< const CMMError& >(_e))),SWIGTYPE_p_CMMError,SWIG_POINTER_OWN), "CMMError", SWIGTYPE_p_CMMError); SWIG_fail;
  }
  
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMMCore_getSerialPortAnswer(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:CMMCore_getSerialPortAnswer",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CMMCore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CMMCore_getSerialPortAnswer" "', argument " "1"" of type '" "CMMCore *""'"); 
  }
  arg1 = reinterpret_cast< CMMCore * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CMMCore_getSerialPortAnswer" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CMMCore_getSerialPortAnswer" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  try {
    result = (arg1)->getSerialPortAnswer((char const *)arg2,(char const *)arg3);
  }
  catch(CMMError &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new CMMError(static_cast< const CMMError& >(_e))),SWIGTYPE_p_CMMError,SWIG_POINTER_OWN), "CMMError", SWIGTYPE_p_CMMError); SWIG_fail;
  }
  
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMMCore_writeToSerialPort(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  std::vector< char,std::allocator< char > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:CMMCore_writeToSerialPort",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CMMCore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CMMCore_writeToSerialPort" "', argument " "1"" of type '" "CMMCore *""'"); 
  }
  arg1 = reinterpret_cast< CMMCore * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CMMCore_writeToSerialPort" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  {
    std::vector<char,std::allocator< char > > *ptr = (std::vector<char,std::allocator< char > > *)0;
    res3 = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CMMCore_writeToSerialPort" "', argument " "3"" of type '" "std::vector< char,std::allocator< char > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CMMCore_writeToSerialPort" "', argument " "3"" of type '" "std::vector< char,std::allocator< char > > const &""'"); 
    }
    arg3 = ptr;
  }
  try {
    (arg1)->writeToSerialPort((char const *)arg2,(std::vector< char,std::allocator< char > > const &)*arg3);
  }
  catch(CMMError &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new CMMError(static_cast< const CMMError& >(_e))),SWIGTYPE_p_CMMError,SWIG_POINTER_OWN), "CMMError", SWIGTYPE_p_CMMError); SWIG_fail;
  }
  
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMMCore_readFromSerialPort(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< char,std::allocator< char > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CMMCore_readFromSerialPort",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CMMCore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CMMCore_readFromSerialPort" "', argument " "1"" of type '" "CMMCore *""'"); 
  }
  arg1 = reinterpret_cast< CMMCore * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CMMCore_readFromSerialPort" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  try {
    result = (arg1)->readFromSerialPort((char const *)arg2);
  }
  catch(CMMError &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new CMMError(static_cast< const CMMError& >(_e))),SWIGTYPE_p_CMMError,SWIG_POINTER_OWN), "CMMError", SWIGTYPE_p_CMMError); SWIG_fail;
  }
  
  resultobj = swig::from(static_cast< std::vector<char,std::allocator< char > > >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMMCore_setSLMPixelsTo__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  unsigned char arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  unsigned char val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:CMMCore_setSLMPixelsTo",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CMMCore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CMMCore_setSLMPixelsTo" "', argument " "1"" of type '" "CMMCore *""'"); 
  }
  arg1 = reinterpret_cast< CMMCore * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CMMCore_setSLMPixelsTo" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_unsigned_SS_char(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CMMCore_setSLMPixelsTo" "', argument " "3"" of type '" "unsigned char""'");
  } 
  arg3 = static_cast< unsigned char >(val3);
  try {
    (arg1)->setSLMPixelsTo((char const *)arg2,arg3);
  }
  catch(CMMError &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new CMMError(static_cast< const CMMError& >(_e))),SWIGTYPE_p_CMMError,SWIG_POINTER_OWN), "CMMError", SWIGTYPE_p_CMMError); SWIG_fail;
  }
  
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMMCore_setSLMPixelsTo__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  unsigned char arg3 ;
  unsigned char arg4 ;
  unsigned char arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  unsigned char val3 ;
  int ecode3 = 0 ;
  unsigned char val4 ;
  int ecode4 = 0 ;
  unsigned char val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:CMMCore_setSLMPixelsTo",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CMMCore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CMMCore_setSLMPixelsTo" "', argument " "1"" of type '" "CMMCore *""'"); 
  }
  arg1 = reinterpret_cast< CMMCore * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CMMCore_setSLMPixelsTo" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_unsigned_SS_char(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CMMCore_setSLMPixelsTo" "', argument " "3"" of type '" "unsigned char""'");
  } 
  arg3 = static_cast< unsigned char >(val3);
  ecode4 = SWIG_AsVal_unsigned_SS_char(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "CMMCore_setSLMPixelsTo" "', argument " "4"" of type '" "unsigned char""'");
  } 
  arg4 = static_cast< unsigned char >(val4);
  ecode5 = SWIG_AsVal_unsigned_SS_char(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "CMMCore_setSLMPixelsTo" "', argument " "5"" of type '" "unsigned char""'");
  } 
  arg5 = static_cast< unsigned char >(val5);
  try {
    (arg1)->setSLMPixelsTo((char const *)arg2,arg3,arg4,arg5);
  }
  catch(CMMError &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new CMMError(static_cast< const CMMError& >(_e))),SWIGTYPE_p_CMMError,SWIG_POINTER_OWN), "CMMError", SWIGTYPE_p_CMMError); SWIG_fail;
  }
  
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMMCore_setSLMPixelsTo(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[6];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 5); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_CMMCore, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_char(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_CMMCore_setSLMPixelsTo__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_CMMCore, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_char(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_unsigned_SS_char(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_unsigned_SS_char(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_CMMCore_setSLMPixelsTo__SWIG_1(self, args);
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'CMMCore_setSLMPixelsTo'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    setSLMPixelsTo(CMMCore *,char const *,unsigned char)\n"
    "    setSLMPixelsTo(CMMCore *,char const *,unsigned char,unsigned char,unsigned char)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMMCore_displaySLMImage(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CMMCore_displaySLMImage",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CMMCore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CMMCore_displaySLMImage" "', argument " "1"" of type '" "CMMCore *""'"); 
  }
  arg1 = reinterpret_cast< CMMCore * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CMMCore_displaySLMImage" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  try {
    (arg1)->displaySLMImage((char const *)arg2);
  }
  catch(CMMError &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new CMMError(static_cast< const CMMError& >(_e))),SWIGTYPE_p_CMMError,SWIG_POINTER_OWN), "CMMError", SWIGTYPE_p_CMMError); SWIG_fail;
  }
  
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMMCore_setSLMExposure(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:CMMCore_setSLMExposure",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CMMCore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CMMCore_setSLMExposure" "', argument " "1"" of type '" "CMMCore *""'"); 
  }
  arg1 = reinterpret_cast< CMMCore * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CMMCore_setSLMExposure" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CMMCore_setSLMExposure" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  try {
    (arg1)->setSLMExposure((char const *)arg2,arg3);
  }
  catch(CMMError &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new CMMError(static_cast< const CMMError& >(_e))),SWIGTYPE_p_CMMError,SWIG_POINTER_OWN), "CMMError", SWIGTYPE_p_CMMError); SWIG_fail;
  }
  
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMMCore_getSLMExposure(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CMMCore_getSLMExposure",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CMMCore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CMMCore_getSLMExposure" "', argument " "1"" of type '" "CMMCore *""'"); 
  }
  arg1 = reinterpret_cast< CMMCore * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CMMCore_getSLMExposure" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  try {
    result = (double)(arg1)->getSLMExposure((char const *)arg2);
  }
  catch(CMMError &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new CMMError(static_cast< const CMMError& >(_e))),SWIGTYPE_p_CMMError,SWIG_POINTER_OWN), "CMMError", SWIGTYPE_p_CMMError); SWIG_fail;
  }
  
  resultobj = SWIG_From_double(static_cast< double >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMMCore_getSLMWidth(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  unsigned int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CMMCore_getSLMWidth",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CMMCore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CMMCore_getSLMWidth" "', argument " "1"" of type '" "CMMCore *""'"); 
  }
  arg1 = reinterpret_cast< CMMCore * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CMMCore_getSLMWidth" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  try {
    result = (unsigned int)(arg1)->getSLMWidth((char const *)arg2);
  }
  catch(CMMError &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new CMMError(static_cast< const CMMError& >(_e))),SWIGTYPE_p_CMMError,SWIG_POINTER_OWN), "CMMError", SWIGTYPE_p_CMMError); SWIG_fail;
  }
  
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMMCore_getSLMHeight(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  unsigned int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CMMCore_getSLMHeight",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CMMCore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CMMCore_getSLMHeight" "', argument " "1"" of type '" "CMMCore *""'"); 
  }
  arg1 = reinterpret_cast< CMMCore * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CMMCore_getSLMHeight" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  try {
    result = (unsigned int)(arg1)->getSLMHeight((char const *)arg2);
  }
  catch(CMMError &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new CMMError(static_cast< const CMMError& >(_e))),SWIGTYPE_p_CMMError,SWIG_POINTER_OWN), "CMMError", SWIGTYPE_p_CMMError); SWIG_fail;
  }
  
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMMCore_getSLMNumberOfComponents(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  unsigned int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CMMCore_getSLMNumberOfComponents",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CMMCore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CMMCore_getSLMNumberOfComponents" "', argument " "1"" of type '" "CMMCore *""'"); 
  }
  arg1 = reinterpret_cast< CMMCore * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CMMCore_getSLMNumberOfComponents" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  try {
    result = (unsigned int)(arg1)->getSLMNumberOfComponents((char const *)arg2);
  }
  catch(CMMError &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new CMMError(static_cast< const CMMError& >(_e))),SWIGTYPE_p_CMMError,SWIG_POINTER_OWN), "CMMError", SWIGTYPE_p_CMMError); SWIG_fail;
  }
  
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMMCore_getSLMBytesPerPixel(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  unsigned int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CMMCore_getSLMBytesPerPixel",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CMMCore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CMMCore_getSLMBytesPerPixel" "', argument " "1"" of type '" "CMMCore *""'"); 
  }
  arg1 = reinterpret_cast< CMMCore * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CMMCore_getSLMBytesPerPixel" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  try {
    result = (unsigned int)(arg1)->getSLMBytesPerPixel((char const *)arg2);
  }
  catch(CMMError &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new CMMError(static_cast< const CMMError& >(_e))),SWIGTYPE_p_CMMError,SWIG_POINTER_OWN), "CMMError", SWIGTYPE_p_CMMError); SWIG_fail;
  }
  
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMMCore_getSLMSequenceMaxLength(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  long result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CMMCore_getSLMSequenceMaxLength",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CMMCore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CMMCore_getSLMSequenceMaxLength" "', argument " "1"" of type '" "CMMCore *""'"); 
  }
  arg1 = reinterpret_cast< CMMCore * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CMMCore_getSLMSequenceMaxLength" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  try {
    result = (long)(arg1)->getSLMSequenceMaxLength((char const *)arg2);
  }
  catch(CMMError &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new CMMError(static_cast< const CMMError& >(_e))),SWIGTYPE_p_CMMError,SWIG_POINTER_OWN), "CMMError", SWIGTYPE_p_CMMError); SWIG_fail;
  }
  
  resultobj = SWIG_From_long(static_cast< long >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMMCore_startSLMSequence(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CMMCore_startSLMSequence",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CMMCore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CMMCore_startSLMSequence" "', argument " "1"" of type '" "CMMCore *""'"); 
  }
  arg1 = reinterpret_cast< CMMCore * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CMMCore_startSLMSequence" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  try {
    (arg1)->startSLMSequence((char const *)arg2);
  }
  catch(CMMError &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new CMMError(static_cast< const CMMError& >(_e))),SWIGTYPE_p_CMMError,SWIG_POINTER_OWN), "CMMError", SWIGTYPE_p_CMMError); SWIG_fail;
  }
  
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMMCore_stopSLMSequence(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CMMCore_stopSLMSequence",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CMMCore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CMMCore_stopSLMSequence" "', argument " "1"" of type '" "CMMCore *""'"); 
  }
  arg1 = reinterpret_cast< CMMCore * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CMMCore_stopSLMSequence" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  try {
    (arg1)->stopSLMSequence((char const *)arg2);
  }
  catch(CMMError &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new CMMError(static_cast< const CMMError& >(_e))),SWIGTYPE_p_CMMError,SWIG_POINTER_OWN), "CMMError", SWIGTYPE_p_CMMError); SWIG_fail;
  }
  
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMMCore_loadSLMSequence(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  SwigValueWrapper< std::vector< unsigned char *,std::allocator< unsigned char * > > > arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:CMMCore_loadSLMSequence",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CMMCore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CMMCore_loadSLMSequence" "', argument " "1"" of type '" "CMMCore *""'"); 
  }
  arg1 = reinterpret_cast< CMMCore * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CMMCore_loadSLMSequence" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  {
    // check if is a list
    if(PyList_Check(obj2))
    {
      long expectedLength = (arg1)->getSLMWidth(arg2) * (arg1)->getSLMHeight(arg2);
      
      Py_ssize_t size = PyList_Size(obj2);
      std::vector<unsigned char*> inputVector;
      
      for(Py_ssize_t i = 0; i < size; i++)
      {
        //printf("Pushing %d\n",  i);
        PyObject * o = PyList_GetItem(obj2, i);
        if(PyString_Check(o))
        {
          if (PyString_Size(o) != expectedLength)
          {
            PyErr_SetString(PyExc_TypeError, "One of the Image strings is the wrong length for this SLM.");
            return NULL;
          }
          
          inputVector.push_back((unsigned char *)PyString_AsString(o));
        }
        else
        {
          PyErr_SetString(PyExc_TypeError, "list must contain strings");
          return NULL;
        }
      }
      arg3 = inputVector;
    }
    else
    {
      PyErr_SetString(PyExc_TypeError, "not a list");
      return NULL;
    }
  }
  try {
    (arg1)->loadSLMSequence((char const *)arg2,arg3);
  }
  catch(CMMError &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new CMMError(static_cast< const CMMError& >(_e))),SWIGTYPE_p_CMMError,SWIG_POINTER_OWN), "CMMError", SWIGTYPE_p_CMMError); SWIG_fail;
  }
  
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMMCore_pointGalvoAndFire(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:CMMCore_pointGalvoAndFire",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CMMCore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CMMCore_pointGalvoAndFire" "', argument " "1"" of type '" "CMMCore *""'"); 
  }
  arg1 = reinterpret_cast< CMMCore * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CMMCore_pointGalvoAndFire" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CMMCore_pointGalvoAndFire" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "CMMCore_pointGalvoAndFire" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  ecode5 = SWIG_AsVal_double(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "CMMCore_pointGalvoAndFire" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  try {
    (arg1)->pointGalvoAndFire((char const *)arg2,arg3,arg4,arg5);
  }
  catch(CMMError &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new CMMError(static_cast< const CMMError& >(_e))),SWIGTYPE_p_CMMError,SWIG_POINTER_OWN), "CMMError", SWIGTYPE_p_CMMError); SWIG_fail;
  }
  
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMMCore_setGalvoSpotInterval(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:CMMCore_setGalvoSpotInterval",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CMMCore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CMMCore_setGalvoSpotInterval" "', argument " "1"" of type '" "CMMCore *""'"); 
  }
  arg1 = reinterpret_cast< CMMCore * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CMMCore_setGalvoSpotInterval" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CMMCore_setGalvoSpotInterval" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  try {
    (arg1)->setGalvoSpotInterval((char const *)arg2,arg3);
  }
  catch(CMMError &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new CMMError(static_cast< const CMMError& >(_e))),SWIGTYPE_p_CMMError,SWIG_POINTER_OWN), "CMMError", SWIGTYPE_p_CMMError); SWIG_fail;
  }
  
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMMCore_setGalvoPosition(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  double arg3 ;
  double arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:CMMCore_setGalvoPosition",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CMMCore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CMMCore_setGalvoPosition" "', argument " "1"" of type '" "CMMCore *""'"); 
  }
  arg1 = reinterpret_cast< CMMCore * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CMMCore_setGalvoPosition" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CMMCore_setGalvoPosition" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "CMMCore_setGalvoPosition" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  try {
    (arg1)->setGalvoPosition((char const *)arg2,arg3,arg4);
  }
  catch(CMMError &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new CMMError(static_cast< const CMMError& >(_e))),SWIGTYPE_p_CMMError,SWIG_POINTER_OWN), "CMMError", SWIGTYPE_p_CMMError); SWIG_fail;
  }
  
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMMCore_getGalvoPosition(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  double *arg3 = 0 ;
  double *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  double temp3 ;
  int res3 = SWIG_TMPOBJ ;
  double temp4 ;
  int res4 = SWIG_TMPOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  arg3 = &temp3;
  arg4 = &temp4;
  if (!PyArg_ParseTuple(args,(char *)"OO:CMMCore_getGalvoPosition",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CMMCore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CMMCore_getGalvoPosition" "', argument " "1"" of type '" "CMMCore *""'"); 
  }
  arg1 = reinterpret_cast< CMMCore * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CMMCore_getGalvoPosition" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  try {
    (arg1)->getGalvoPosition((char const *)arg2,*arg3,*arg4);
  }
  catch(CMMError &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new CMMError(static_cast< const CMMError& >(_e))),SWIGTYPE_p_CMMError,SWIG_POINTER_OWN), "CMMError", SWIGTYPE_p_CMMError); SWIG_fail;
  }
  
  resultobj = SWIG_Py_Void();
  if (SWIG_IsTmpObj(res3)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_double((*arg3)));
  } else {
    int new_flags = SWIG_IsNewObj(res3) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg3), SWIGTYPE_p_double, new_flags));
  }
  if (SWIG_IsTmpObj(res4)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_double((*arg4)));
  } else {
    int new_flags = SWIG_IsNewObj(res4) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg4), SWIGTYPE_p_double, new_flags));
  }
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMMCore_setGalvoIlluminationState(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:CMMCore_setGalvoIlluminationState",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CMMCore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CMMCore_setGalvoIlluminationState" "', argument " "1"" of type '" "CMMCore *""'"); 
  }
  arg1 = reinterpret_cast< CMMCore * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CMMCore_setGalvoIlluminationState" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CMMCore_setGalvoIlluminationState" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  try {
    (arg1)->setGalvoIlluminationState((char const *)arg2,arg3);
  }
  catch(CMMError &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new CMMError(static_cast< const CMMError& >(_e))),SWIGTYPE_p_CMMError,SWIG_POINTER_OWN), "CMMError", SWIGTYPE_p_CMMError); SWIG_fail;
  }
  
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMMCore_getGalvoXRange(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CMMCore_getGalvoXRange",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CMMCore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CMMCore_getGalvoXRange" "', argument " "1"" of type '" "CMMCore *""'"); 
  }
  arg1 = reinterpret_cast< CMMCore * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CMMCore_getGalvoXRange" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  try {
    result = (double)(arg1)->getGalvoXRange((char const *)arg2);
  }
  catch(CMMError &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new CMMError(static_cast< const CMMError& >(_e))),SWIGTYPE_p_CMMError,SWIG_POINTER_OWN), "CMMError", SWIGTYPE_p_CMMError); SWIG_fail;
  }
  
  resultobj = SWIG_From_double(static_cast< double >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMMCore_getGalvoXMinimum(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CMMCore_getGalvoXMinimum",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CMMCore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CMMCore_getGalvoXMinimum" "', argument " "1"" of type '" "CMMCore *""'"); 
  }
  arg1 = reinterpret_cast< CMMCore * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CMMCore_getGalvoXMinimum" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  try {
    result = (double)(arg1)->getGalvoXMinimum((char const *)arg2);
  }
  catch(CMMError &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new CMMError(static_cast< const CMMError& >(_e))),SWIGTYPE_p_CMMError,SWIG_POINTER_OWN), "CMMError", SWIGTYPE_p_CMMError); SWIG_fail;
  }
  
  resultobj = SWIG_From_double(static_cast< double >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMMCore_getGalvoYRange(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CMMCore_getGalvoYRange",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CMMCore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CMMCore_getGalvoYRange" "', argument " "1"" of type '" "CMMCore *""'"); 
  }
  arg1 = reinterpret_cast< CMMCore * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CMMCore_getGalvoYRange" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  try {
    result = (double)(arg1)->getGalvoYRange((char const *)arg2);
  }
  catch(CMMError &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new CMMError(static_cast< const CMMError& >(_e))),SWIGTYPE_p_CMMError,SWIG_POINTER_OWN), "CMMError", SWIGTYPE_p_CMMError); SWIG_fail;
  }
  
  resultobj = SWIG_From_double(static_cast< double >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMMCore_getGalvoYMinimum(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CMMCore_getGalvoYMinimum",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CMMCore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CMMCore_getGalvoYMinimum" "', argument " "1"" of type '" "CMMCore *""'"); 
  }
  arg1 = reinterpret_cast< CMMCore * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CMMCore_getGalvoYMinimum" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  try {
    result = (double)(arg1)->getGalvoYMinimum((char const *)arg2);
  }
  catch(CMMError &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new CMMError(static_cast< const CMMError& >(_e))),SWIGTYPE_p_CMMError,SWIG_POINTER_OWN), "CMMError", SWIGTYPE_p_CMMError); SWIG_fail;
  }
  
  resultobj = SWIG_From_double(static_cast< double >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMMCore_addGalvoPolygonVertex(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  double arg4 ;
  double arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:CMMCore_addGalvoPolygonVertex",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CMMCore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CMMCore_addGalvoPolygonVertex" "', argument " "1"" of type '" "CMMCore *""'"); 
  }
  arg1 = reinterpret_cast< CMMCore * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CMMCore_addGalvoPolygonVertex" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CMMCore_addGalvoPolygonVertex" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "CMMCore_addGalvoPolygonVertex" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  ecode5 = SWIG_AsVal_double(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "CMMCore_addGalvoPolygonVertex" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  try {
    (arg1)->addGalvoPolygonVertex((char const *)arg2,arg3,arg4,arg5);
  }
  catch(CMMError &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new CMMError(static_cast< const CMMError& >(_e))),SWIGTYPE_p_CMMError,SWIG_POINTER_OWN), "CMMError", SWIGTYPE_p_CMMError); SWIG_fail;
  }
  
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMMCore_deleteGalvoPolygons(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CMMCore_deleteGalvoPolygons",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CMMCore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CMMCore_deleteGalvoPolygons" "', argument " "1"" of type '" "CMMCore *""'"); 
  }
  arg1 = reinterpret_cast< CMMCore * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CMMCore_deleteGalvoPolygons" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  try {
    (arg1)->deleteGalvoPolygons((char const *)arg2);
  }
  catch(CMMError &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new CMMError(static_cast< const CMMError& >(_e))),SWIGTYPE_p_CMMError,SWIG_POINTER_OWN), "CMMError", SWIGTYPE_p_CMMError); SWIG_fail;
  }
  
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMMCore_loadGalvoPolygons(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CMMCore_loadGalvoPolygons",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CMMCore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CMMCore_loadGalvoPolygons" "', argument " "1"" of type '" "CMMCore *""'"); 
  }
  arg1 = reinterpret_cast< CMMCore * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CMMCore_loadGalvoPolygons" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  try {
    (arg1)->loadGalvoPolygons((char const *)arg2);
  }
  catch(CMMError &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new CMMError(static_cast< const CMMError& >(_e))),SWIGTYPE_p_CMMError,SWIG_POINTER_OWN), "CMMError", SWIGTYPE_p_CMMError); SWIG_fail;
  }
  
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMMCore_setGalvoPolygonRepetitions(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:CMMCore_setGalvoPolygonRepetitions",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CMMCore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CMMCore_setGalvoPolygonRepetitions" "', argument " "1"" of type '" "CMMCore *""'"); 
  }
  arg1 = reinterpret_cast< CMMCore * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CMMCore_setGalvoPolygonRepetitions" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CMMCore_setGalvoPolygonRepetitions" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  try {
    (arg1)->setGalvoPolygonRepetitions((char const *)arg2,arg3);
  }
  catch(CMMError &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new CMMError(static_cast< const CMMError& >(_e))),SWIGTYPE_p_CMMError,SWIG_POINTER_OWN), "CMMError", SWIGTYPE_p_CMMError); SWIG_fail;
  }
  
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMMCore_runGalvoPolygons(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CMMCore_runGalvoPolygons",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CMMCore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CMMCore_runGalvoPolygons" "', argument " "1"" of type '" "CMMCore *""'"); 
  }
  arg1 = reinterpret_cast< CMMCore * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CMMCore_runGalvoPolygons" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  try {
    (arg1)->runGalvoPolygons((char const *)arg2);
  }
  catch(CMMError &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new CMMError(static_cast< const CMMError& >(_e))),SWIGTYPE_p_CMMError,SWIG_POINTER_OWN), "CMMError", SWIGTYPE_p_CMMError); SWIG_fail;
  }
  
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMMCore_runGalvoSequence(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CMMCore_runGalvoSequence",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CMMCore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CMMCore_runGalvoSequence" "', argument " "1"" of type '" "CMMCore *""'"); 
  }
  arg1 = reinterpret_cast< CMMCore * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CMMCore_runGalvoSequence" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  try {
    (arg1)->runGalvoSequence((char const *)arg2);
  }
  catch(CMMError &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new CMMError(static_cast< const CMMError& >(_e))),SWIGTYPE_p_CMMError,SWIG_POINTER_OWN), "CMMError", SWIGTYPE_p_CMMError); SWIG_fail;
  }
  
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMMCore_getGalvoChannel(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CMMCore_getGalvoChannel",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CMMCore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CMMCore_getGalvoChannel" "', argument " "1"" of type '" "CMMCore *""'"); 
  }
  arg1 = reinterpret_cast< CMMCore * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CMMCore_getGalvoChannel" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  try {
    result = (arg1)->getGalvoChannel((char const *)arg2);
  }
  catch(CMMError &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new CMMError(static_cast< const CMMError& >(_e))),SWIGTYPE_p_CMMError,SWIG_POINTER_OWN), "CMMError", SWIGTYPE_p_CMMError); SWIG_fail;
  }
  
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMMCore_supportsDeviceDetection(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CMMCore_supportsDeviceDetection",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CMMCore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CMMCore_supportsDeviceDetection" "', argument " "1"" of type '" "CMMCore *""'"); 
  }
  arg1 = reinterpret_cast< CMMCore * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CMMCore_supportsDeviceDetection" "', argument " "2"" of type '" "char *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  result = (bool)(arg1)->supportsDeviceDetection(arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMMCore_detectDevice(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  MM::DeviceDetectionStatus result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CMMCore_detectDevice",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CMMCore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CMMCore_detectDevice" "', argument " "1"" of type '" "CMMCore *""'"); 
  }
  arg1 = reinterpret_cast< CMMCore * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CMMCore_detectDevice" "', argument " "2"" of type '" "char *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  result = (MM::DeviceDetectionStatus)(arg1)->detectDevice(arg2);
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMMCore_getParentLabel(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CMMCore_getParentLabel",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CMMCore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CMMCore_getParentLabel" "', argument " "1"" of type '" "CMMCore *""'"); 
  }
  arg1 = reinterpret_cast< CMMCore * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CMMCore_getParentLabel" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  try {
    result = (arg1)->getParentLabel((char const *)arg2);
  }
  catch(CMMError &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new CMMError(static_cast< const CMMError& >(_e))),SWIGTYPE_p_CMMError,SWIG_POINTER_OWN), "CMMError", SWIGTYPE_p_CMMError); SWIG_fail;
  }
  
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMMCore_setParentLabel(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:CMMCore_setParentLabel",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CMMCore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CMMCore_setParentLabel" "', argument " "1"" of type '" "CMMCore *""'"); 
  }
  arg1 = reinterpret_cast< CMMCore * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CMMCore_setParentLabel" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CMMCore_setParentLabel" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  try {
    (arg1)->setParentLabel((char const *)arg2,(char const *)arg3);
  }
  catch(CMMError &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new CMMError(static_cast< const CMMError& >(_e))),SWIGTYPE_p_CMMError,SWIG_POINTER_OWN), "CMMError", SWIGTYPE_p_CMMError); SWIG_fail;
  }
  
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMMCore_getInstalledDevices(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< std::string,std::allocator< std::string > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CMMCore_getInstalledDevices",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CMMCore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CMMCore_getInstalledDevices" "', argument " "1"" of type '" "CMMCore *""'"); 
  }
  arg1 = reinterpret_cast< CMMCore * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CMMCore_getInstalledDevices" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  try {
    result = (arg1)->getInstalledDevices((char const *)arg2);
  }
  catch(CMMError &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new CMMError(static_cast< const CMMError& >(_e))),SWIGTYPE_p_CMMError,SWIG_POINTER_OWN), "CMMError", SWIGTYPE_p_CMMError); SWIG_fail;
  }
  
  resultobj = swig::from(static_cast< std::vector<std::string,std::allocator< std::string > > >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMMCore_getInstalledDeviceDescription(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:CMMCore_getInstalledDeviceDescription",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CMMCore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CMMCore_getInstalledDeviceDescription" "', argument " "1"" of type '" "CMMCore *""'"); 
  }
  arg1 = reinterpret_cast< CMMCore * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CMMCore_getInstalledDeviceDescription" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CMMCore_getInstalledDeviceDescription" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  try {
    result = (arg1)->getInstalledDeviceDescription((char const *)arg2,(char const *)arg3);
  }
  catch(CMMError &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new CMMError(static_cast< const CMMError& >(_e))),SWIGTYPE_p_CMMError,SWIG_POINTER_OWN), "CMMError", SWIGTYPE_p_CMMError); SWIG_fail;
  }
  
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMMCore_getLoadedPeripheralDevices(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< std::string,std::allocator< std::string > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:CMMCore_getLoadedPeripheralDevices",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CMMCore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CMMCore_getLoadedPeripheralDevices" "', argument " "1"" of type '" "CMMCore *""'"); 
  }
  arg1 = reinterpret_cast< CMMCore * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CMMCore_getLoadedPeripheralDevices" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  try {
    result = (arg1)->getLoadedPeripheralDevices((char const *)arg2);
  }
  catch(CMMError &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new CMMError(static_cast< const CMMError& >(_e))),SWIGTYPE_p_CMMError,SWIG_POINTER_OWN), "CMMError", SWIGTYPE_p_CMMError); SWIG_fail;
  }
  
  resultobj = swig::from(static_cast< std::vector<std::string,std::allocator< std::string > > >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMMCore_getUserId(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CMMCore *arg1 = (CMMCore *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CMMCore_getUserId",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CMMCore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CMMCore_getUserId" "', argument " "1"" of type '" "CMMCore const *""'"); 
  }
  arg1 = reinterpret_cast< CMMCore * >(argp1);
  result = ((CMMCore const *)arg1)->getUserId();
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMMCore_getHostName(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CMMCore *arg1 = (CMMCore *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CMMCore_getHostName",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CMMCore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CMMCore_getHostName" "', argument " "1"" of type '" "CMMCore const *""'"); 
  }
  arg1 = reinterpret_cast< CMMCore * >(argp1);
  result = ((CMMCore const *)arg1)->getHostName();
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMMCore_getMACAddresses(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CMMCore *arg1 = (CMMCore *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::string,std::allocator< std::string > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:CMMCore_getMACAddresses",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CMMCore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CMMCore_getMACAddresses" "', argument " "1"" of type '" "CMMCore *""'"); 
  }
  arg1 = reinterpret_cast< CMMCore * >(argp1);
  result = (arg1)->getMACAddresses();
  resultobj = swig::from(static_cast< std::vector<std::string,std::allocator< std::string > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CMMCore_setSLMImage(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CMMCore *arg1 = (CMMCore *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  size_t size3 = 0 ;
  int alloc3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:CMMCore_setSLMImage",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CMMCore, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CMMCore_setSLMImage" "', argument " "1"" of type '" "CMMCore *""'"); 
  }
  arg1 = reinterpret_cast< CMMCore * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CMMCore_setSLMImage" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, &size3, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CMMCore_setSLMImage" "', argument " "3"" of type '" "char *""'");
  }  
  arg3 = reinterpret_cast< char * >(buf3);
  arg4 = static_cast< int >(size3 - 1);
  result = (PyObject *)CMMCore_setSLMImage_pywrap(arg1,(char const *)arg2,arg3,arg4);
  resultobj = result;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *CMMCore_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_CMMCore, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_MetadataError(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  PyObject * obj0 = 0 ;
  MetadataError *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_MetadataError",&obj0)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(obj0, &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_MetadataError" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  result = (MetadataError *)new MetadataError((char const *)arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_MetadataError, SWIG_POINTER_NEW |  0 );
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_MetadataError(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MetadataError *arg1 = (MetadataError *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_MetadataError",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_MetadataError, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_MetadataError" "', argument " "1"" of type '" "MetadataError *""'"); 
  }
  arg1 = reinterpret_cast< MetadataError * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MetadataError_getMsg(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MetadataError *arg1 = (MetadataError *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MetadataError_getMsg",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_MetadataError, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MetadataError_getMsg" "', argument " "1"" of type '" "MetadataError *""'"); 
  }
  arg1 = reinterpret_cast< MetadataError * >(argp1);
  result = (arg1)->getMsg();
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *MetadataError_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_MetadataError, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_MetadataKeyError(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MetadataKeyError *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_MetadataKeyError")) SWIG_fail;
  result = (MetadataKeyError *)new MetadataKeyError();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_MetadataKeyError, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_MetadataKeyError(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MetadataKeyError *arg1 = (MetadataKeyError *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_MetadataKeyError",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_MetadataKeyError, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_MetadataKeyError" "', argument " "1"" of type '" "MetadataKeyError *""'"); 
  }
  arg1 = reinterpret_cast< MetadataKeyError * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MetadataKeyError___getitem__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MetadataKeyError *arg1 = (MetadataKeyError *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MetadataKeyError___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_MetadataKeyError, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MetadataKeyError___getitem__" "', argument " "1"" of type '" "MetadataKeyError *""'"); 
  }
  arg1 = reinterpret_cast< MetadataKeyError * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MetadataKeyError___getitem__" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = MetadataKeyError___getitem__(arg1,arg2);
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MetadataKeyError___str__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MetadataKeyError *arg1 = (MetadataKeyError *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MetadataKeyError___str__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_MetadataKeyError, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MetadataKeyError___str__" "', argument " "1"" of type '" "MetadataKeyError *""'"); 
  }
  arg1 = reinterpret_cast< MetadataKeyError * >(argp1);
  result = MetadataKeyError___str__(arg1);
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *MetadataKeyError_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_MetadataKeyError, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_MetadataIndexError(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MetadataIndexError *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_MetadataIndexError")) SWIG_fail;
  result = (MetadataIndexError *)new MetadataIndexError();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_MetadataIndexError, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_MetadataIndexError(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MetadataIndexError *arg1 = (MetadataIndexError *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_MetadataIndexError",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_MetadataIndexError, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_MetadataIndexError" "', argument " "1"" of type '" "MetadataIndexError *""'"); 
  }
  arg1 = reinterpret_cast< MetadataIndexError * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MetadataIndexError___getitem__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MetadataIndexError *arg1 = (MetadataIndexError *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MetadataIndexError___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_MetadataIndexError, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MetadataIndexError___getitem__" "', argument " "1"" of type '" "MetadataIndexError *""'"); 
  }
  arg1 = reinterpret_cast< MetadataIndexError * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MetadataIndexError___getitem__" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = MetadataIndexError___getitem__(arg1,arg2);
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MetadataIndexError___str__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MetadataIndexError *arg1 = (MetadataIndexError *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MetadataIndexError___str__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_MetadataIndexError, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MetadataIndexError___str__" "', argument " "1"" of type '" "MetadataIndexError *""'"); 
  }
  arg1 = reinterpret_cast< MetadataIndexError * >(argp1);
  result = MetadataIndexError___str__(arg1);
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *MetadataIndexError_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_MetadataIndexError, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_delete_MetadataTag(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MetadataTag *arg1 = (MetadataTag *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_MetadataTag",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_MetadataTag, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_MetadataTag" "', argument " "1"" of type '" "MetadataTag *""'"); 
  }
  arg1 = reinterpret_cast< MetadataTag * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MetadataTag_GetDevice(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MetadataTag *arg1 = (MetadataTag *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MetadataTag_GetDevice",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_MetadataTag, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MetadataTag_GetDevice" "', argument " "1"" of type '" "MetadataTag const *""'"); 
  }
  arg1 = reinterpret_cast< MetadataTag * >(argp1);
  result = (std::string *) &((MetadataTag const *)arg1)->GetDevice();
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MetadataTag_GetName(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MetadataTag *arg1 = (MetadataTag *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MetadataTag_GetName",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_MetadataTag, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MetadataTag_GetName" "', argument " "1"" of type '" "MetadataTag const *""'"); 
  }
  arg1 = reinterpret_cast< MetadataTag * >(argp1);
  result = (std::string *) &((MetadataTag const *)arg1)->GetName();
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MetadataTag_GetQualifiedName(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MetadataTag *arg1 = (MetadataTag *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MetadataTag_GetQualifiedName",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_MetadataTag, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MetadataTag_GetQualifiedName" "', argument " "1"" of type '" "MetadataTag const *""'"); 
  }
  arg1 = reinterpret_cast< MetadataTag * >(argp1);
  result = ((MetadataTag const *)arg1)->GetQualifiedName();
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MetadataTag_IsReadOnly(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MetadataTag *arg1 = (MetadataTag *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MetadataTag_IsReadOnly",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_MetadataTag, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MetadataTag_IsReadOnly" "', argument " "1"" of type '" "MetadataTag const *""'"); 
  }
  arg1 = reinterpret_cast< MetadataTag * >(argp1);
  result = (bool)((MetadataTag const *)arg1)->IsReadOnly();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MetadataTag_SetDevice(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MetadataTag *arg1 = (MetadataTag *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MetadataTag_SetDevice",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_MetadataTag, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MetadataTag_SetDevice" "', argument " "1"" of type '" "MetadataTag *""'"); 
  }
  arg1 = reinterpret_cast< MetadataTag * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MetadataTag_SetDevice" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  (arg1)->SetDevice((char const *)arg2);
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_MetadataTag_SetName(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MetadataTag *arg1 = (MetadataTag *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MetadataTag_SetName",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_MetadataTag, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MetadataTag_SetName" "', argument " "1"" of type '" "MetadataTag *""'"); 
  }
  arg1 = reinterpret_cast< MetadataTag * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MetadataTag_SetName" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  (arg1)->SetName((char const *)arg2);
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_MetadataTag_SetReadOnly(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MetadataTag *arg1 = (MetadataTag *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MetadataTag_SetReadOnly",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_MetadataTag, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MetadataTag_SetReadOnly" "', argument " "1"" of type '" "MetadataTag *""'"); 
  }
  arg1 = reinterpret_cast< MetadataTag * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MetadataTag_SetReadOnly" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  (arg1)->SetReadOnly(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MetadataTag_ToSingleTag(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MetadataTag *arg1 = (MetadataTag *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  MetadataSingleTag *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MetadataTag_ToSingleTag",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_MetadataTag, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MetadataTag_ToSingleTag" "', argument " "1"" of type '" "MetadataTag const *""'"); 
  }
  arg1 = reinterpret_cast< MetadataTag * >(argp1);
  result = (MetadataSingleTag *)((MetadataTag const *)arg1)->ToSingleTag();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_MetadataSingleTag, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MetadataTag_ToArrayTag(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MetadataTag *arg1 = (MetadataTag *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  MetadataArrayTag *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MetadataTag_ToArrayTag",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_MetadataTag, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MetadataTag_ToArrayTag" "', argument " "1"" of type '" "MetadataTag const *""'"); 
  }
  arg1 = reinterpret_cast< MetadataTag * >(argp1);
  result = (MetadataArrayTag *)((MetadataTag const *)arg1)->ToArrayTag();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_MetadataArrayTag, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MetadataTag_Clone(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MetadataTag *arg1 = (MetadataTag *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  MetadataTag *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MetadataTag_Clone",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_MetadataTag, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MetadataTag_Clone" "', argument " "1"" of type '" "MetadataTag *""'"); 
  }
  arg1 = reinterpret_cast< MetadataTag * >(argp1);
  result = (MetadataTag *)(arg1)->Clone();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_MetadataTag, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MetadataTag_Serialize(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MetadataTag *arg1 = (MetadataTag *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MetadataTag_Serialize",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_MetadataTag, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MetadataTag_Serialize" "', argument " "1"" of type '" "MetadataTag *""'"); 
  }
  arg1 = reinterpret_cast< MetadataTag * >(argp1);
  result = (arg1)->Serialize();
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MetadataTag_Restore__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MetadataTag *arg1 = (MetadataTag *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MetadataTag_Restore",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_MetadataTag, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MetadataTag_Restore" "', argument " "1"" of type '" "MetadataTag *""'"); 
  }
  arg1 = reinterpret_cast< MetadataTag * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MetadataTag_Restore" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  result = (bool)(arg1)->Restore((char const *)arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_MetadataTag_Restore__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MetadataTag *arg1 = (MetadataTag *) 0 ;
  std::istringstream *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MetadataTag_Restore",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_MetadataTag, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MetadataTag_Restore" "', argument " "1"" of type '" "MetadataTag *""'"); 
  }
  arg1 = reinterpret_cast< MetadataTag * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__istringstream,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MetadataTag_Restore" "', argument " "2"" of type '" "std::istringstream &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MetadataTag_Restore" "', argument " "2"" of type '" "std::istringstream &""'"); 
  }
  arg2 = reinterpret_cast< std::istringstream * >(argp2);
  result = (bool)(arg1)->Restore(*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MetadataTag_Restore(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_MetadataTag, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__istringstream, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_MetadataTag_Restore__SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_MetadataTag, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_MetadataTag_Restore__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'MetadataTag_Restore'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Restore(MetadataTag *,char const *)\n"
    "    Restore(MetadataTag *,std::istringstream &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_MetadataTag_ReadLine(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::istringstream *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MetadataTag_ReadLine",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_std__istringstream,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MetadataTag_ReadLine" "', argument " "1"" of type '" "std::istringstream &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MetadataTag_ReadLine" "', argument " "1"" of type '" "std::istringstream &""'"); 
  }
  arg1 = reinterpret_cast< std::istringstream * >(argp1);
  result = MetadataTag::ReadLine(*arg1);
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *MetadataTag_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_MetadataTag, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_MetadataSingleTag__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MetadataSingleTag *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_MetadataSingleTag")) SWIG_fail;
  result = (MetadataSingleTag *)new MetadataSingleTag();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_MetadataSingleTag, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_MetadataSingleTag__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  bool arg3 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  MetadataSingleTag *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_MetadataSingleTag",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(obj0, &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_MetadataSingleTag" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_MetadataSingleTag" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_MetadataSingleTag" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  result = (MetadataSingleTag *)new MetadataSingleTag((char const *)arg1,(char const *)arg2,arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_MetadataSingleTag, SWIG_POINTER_NEW |  0 );
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_MetadataSingleTag(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_MetadataSingleTag__SWIG_0(self, args);
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_MetadataSingleTag__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_MetadataSingleTag'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    MetadataSingleTag()\n"
    "    MetadataSingleTag(char const *,char const *,bool)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_MetadataSingleTag(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MetadataSingleTag *arg1 = (MetadataSingleTag *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_MetadataSingleTag",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_MetadataSingleTag, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_MetadataSingleTag" "', argument " "1"" of type '" "MetadataSingleTag *""'"); 
  }
  arg1 = reinterpret_cast< MetadataSingleTag * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MetadataSingleTag_GetValue(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MetadataSingleTag *arg1 = (MetadataSingleTag *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MetadataSingleTag_GetValue",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_MetadataSingleTag, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MetadataSingleTag_GetValue" "', argument " "1"" of type '" "MetadataSingleTag const *""'"); 
  }
  arg1 = reinterpret_cast< MetadataSingleTag * >(argp1);
  result = (std::string *) &((MetadataSingleTag const *)arg1)->GetValue();
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MetadataSingleTag_SetValue(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MetadataSingleTag *arg1 = (MetadataSingleTag *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MetadataSingleTag_SetValue",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_MetadataSingleTag, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MetadataSingleTag_SetValue" "', argument " "1"" of type '" "MetadataSingleTag *""'"); 
  }
  arg1 = reinterpret_cast< MetadataSingleTag * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MetadataSingleTag_SetValue" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  (arg1)->SetValue((char const *)arg2);
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_MetadataSingleTag_ToSingleTag(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MetadataSingleTag *arg1 = (MetadataSingleTag *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  MetadataSingleTag *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MetadataSingleTag_ToSingleTag",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_MetadataSingleTag, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MetadataSingleTag_ToSingleTag" "', argument " "1"" of type '" "MetadataSingleTag const *""'"); 
  }
  arg1 = reinterpret_cast< MetadataSingleTag * >(argp1);
  result = (MetadataSingleTag *)((MetadataSingleTag const *)arg1)->ToSingleTag();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_MetadataSingleTag, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MetadataSingleTag_Clone(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MetadataSingleTag *arg1 = (MetadataSingleTag *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  MetadataTag *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MetadataSingleTag_Clone",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_MetadataSingleTag, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MetadataSingleTag_Clone" "', argument " "1"" of type '" "MetadataSingleTag *""'"); 
  }
  arg1 = reinterpret_cast< MetadataSingleTag * >(argp1);
  result = (MetadataTag *)(arg1)->Clone();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_MetadataTag, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MetadataSingleTag_Serialize(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MetadataSingleTag *arg1 = (MetadataSingleTag *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MetadataSingleTag_Serialize",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_MetadataSingleTag, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MetadataSingleTag_Serialize" "', argument " "1"" of type '" "MetadataSingleTag *""'"); 
  }
  arg1 = reinterpret_cast< MetadataSingleTag * >(argp1);
  result = (arg1)->Serialize();
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MetadataSingleTag_Restore__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MetadataSingleTag *arg1 = (MetadataSingleTag *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MetadataSingleTag_Restore",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_MetadataSingleTag, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MetadataSingleTag_Restore" "', argument " "1"" of type '" "MetadataSingleTag *""'"); 
  }
  arg1 = reinterpret_cast< MetadataSingleTag * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MetadataSingleTag_Restore" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  result = (bool)(arg1)->Restore((char const *)arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_MetadataSingleTag_Restore__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MetadataSingleTag *arg1 = (MetadataSingleTag *) 0 ;
  std::istringstream *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MetadataSingleTag_Restore",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_MetadataSingleTag, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MetadataSingleTag_Restore" "', argument " "1"" of type '" "MetadataSingleTag *""'"); 
  }
  arg1 = reinterpret_cast< MetadataSingleTag * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__istringstream,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MetadataSingleTag_Restore" "', argument " "2"" of type '" "std::istringstream &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MetadataSingleTag_Restore" "', argument " "2"" of type '" "std::istringstream &""'"); 
  }
  arg2 = reinterpret_cast< std::istringstream * >(argp2);
  result = (bool)(arg1)->Restore(*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MetadataSingleTag_Restore(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_MetadataSingleTag, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__istringstream, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_MetadataSingleTag_Restore__SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_MetadataSingleTag, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_MetadataSingleTag_Restore__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'MetadataSingleTag_Restore'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Restore(MetadataSingleTag *,char const *)\n"
    "    Restore(MetadataSingleTag *,std::istringstream &)\n");
  return NULL;
}


SWIGINTERN PyObject *MetadataSingleTag_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_MetadataSingleTag, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_MetadataArrayTag__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MetadataArrayTag *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_MetadataArrayTag")) SWIG_fail;
  result = (MetadataArrayTag *)new MetadataArrayTag();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_MetadataArrayTag, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_MetadataArrayTag__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  bool arg3 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  MetadataArrayTag *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_MetadataArrayTag",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(obj0, &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_MetadataArrayTag" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_MetadataArrayTag" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_MetadataArrayTag" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  result = (MetadataArrayTag *)new MetadataArrayTag((char const *)arg1,(char const *)arg2,arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_MetadataArrayTag, SWIG_POINTER_NEW |  0 );
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_MetadataArrayTag(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_MetadataArrayTag__SWIG_0(self, args);
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_MetadataArrayTag__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_MetadataArrayTag'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    MetadataArrayTag()\n"
    "    MetadataArrayTag(char const *,char const *,bool)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_MetadataArrayTag(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MetadataArrayTag *arg1 = (MetadataArrayTag *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_MetadataArrayTag",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_MetadataArrayTag, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_MetadataArrayTag" "', argument " "1"" of type '" "MetadataArrayTag *""'"); 
  }
  arg1 = reinterpret_cast< MetadataArrayTag * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MetadataArrayTag_ToArrayTag(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MetadataArrayTag *arg1 = (MetadataArrayTag *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  MetadataArrayTag *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MetadataArrayTag_ToArrayTag",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_MetadataArrayTag, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MetadataArrayTag_ToArrayTag" "', argument " "1"" of type '" "MetadataArrayTag const *""'"); 
  }
  arg1 = reinterpret_cast< MetadataArrayTag * >(argp1);
  result = (MetadataArrayTag *)((MetadataArrayTag const *)arg1)->ToArrayTag();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_MetadataArrayTag, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MetadataArrayTag_AddValue(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MetadataArrayTag *arg1 = (MetadataArrayTag *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MetadataArrayTag_AddValue",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_MetadataArrayTag, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MetadataArrayTag_AddValue" "', argument " "1"" of type '" "MetadataArrayTag *""'"); 
  }
  arg1 = reinterpret_cast< MetadataArrayTag * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MetadataArrayTag_AddValue" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  (arg1)->AddValue((char const *)arg2);
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_MetadataArrayTag_SetValue(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MetadataArrayTag *arg1 = (MetadataArrayTag *) 0 ;
  char *arg2 = (char *) 0 ;
  size_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:MetadataArrayTag_SetValue",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_MetadataArrayTag, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MetadataArrayTag_SetValue" "', argument " "1"" of type '" "MetadataArrayTag *""'"); 
  }
  arg1 = reinterpret_cast< MetadataArrayTag * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MetadataArrayTag_SetValue" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "MetadataArrayTag_SetValue" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  (arg1)->SetValue((char const *)arg2,arg3);
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_MetadataArrayTag_GetValue(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MetadataArrayTag *arg1 = (MetadataArrayTag *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::string *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MetadataArrayTag_GetValue",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_MetadataArrayTag, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MetadataArrayTag_GetValue" "', argument " "1"" of type '" "MetadataArrayTag const *""'"); 
  }
  arg1 = reinterpret_cast< MetadataArrayTag * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MetadataArrayTag_GetValue" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  result = (std::string *) &((MetadataArrayTag const *)arg1)->GetValue(arg2);
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MetadataArrayTag_GetSize(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MetadataArrayTag *arg1 = (MetadataArrayTag *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  size_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MetadataArrayTag_GetSize",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_MetadataArrayTag, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MetadataArrayTag_GetSize" "', argument " "1"" of type '" "MetadataArrayTag const *""'"); 
  }
  arg1 = reinterpret_cast< MetadataArrayTag * >(argp1);
  result = ((MetadataArrayTag const *)arg1)->GetSize();
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MetadataArrayTag_Clone(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MetadataArrayTag *arg1 = (MetadataArrayTag *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  MetadataTag *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MetadataArrayTag_Clone",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_MetadataArrayTag, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MetadataArrayTag_Clone" "', argument " "1"" of type '" "MetadataArrayTag *""'"); 
  }
  arg1 = reinterpret_cast< MetadataArrayTag * >(argp1);
  result = (MetadataTag *)(arg1)->Clone();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_MetadataTag, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MetadataArrayTag_Serialize(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MetadataArrayTag *arg1 = (MetadataArrayTag *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MetadataArrayTag_Serialize",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_MetadataArrayTag, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MetadataArrayTag_Serialize" "', argument " "1"" of type '" "MetadataArrayTag *""'"); 
  }
  arg1 = reinterpret_cast< MetadataArrayTag * >(argp1);
  result = (arg1)->Serialize();
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MetadataArrayTag_Restore__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MetadataArrayTag *arg1 = (MetadataArrayTag *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MetadataArrayTag_Restore",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_MetadataArrayTag, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MetadataArrayTag_Restore" "', argument " "1"" of type '" "MetadataArrayTag *""'"); 
  }
  arg1 = reinterpret_cast< MetadataArrayTag * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MetadataArrayTag_Restore" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  result = (bool)(arg1)->Restore((char const *)arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_MetadataArrayTag_Restore__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MetadataArrayTag *arg1 = (MetadataArrayTag *) 0 ;
  std::istringstream *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MetadataArrayTag_Restore",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_MetadataArrayTag, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MetadataArrayTag_Restore" "', argument " "1"" of type '" "MetadataArrayTag *""'"); 
  }
  arg1 = reinterpret_cast< MetadataArrayTag * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__istringstream,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MetadataArrayTag_Restore" "', argument " "2"" of type '" "std::istringstream &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MetadataArrayTag_Restore" "', argument " "2"" of type '" "std::istringstream &""'"); 
  }
  arg2 = reinterpret_cast< std::istringstream * >(argp2);
  result = (bool)(arg1)->Restore(*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MetadataArrayTag_Restore(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_MetadataArrayTag, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__istringstream, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_MetadataArrayTag_Restore__SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_MetadataArrayTag, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_MetadataArrayTag_Restore__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'MetadataArrayTag_Restore'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Restore(MetadataArrayTag *,char const *)\n"
    "    Restore(MetadataArrayTag *,std::istringstream &)\n");
  return NULL;
}


SWIGINTERN PyObject *MetadataArrayTag_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_MetadataArrayTag, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_Metadata__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Metadata *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_Metadata")) SWIG_fail;
  result = (Metadata *)new Metadata();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Metadata, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Metadata(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Metadata *arg1 = (Metadata *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_Metadata",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Metadata, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Metadata" "', argument " "1"" of type '" "Metadata *""'"); 
  }
  arg1 = reinterpret_cast< Metadata * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Metadata__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Metadata *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Metadata *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_Metadata",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Metadata,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Metadata" "', argument " "1"" of type '" "Metadata const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Metadata" "', argument " "1"" of type '" "Metadata const &""'"); 
  }
  arg1 = reinterpret_cast< Metadata * >(argp1);
  result = (Metadata *)new Metadata((Metadata const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Metadata, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Metadata(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 1); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_Metadata__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Metadata, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Metadata__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_Metadata'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Metadata()\n"
    "    Metadata(Metadata const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Metadata_Clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Metadata *arg1 = (Metadata *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Metadata_Clear",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Metadata, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Metadata_Clear" "', argument " "1"" of type '" "Metadata *""'"); 
  }
  arg1 = reinterpret_cast< Metadata * >(argp1);
  (arg1)->Clear();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Metadata_GetKeys(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Metadata *arg1 = (Metadata *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::string,std::allocator< std::string > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Metadata_GetKeys",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Metadata, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Metadata_GetKeys" "', argument " "1"" of type '" "Metadata const *""'"); 
  }
  arg1 = reinterpret_cast< Metadata * >(argp1);
  result = ((Metadata const *)arg1)->GetKeys();
  resultobj = swig::from(static_cast< std::vector<std::string,std::allocator< std::string > > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Metadata_HasTag(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Metadata *arg1 = (Metadata *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Metadata_HasTag",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Metadata, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Metadata_HasTag" "', argument " "1"" of type '" "Metadata *""'"); 
  }
  arg1 = reinterpret_cast< Metadata * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Metadata_HasTag" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  result = (bool)(arg1)->HasTag((char const *)arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Metadata_GetSingleTag(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Metadata *arg1 = (Metadata *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  MetadataSingleTag result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Metadata_GetSingleTag",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Metadata, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Metadata_GetSingleTag" "', argument " "1"" of type '" "Metadata const *""'"); 
  }
  arg1 = reinterpret_cast< Metadata * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Metadata_GetSingleTag" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  try {
    result = ((Metadata const *)arg1)->GetSingleTag((char const *)arg2);
  }
  catch(MetadataKeyError &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new MetadataKeyError(static_cast< const MetadataKeyError& >(_e))),SWIGTYPE_p_MetadataKeyError,SWIG_POINTER_OWN), "MetadataKeyError", SWIGTYPE_p_MetadataKeyError); SWIG_fail;
  }
  
  resultobj = SWIG_NewPointerObj((new MetadataSingleTag(static_cast< const MetadataSingleTag& >(result))), SWIGTYPE_p_MetadataSingleTag, SWIG_POINTER_OWN |  0 );
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Metadata_GetArrayTag(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Metadata *arg1 = (Metadata *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  MetadataArrayTag result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Metadata_GetArrayTag",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Metadata, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Metadata_GetArrayTag" "', argument " "1"" of type '" "Metadata const *""'"); 
  }
  arg1 = reinterpret_cast< Metadata * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Metadata_GetArrayTag" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  try {
    result = ((Metadata const *)arg1)->GetArrayTag((char const *)arg2);
  }
  catch(MetadataKeyError &_e) {
    SWIG_Python_Raise(SWIG_NewPointerObj((new MetadataKeyError(static_cast< const MetadataKeyError& >(_e))),SWIGTYPE_p_MetadataKeyError,SWIG_POINTER_OWN), "MetadataKeyError", SWIGTYPE_p_MetadataKeyError); SWIG_fail;
  }
  
  resultobj = SWIG_NewPointerObj((new MetadataArrayTag(static_cast< const MetadataArrayTag& >(result))), SWIGTYPE_p_MetadataArrayTag, SWIG_POINTER_OWN |  0 );
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Metadata_SetTag(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Metadata *arg1 = (Metadata *) 0 ;
  MetadataTag *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Metadata_SetTag",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Metadata, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Metadata_SetTag" "', argument " "1"" of type '" "Metadata *""'"); 
  }
  arg1 = reinterpret_cast< Metadata * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_MetadataTag,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Metadata_SetTag" "', argument " "2"" of type '" "MetadataTag &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Metadata_SetTag" "', argument " "2"" of type '" "MetadataTag &""'"); 
  }
  arg2 = reinterpret_cast< MetadataTag * >(argp2);
  (arg1)->SetTag(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Metadata_RemoveTag(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Metadata *arg1 = (Metadata *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Metadata_RemoveTag",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Metadata, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Metadata_RemoveTag" "', argument " "1"" of type '" "Metadata *""'"); 
  }
  arg1 = reinterpret_cast< Metadata * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Metadata_RemoveTag" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  (arg1)->RemoveTag((char const *)arg2);
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Metadata_Merge(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Metadata *arg1 = (Metadata *) 0 ;
  Metadata *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Metadata_Merge",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Metadata, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Metadata_Merge" "', argument " "1"" of type '" "Metadata *""'"); 
  }
  arg1 = reinterpret_cast< Metadata * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Metadata,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Metadata_Merge" "', argument " "2"" of type '" "Metadata const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Metadata_Merge" "', argument " "2"" of type '" "Metadata const &""'"); 
  }
  arg2 = reinterpret_cast< Metadata * >(argp2);
  (arg1)->Merge((Metadata const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Metadata_Serialize(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Metadata *arg1 = (Metadata *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Metadata_Serialize",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Metadata, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Metadata_Serialize" "', argument " "1"" of type '" "Metadata const *""'"); 
  }
  arg1 = reinterpret_cast< Metadata * >(argp1);
  result = ((Metadata const *)arg1)->Serialize();
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Metadata_readLine(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Metadata *arg1 = (Metadata *) 0 ;
  std::istringstream *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Metadata_readLine",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Metadata, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Metadata_readLine" "', argument " "1"" of type '" "Metadata *""'"); 
  }
  arg1 = reinterpret_cast< Metadata * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__istringstream,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Metadata_readLine" "', argument " "2"" of type '" "std::istringstream &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Metadata_readLine" "', argument " "2"" of type '" "std::istringstream &""'"); 
  }
  arg2 = reinterpret_cast< std::istringstream * >(argp2);
  result = (arg1)->readLine(*arg2);
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Metadata_Restore(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Metadata *arg1 = (Metadata *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Metadata_Restore",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Metadata, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Metadata_Restore" "', argument " "1"" of type '" "Metadata *""'"); 
  }
  arg1 = reinterpret_cast< Metadata * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Metadata_Restore" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  result = (bool)(arg1)->Restore((char const *)arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Metadata_Dump(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Metadata *arg1 = (Metadata *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Metadata_Dump",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Metadata, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Metadata_Dump" "', argument " "1"" of type '" "Metadata *""'"); 
  }
  arg1 = reinterpret_cast< Metadata * >(argp1);
  result = (arg1)->Dump();
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Metadata_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Metadata, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_MMEventCallback(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  PyObject *arg1 = (PyObject *) 0 ;
  PyObject * obj0 = 0 ;
  MMEventCallback *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_MMEventCallback",&obj0)) SWIG_fail;
  arg1 = obj0;
  if ( arg1 != Py_None ) {
    /* subclassed */
    result = (MMEventCallback *)new SwigDirector_MMEventCallback(arg1); 
  } else {
    result = (MMEventCallback *)new MMEventCallback(); 
  }
  
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_MMEventCallback, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_MMEventCallback(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MMEventCallback *arg1 = (MMEventCallback *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_MMEventCallback",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_MMEventCallback, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_MMEventCallback" "', argument " "1"" of type '" "MMEventCallback *""'"); 
  }
  arg1 = reinterpret_cast< MMEventCallback * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MMEventCallback_onPropertiesChanged(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MMEventCallback *arg1 = (MMEventCallback *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Swig::Director *director = 0;
  bool upcall = false;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MMEventCallback_onPropertiesChanged",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_MMEventCallback, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MMEventCallback_onPropertiesChanged" "', argument " "1"" of type '" "MMEventCallback *""'"); 
  }
  arg1 = reinterpret_cast< MMEventCallback * >(argp1);
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==obj0));
  try {
    if (upcall) {
      (arg1)->MMEventCallback::onPropertiesChanged();
    } else {
      (arg1)->onPropertiesChanged();
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MMEventCallback_onPropertyChanged(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MMEventCallback *arg1 = (MMEventCallback *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  Swig::Director *director = 0;
  bool upcall = false;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:MMEventCallback_onPropertyChanged",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_MMEventCallback, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MMEventCallback_onPropertyChanged" "', argument " "1"" of type '" "MMEventCallback *""'"); 
  }
  arg1 = reinterpret_cast< MMEventCallback * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MMEventCallback_onPropertyChanged" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "MMEventCallback_onPropertyChanged" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  res4 = SWIG_AsCharPtrAndSize(obj3, &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "MMEventCallback_onPropertyChanged" "', argument " "4"" of type '" "char const *""'");
  }
  arg4 = reinterpret_cast< char * >(buf4);
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==obj0));
  try {
    if (upcall) {
      (arg1)->MMEventCallback::onPropertyChanged((char const *)arg2,(char const *)arg3,(char const *)arg4);
    } else {
      (arg1)->onPropertyChanged((char const *)arg2,(char const *)arg3,(char const *)arg4);
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_MMEventCallback_onChannelGroupChanged(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MMEventCallback *arg1 = (MMEventCallback *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Swig::Director *director = 0;
  bool upcall = false;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MMEventCallback_onChannelGroupChanged",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_MMEventCallback, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MMEventCallback_onChannelGroupChanged" "', argument " "1"" of type '" "MMEventCallback *""'"); 
  }
  arg1 = reinterpret_cast< MMEventCallback * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MMEventCallback_onChannelGroupChanged" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==obj0));
  try {
    if (upcall) {
      (arg1)->MMEventCallback::onChannelGroupChanged((char const *)arg2);
    } else {
      (arg1)->onChannelGroupChanged((char const *)arg2);
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_MMEventCallback_onConfigGroupChanged(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MMEventCallback *arg1 = (MMEventCallback *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  Swig::Director *director = 0;
  bool upcall = false;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:MMEventCallback_onConfigGroupChanged",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_MMEventCallback, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MMEventCallback_onConfigGroupChanged" "', argument " "1"" of type '" "MMEventCallback *""'"); 
  }
  arg1 = reinterpret_cast< MMEventCallback * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MMEventCallback_onConfigGroupChanged" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "MMEventCallback_onConfigGroupChanged" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==obj0));
  try {
    if (upcall) {
      (arg1)->MMEventCallback::onConfigGroupChanged((char const *)arg2,(char const *)arg3);
    } else {
      (arg1)->onConfigGroupChanged((char const *)arg2,(char const *)arg3);
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_MMEventCallback_onSystemConfigurationLoaded(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MMEventCallback *arg1 = (MMEventCallback *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Swig::Director *director = 0;
  bool upcall = false;
  
  if (!PyArg_ParseTuple(args,(char *)"O:MMEventCallback_onSystemConfigurationLoaded",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_MMEventCallback, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MMEventCallback_onSystemConfigurationLoaded" "', argument " "1"" of type '" "MMEventCallback *""'"); 
  }
  arg1 = reinterpret_cast< MMEventCallback * >(argp1);
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==obj0));
  try {
    if (upcall) {
      (arg1)->MMEventCallback::onSystemConfigurationLoaded();
    } else {
      (arg1)->onSystemConfigurationLoaded();
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MMEventCallback_onPixelSizeChanged(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MMEventCallback *arg1 = (MMEventCallback *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Swig::Director *director = 0;
  bool upcall = false;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:MMEventCallback_onPixelSizeChanged",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_MMEventCallback, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MMEventCallback_onPixelSizeChanged" "', argument " "1"" of type '" "MMEventCallback *""'"); 
  }
  arg1 = reinterpret_cast< MMEventCallback * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MMEventCallback_onPixelSizeChanged" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==obj0));
  try {
    if (upcall) {
      (arg1)->MMEventCallback::onPixelSizeChanged(arg2);
    } else {
      (arg1)->onPixelSizeChanged(arg2);
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MMEventCallback_onPixelSizeAffineChanged(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MMEventCallback *arg1 = (MMEventCallback *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  double arg7 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  double val6 ;
  int ecode6 = 0 ;
  double val7 ;
  int ecode7 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  Swig::Director *director = 0;
  bool upcall = false;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOO:MMEventCallback_onPixelSizeAffineChanged",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_MMEventCallback, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MMEventCallback_onPixelSizeAffineChanged" "', argument " "1"" of type '" "MMEventCallback *""'"); 
  }
  arg1 = reinterpret_cast< MMEventCallback * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MMEventCallback_onPixelSizeAffineChanged" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "MMEventCallback_onPixelSizeAffineChanged" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "MMEventCallback_onPixelSizeAffineChanged" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  ecode5 = SWIG_AsVal_double(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "MMEventCallback_onPixelSizeAffineChanged" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  ecode6 = SWIG_AsVal_double(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "MMEventCallback_onPixelSizeAffineChanged" "', argument " "6"" of type '" "double""'");
  } 
  arg6 = static_cast< double >(val6);
  ecode7 = SWIG_AsVal_double(obj6, &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "MMEventCallback_onPixelSizeAffineChanged" "', argument " "7"" of type '" "double""'");
  } 
  arg7 = static_cast< double >(val7);
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==obj0));
  try {
    if (upcall) {
      (arg1)->MMEventCallback::onPixelSizeAffineChanged(arg2,arg3,arg4,arg5,arg6,arg7);
    } else {
      (arg1)->onPixelSizeAffineChanged(arg2,arg3,arg4,arg5,arg6,arg7);
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MMEventCallback_onStagePositionChanged(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MMEventCallback *arg1 = (MMEventCallback *) 0 ;
  char *arg2 = (char *) 0 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  Swig::Director *director = 0;
  bool upcall = false;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:MMEventCallback_onStagePositionChanged",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_MMEventCallback, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MMEventCallback_onStagePositionChanged" "', argument " "1"" of type '" "MMEventCallback *""'"); 
  }
  arg1 = reinterpret_cast< MMEventCallback * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MMEventCallback_onStagePositionChanged" "', argument " "2"" of type '" "char *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "MMEventCallback_onStagePositionChanged" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==obj0));
  try {
    if (upcall) {
      (arg1)->MMEventCallback::onStagePositionChanged(arg2,arg3);
    } else {
      (arg1)->onStagePositionChanged(arg2,arg3);
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_MMEventCallback_onXYStagePositionChanged(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MMEventCallback *arg1 = (MMEventCallback *) 0 ;
  char *arg2 = (char *) 0 ;
  double arg3 ;
  double arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  Swig::Director *director = 0;
  bool upcall = false;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:MMEventCallback_onXYStagePositionChanged",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_MMEventCallback, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MMEventCallback_onXYStagePositionChanged" "', argument " "1"" of type '" "MMEventCallback *""'"); 
  }
  arg1 = reinterpret_cast< MMEventCallback * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MMEventCallback_onXYStagePositionChanged" "', argument " "2"" of type '" "char *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "MMEventCallback_onXYStagePositionChanged" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "MMEventCallback_onXYStagePositionChanged" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==obj0));
  try {
    if (upcall) {
      (arg1)->MMEventCallback::onXYStagePositionChanged(arg2,arg3,arg4);
    } else {
      (arg1)->onXYStagePositionChanged(arg2,arg3,arg4);
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_MMEventCallback_onExposureChanged(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MMEventCallback *arg1 = (MMEventCallback *) 0 ;
  char *arg2 = (char *) 0 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  Swig::Director *director = 0;
  bool upcall = false;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:MMEventCallback_onExposureChanged",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_MMEventCallback, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MMEventCallback_onExposureChanged" "', argument " "1"" of type '" "MMEventCallback *""'"); 
  }
  arg1 = reinterpret_cast< MMEventCallback * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MMEventCallback_onExposureChanged" "', argument " "2"" of type '" "char *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "MMEventCallback_onExposureChanged" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==obj0));
  try {
    if (upcall) {
      (arg1)->MMEventCallback::onExposureChanged(arg2,arg3);
    } else {
      (arg1)->onExposureChanged(arg2,arg3);
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_MMEventCallback_onSLMExposureChanged(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MMEventCallback *arg1 = (MMEventCallback *) 0 ;
  char *arg2 = (char *) 0 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  Swig::Director *director = 0;
  bool upcall = false;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:MMEventCallback_onSLMExposureChanged",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_MMEventCallback, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MMEventCallback_onSLMExposureChanged" "', argument " "1"" of type '" "MMEventCallback *""'"); 
  }
  arg1 = reinterpret_cast< MMEventCallback * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MMEventCallback_onSLMExposureChanged" "', argument " "2"" of type '" "char *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "MMEventCallback_onSLMExposureChanged" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==obj0));
  try {
    if (upcall) {
      (arg1)->MMEventCallback::onSLMExposureChanged(arg2,arg3);
    } else {
      (arg1)->onSLMExposureChanged(arg2,arg3);
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_disown_MMEventCallback(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MMEventCallback *arg1 = (MMEventCallback *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:disown_MMEventCallback",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_MMEventCallback, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "disown_MMEventCallback" "', argument " "1"" of type '" "MMEventCallback *""'"); 
  }
  arg1 = reinterpret_cast< MMEventCallback * >(argp1);
  {
    Swig::Director *director = SWIG_DIRECTOR_CAST(arg1);
    if (director) director->swig_disown();
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *MMEventCallback_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_MMEventCallback, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

static PyMethodDef SwigMethods[] = {
	 { (char *)"SWIG_PyInstanceMethod_New", (PyCFunction)SWIG_PyInstanceMethod_New, METH_O, NULL},
	 { (char *)"delete_SwigPyIterator", _wrap_delete_SwigPyIterator, METH_VARARGS, (char *)"\n"
		"delete_SwigPyIterator(SwigPyIterator self)\n"
		"Parameters:\n"
		"   self: swig::SwigPyIterator * value\n"
		"\n"
		""},
	 { (char *)"SwigPyIterator_value", _wrap_SwigPyIterator_value, METH_VARARGS, (char *)"\n"
		"SwigPyIterator_value(SwigPyIterator self) -> PyObject\n"
		"Parameters:\n"
		"   self: swig::SwigPyIterator const * value\n"
		"\n"
		""},
	 { (char *)"SwigPyIterator_incr", _wrap_SwigPyIterator_incr, METH_VARARGS, (char *)"\n"
		"incr(size_t n = 1) -> SwigPyIterator\n"
		"Parameters:\n"
		"   n: size_t value\n"
		"\n"
		"SwigPyIterator_incr(SwigPyIterator self) -> SwigPyIterator\n"
		"Parameters:\n"
		"   self: swig::SwigPyIterator * value\n"
		"\n"
		""},
	 { (char *)"SwigPyIterator_decr", _wrap_SwigPyIterator_decr, METH_VARARGS, (char *)"\n"
		"decr(size_t n = 1) -> SwigPyIterator\n"
		"Parameters:\n"
		"   n: size_t value\n"
		"\n"
		"SwigPyIterator_decr(SwigPyIterator self) -> SwigPyIterator\n"
		"Parameters:\n"
		"   self: swig::SwigPyIterator * value\n"
		"\n"
		""},
	 { (char *)"SwigPyIterator_distance", _wrap_SwigPyIterator_distance, METH_VARARGS, (char *)"\n"
		"SwigPyIterator_distance(SwigPyIterator self, SwigPyIterator x) -> ptrdiff_t\n"
		"Parameters:\n"
		"   self: swig::SwigPyIterator const * value\n"
		"   x: swig::SwigPyIterator const & value\n"
		"\n"
		""},
	 { (char *)"SwigPyIterator_equal", _wrap_SwigPyIterator_equal, METH_VARARGS, (char *)"\n"
		"SwigPyIterator_equal(SwigPyIterator self, SwigPyIterator x) -> bool\n"
		"Parameters:\n"
		"   self: swig::SwigPyIterator const * value\n"
		"   x: swig::SwigPyIterator const & value\n"
		"\n"
		""},
	 { (char *)"SwigPyIterator_copy", _wrap_SwigPyIterator_copy, METH_VARARGS, (char *)"\n"
		"SwigPyIterator_copy(SwigPyIterator self) -> SwigPyIterator\n"
		"Parameters:\n"
		"   self: swig::SwigPyIterator const * value\n"
		"\n"
		""},
	 { (char *)"SwigPyIterator_next", _wrap_SwigPyIterator_next, METH_VARARGS, (char *)"\n"
		"SwigPyIterator_next(SwigPyIterator self) -> PyObject\n"
		"Parameters:\n"
		"   self: swig::SwigPyIterator * value\n"
		"\n"
		""},
	 { (char *)"SwigPyIterator___next__", _wrap_SwigPyIterator___next__, METH_VARARGS, (char *)"\n"
		"SwigPyIterator___next__(SwigPyIterator self) -> PyObject\n"
		"Parameters:\n"
		"   self: swig::SwigPyIterator * value\n"
		"\n"
		""},
	 { (char *)"SwigPyIterator_previous", _wrap_SwigPyIterator_previous, METH_VARARGS, (char *)"\n"
		"SwigPyIterator_previous(SwigPyIterator self) -> PyObject\n"
		"Parameters:\n"
		"   self: swig::SwigPyIterator * value\n"
		"\n"
		""},
	 { (char *)"SwigPyIterator_advance", _wrap_SwigPyIterator_advance, METH_VARARGS, (char *)"\n"
		"SwigPyIterator_advance(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator\n"
		"Parameters:\n"
		"   self: swig::SwigPyIterator * value\n"
		"   n: ptrdiff_t value\n"
		"\n"
		""},
	 { (char *)"SwigPyIterator___eq__", _wrap_SwigPyIterator___eq__, METH_VARARGS, (char *)"\n"
		"SwigPyIterator___eq__(SwigPyIterator self, SwigPyIterator x) -> bool\n"
		"Parameters:\n"
		"   self: swig::SwigPyIterator const * value\n"
		"   x: swig::SwigPyIterator const & value\n"
		"\n"
		""},
	 { (char *)"SwigPyIterator___ne__", _wrap_SwigPyIterator___ne__, METH_VARARGS, (char *)"\n"
		"SwigPyIterator___ne__(SwigPyIterator self, SwigPyIterator x) -> bool\n"
		"Parameters:\n"
		"   self: swig::SwigPyIterator const * value\n"
		"   x: swig::SwigPyIterator const & value\n"
		"\n"
		""},
	 { (char *)"SwigPyIterator___iadd__", _wrap_SwigPyIterator___iadd__, METH_VARARGS, (char *)"\n"
		"SwigPyIterator___iadd__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator\n"
		"Parameters:\n"
		"   self: swig::SwigPyIterator * value\n"
		"   n: ptrdiff_t value\n"
		"\n"
		""},
	 { (char *)"SwigPyIterator___isub__", _wrap_SwigPyIterator___isub__, METH_VARARGS, (char *)"\n"
		"SwigPyIterator___isub__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator\n"
		"Parameters:\n"
		"   self: swig::SwigPyIterator * value\n"
		"   n: ptrdiff_t value\n"
		"\n"
		""},
	 { (char *)"SwigPyIterator___add__", _wrap_SwigPyIterator___add__, METH_VARARGS, (char *)"\n"
		"SwigPyIterator___add__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator\n"
		"Parameters:\n"
		"   self: swig::SwigPyIterator const * value\n"
		"   n: ptrdiff_t value\n"
		"\n"
		""},
	 { (char *)"SwigPyIterator___sub__", _wrap_SwigPyIterator___sub__, METH_VARARGS, (char *)"\n"
		"__sub__(ptrdiff_t n) -> SwigPyIterator\n"
		"Parameters:\n"
		"   n: ptrdiff_t value\n"
		"\n"
		"SwigPyIterator___sub__(SwigPyIterator self, SwigPyIterator x) -> ptrdiff_t\n"
		"Parameters:\n"
		"   self: swig::SwigPyIterator const * value\n"
		"   x: swig::SwigPyIterator const & value\n"
		"\n"
		""},
	 { (char *)"SwigPyIterator_swigregister", SwigPyIterator_swigregister, METH_VARARGS, NULL},
	 { (char *)"CharVector_iterator", _wrap_CharVector_iterator, METH_VARARGS, (char *)"\n"
		"CharVector_iterator(CharVector self) -> SwigPyIterator\n"
		"Parameters:\n"
		"   self: std::vector< char > * value\n"
		"\n"
		""},
	 { (char *)"CharVector___nonzero__", _wrap_CharVector___nonzero__, METH_VARARGS, (char *)"\n"
		"CharVector___nonzero__(CharVector self) -> bool\n"
		"Parameters:\n"
		"   self: std::vector< char > const * value\n"
		"\n"
		""},
	 { (char *)"CharVector___bool__", _wrap_CharVector___bool__, METH_VARARGS, (char *)"\n"
		"CharVector___bool__(CharVector self) -> bool\n"
		"Parameters:\n"
		"   self: std::vector< char > const * value\n"
		"\n"
		""},
	 { (char *)"CharVector___len__", _wrap_CharVector___len__, METH_VARARGS, (char *)"\n"
		"CharVector___len__(CharVector self) -> size_type\n"
		"Parameters:\n"
		"   self: std::vector< char > const * value\n"
		"\n"
		""},
	 { (char *)"CharVector_pop", _wrap_CharVector_pop, METH_VARARGS, (char *)"\n"
		"CharVector_pop(CharVector self) -> value_type\n"
		"Parameters:\n"
		"   self: std::vector< char > * value\n"
		"\n"
		""},
	 { (char *)"CharVector___getslice__", _wrap_CharVector___getslice__, METH_VARARGS, (char *)"\n"
		"CharVector___getslice__(CharVector self, difference_type i, difference_type j) -> CharVector\n"
		"Parameters:\n"
		"   self: std::vector< char > * value\n"
		"   i: std::vector< char >::difference_type value\n"
		"   j: std::vector< char >::difference_type value\n"
		"\n"
		""},
	 { (char *)"CharVector___setslice__", _wrap_CharVector___setslice__, METH_VARARGS, (char *)"\n"
		"CharVector___setslice__(CharVector self, difference_type i, difference_type j, \n"
		"    CharVector v)\n"
		"Parameters:\n"
		"   self: std::vector< char > * value\n"
		"   i: std::vector< char >::difference_type value\n"
		"   j: std::vector< char >::difference_type value\n"
		"   v: std::vector< char,std::allocator< char > > const & value\n"
		"\n"
		""},
	 { (char *)"CharVector___delslice__", _wrap_CharVector___delslice__, METH_VARARGS, (char *)"\n"
		"CharVector___delslice__(CharVector self, difference_type i, difference_type j)\n"
		"Parameters:\n"
		"   self: std::vector< char > * value\n"
		"   i: std::vector< char >::difference_type value\n"
		"   j: std::vector< char >::difference_type value\n"
		"\n"
		""},
	 { (char *)"CharVector___delitem__", _wrap_CharVector___delitem__, METH_VARARGS, (char *)"\n"
		"__delitem__(difference_type i)\n"
		"Parameters:\n"
		"   i: std::vector< char >::difference_type value\n"
		"\n"
		"CharVector___delitem__(CharVector self, PySliceObject slice)\n"
		"Parameters:\n"
		"   self: std::vector< char > * value\n"
		"   slice: PySliceObject * value\n"
		"\n"
		""},
	 { (char *)"CharVector___getitem__", _wrap_CharVector___getitem__, METH_VARARGS, (char *)"\n"
		"__getitem__(PySliceObject slice) -> CharVector\n"
		"Parameters:\n"
		"   slice: PySliceObject * value\n"
		"\n"
		"CharVector___getitem__(CharVector self, difference_type i) -> value_type\n"
		"Parameters:\n"
		"   self: std::vector< char > const * value\n"
		"   i: std::vector< char >::difference_type value\n"
		"\n"
		""},
	 { (char *)"CharVector___setitem__", _wrap_CharVector___setitem__, METH_VARARGS, (char *)"\n"
		"__setitem__(PySliceObject slice, CharVector v)\n"
		"Parameters:\n"
		"   slice: PySliceObject * value\n"
		"   v: std::vector< char,std::allocator< char > > const & value\n"
		"\n"
		"CharVector___setitem__(CharVector self, difference_type i, value_type x)\n"
		"Parameters:\n"
		"   self: std::vector< char > * value\n"
		"   i: std::vector< char >::difference_type value\n"
		"   x: std::vector< char >::value_type const & value\n"
		"\n"
		""},
	 { (char *)"CharVector_append", _wrap_CharVector_append, METH_VARARGS, (char *)"\n"
		"CharVector_append(CharVector self, value_type x)\n"
		"Parameters:\n"
		"   self: std::vector< char > * value\n"
		"   x: std::vector< char >::value_type const & value\n"
		"\n"
		""},
	 { (char *)"CharVector_empty", _wrap_CharVector_empty, METH_VARARGS, (char *)"\n"
		"CharVector_empty(CharVector self) -> bool\n"
		"Parameters:\n"
		"   self: std::vector< char > const * value\n"
		"\n"
		""},
	 { (char *)"CharVector_size", _wrap_CharVector_size, METH_VARARGS, (char *)"\n"
		"CharVector_size(CharVector self) -> size_type\n"
		"Parameters:\n"
		"   self: std::vector< char > const * value\n"
		"\n"
		""},
	 { (char *)"CharVector_clear", _wrap_CharVector_clear, METH_VARARGS, (char *)"\n"
		"CharVector_clear(CharVector self)\n"
		"Parameters:\n"
		"   self: std::vector< char > * value\n"
		"\n"
		""},
	 { (char *)"CharVector_swap", _wrap_CharVector_swap, METH_VARARGS, (char *)"\n"
		"CharVector_swap(CharVector self, CharVector v)\n"
		"Parameters:\n"
		"   self: std::vector< char > * value\n"
		"   v: std::vector< char > & value\n"
		"\n"
		""},
	 { (char *)"CharVector_get_allocator", _wrap_CharVector_get_allocator, METH_VARARGS, (char *)"\n"
		"CharVector_get_allocator(CharVector self) -> allocator_type\n"
		"Parameters:\n"
		"   self: std::vector< char > const * value\n"
		"\n"
		""},
	 { (char *)"CharVector_begin", _wrap_CharVector_begin, METH_VARARGS, (char *)"\n"
		"CharVector_begin(CharVector self) -> const_iterator\n"
		"Parameters:\n"
		"   self: std::vector< char > const * value\n"
		"\n"
		""},
	 { (char *)"CharVector_end", _wrap_CharVector_end, METH_VARARGS, (char *)"\n"
		"CharVector_end(CharVector self) -> const_iterator\n"
		"Parameters:\n"
		"   self: std::vector< char > const * value\n"
		"\n"
		""},
	 { (char *)"CharVector_rbegin", _wrap_CharVector_rbegin, METH_VARARGS, (char *)"\n"
		"CharVector_rbegin(CharVector self) -> const_reverse_iterator\n"
		"Parameters:\n"
		"   self: std::vector< char > const * value\n"
		"\n"
		""},
	 { (char *)"CharVector_rend", _wrap_CharVector_rend, METH_VARARGS, (char *)"\n"
		"CharVector_rend(CharVector self) -> const_reverse_iterator\n"
		"Parameters:\n"
		"   self: std::vector< char > const * value\n"
		"\n"
		""},
	 { (char *)"CharVector_pop_back", _wrap_CharVector_pop_back, METH_VARARGS, (char *)"\n"
		"CharVector_pop_back(CharVector self)\n"
		"Parameters:\n"
		"   self: std::vector< char > * value\n"
		"\n"
		""},
	 { (char *)"CharVector_erase", _wrap_CharVector_erase, METH_VARARGS, (char *)"\n"
		"erase(iterator pos) -> iterator\n"
		"Parameters:\n"
		"   pos: std::vector< char >::iterator value\n"
		"\n"
		"CharVector_erase(CharVector self, iterator first, iterator last) -> iterator\n"
		"Parameters:\n"
		"   self: std::vector< char > * value\n"
		"   first: std::vector< char >::iterator value\n"
		"   last: std::vector< char >::iterator value\n"
		"\n"
		""},
	 { (char *)"new_CharVector", _wrap_new_CharVector, METH_VARARGS, (char *)"\n"
		"CharVector()\n"
		"CharVector(CharVector arg0)\n"
		"Parameters:\n"
		"   : std::vector< char > const & value\n"
		"\n"
		"CharVector(size_type size)\n"
		"Parameters:\n"
		"   size: std::vector< char >::size_type value\n"
		"\n"
		"new_CharVector(size_type size, value_type value) -> CharVector\n"
		"Parameters:\n"
		"   size: std::vector< char >::size_type value\n"
		"   value: std::vector< char >::value_type const & value\n"
		"\n"
		""},
	 { (char *)"CharVector_push_back", _wrap_CharVector_push_back, METH_VARARGS, (char *)"\n"
		"CharVector_push_back(CharVector self, value_type x)\n"
		"Parameters:\n"
		"   self: std::vector< char > * value\n"
		"   x: std::vector< char >::value_type const & value\n"
		"\n"
		""},
	 { (char *)"CharVector_front", _wrap_CharVector_front, METH_VARARGS, (char *)"\n"
		"CharVector_front(CharVector self) -> value_type\n"
		"Parameters:\n"
		"   self: std::vector< char > const * value\n"
		"\n"
		""},
	 { (char *)"CharVector_back", _wrap_CharVector_back, METH_VARARGS, (char *)"\n"
		"CharVector_back(CharVector self) -> value_type\n"
		"Parameters:\n"
		"   self: std::vector< char > const * value\n"
		"\n"
		""},
	 { (char *)"CharVector_assign", _wrap_CharVector_assign, METH_VARARGS, (char *)"\n"
		"CharVector_assign(CharVector self, size_type n, value_type x)\n"
		"Parameters:\n"
		"   self: std::vector< char > * value\n"
		"   n: std::vector< char >::size_type value\n"
		"   x: std::vector< char >::value_type const & value\n"
		"\n"
		""},
	 { (char *)"CharVector_resize", _wrap_CharVector_resize, METH_VARARGS, (char *)"\n"
		"resize(size_type new_size)\n"
		"Parameters:\n"
		"   new_size: std::vector< char >::size_type value\n"
		"\n"
		"CharVector_resize(CharVector self, size_type new_size, value_type x)\n"
		"Parameters:\n"
		"   self: std::vector< char > * value\n"
		"   new_size: std::vector< char >::size_type value\n"
		"   x: std::vector< char >::value_type const & value\n"
		"\n"
		""},
	 { (char *)"CharVector_insert", _wrap_CharVector_insert, METH_VARARGS, (char *)"\n"
		"insert(iterator pos, value_type x) -> iterator\n"
		"Parameters:\n"
		"   pos: std::vector< char >::iterator value\n"
		"   x: std::vector< char >::value_type const & value\n"
		"\n"
		"CharVector_insert(CharVector self, iterator pos, size_type n, value_type x)\n"
		"Parameters:\n"
		"   self: std::vector< char > * value\n"
		"   pos: std::vector< char >::iterator value\n"
		"   n: std::vector< char >::size_type value\n"
		"   x: std::vector< char >::value_type const & value\n"
		"\n"
		""},
	 { (char *)"CharVector_reserve", _wrap_CharVector_reserve, METH_VARARGS, (char *)"\n"
		"CharVector_reserve(CharVector self, size_type n)\n"
		"Parameters:\n"
		"   self: std::vector< char > * value\n"
		"   n: std::vector< char >::size_type value\n"
		"\n"
		""},
	 { (char *)"CharVector_capacity", _wrap_CharVector_capacity, METH_VARARGS, (char *)"\n"
		"CharVector_capacity(CharVector self) -> size_type\n"
		"Parameters:\n"
		"   self: std::vector< char > const * value\n"
		"\n"
		""},
	 { (char *)"delete_CharVector", _wrap_delete_CharVector, METH_VARARGS, (char *)"\n"
		"delete_CharVector(CharVector self)\n"
		"Parameters:\n"
		"   self: std::vector< char > * value\n"
		"\n"
		""},
	 { (char *)"CharVector_swigregister", CharVector_swigregister, METH_VARARGS, NULL},
	 { (char *)"LongVector_iterator", _wrap_LongVector_iterator, METH_VARARGS, (char *)"\n"
		"LongVector_iterator(LongVector self) -> SwigPyIterator\n"
		"Parameters:\n"
		"   self: std::vector< long > * value\n"
		"\n"
		""},
	 { (char *)"LongVector___nonzero__", _wrap_LongVector___nonzero__, METH_VARARGS, (char *)"\n"
		"LongVector___nonzero__(LongVector self) -> bool\n"
		"Parameters:\n"
		"   self: std::vector< long > const * value\n"
		"\n"
		""},
	 { (char *)"LongVector___bool__", _wrap_LongVector___bool__, METH_VARARGS, (char *)"\n"
		"LongVector___bool__(LongVector self) -> bool\n"
		"Parameters:\n"
		"   self: std::vector< long > const * value\n"
		"\n"
		""},
	 { (char *)"LongVector___len__", _wrap_LongVector___len__, METH_VARARGS, (char *)"\n"
		"LongVector___len__(LongVector self) -> size_type\n"
		"Parameters:\n"
		"   self: std::vector< long > const * value\n"
		"\n"
		""},
	 { (char *)"LongVector_pop", _wrap_LongVector_pop, METH_VARARGS, (char *)"\n"
		"LongVector_pop(LongVector self) -> value_type\n"
		"Parameters:\n"
		"   self: std::vector< long > * value\n"
		"\n"
		""},
	 { (char *)"LongVector___getslice__", _wrap_LongVector___getslice__, METH_VARARGS, (char *)"\n"
		"LongVector___getslice__(LongVector self, difference_type i, difference_type j) -> LongVector\n"
		"Parameters:\n"
		"   self: std::vector< long > * value\n"
		"   i: std::vector< long >::difference_type value\n"
		"   j: std::vector< long >::difference_type value\n"
		"\n"
		""},
	 { (char *)"LongVector___setslice__", _wrap_LongVector___setslice__, METH_VARARGS, (char *)"\n"
		"LongVector___setslice__(LongVector self, difference_type i, difference_type j, \n"
		"    LongVector v)\n"
		"Parameters:\n"
		"   self: std::vector< long > * value\n"
		"   i: std::vector< long >::difference_type value\n"
		"   j: std::vector< long >::difference_type value\n"
		"   v: std::vector< long,std::allocator< long > > const & value\n"
		"\n"
		""},
	 { (char *)"LongVector___delslice__", _wrap_LongVector___delslice__, METH_VARARGS, (char *)"\n"
		"LongVector___delslice__(LongVector self, difference_type i, difference_type j)\n"
		"Parameters:\n"
		"   self: std::vector< long > * value\n"
		"   i: std::vector< long >::difference_type value\n"
		"   j: std::vector< long >::difference_type value\n"
		"\n"
		""},
	 { (char *)"LongVector___delitem__", _wrap_LongVector___delitem__, METH_VARARGS, (char *)"\n"
		"__delitem__(difference_type i)\n"
		"Parameters:\n"
		"   i: std::vector< long >::difference_type value\n"
		"\n"
		"LongVector___delitem__(LongVector self, PySliceObject slice)\n"
		"Parameters:\n"
		"   self: std::vector< long > * value\n"
		"   slice: PySliceObject * value\n"
		"\n"
		""},
	 { (char *)"LongVector___getitem__", _wrap_LongVector___getitem__, METH_VARARGS, (char *)"\n"
		"__getitem__(PySliceObject slice) -> LongVector\n"
		"Parameters:\n"
		"   slice: PySliceObject * value\n"
		"\n"
		"LongVector___getitem__(LongVector self, difference_type i) -> value_type\n"
		"Parameters:\n"
		"   self: std::vector< long > const * value\n"
		"   i: std::vector< long >::difference_type value\n"
		"\n"
		""},
	 { (char *)"LongVector___setitem__", _wrap_LongVector___setitem__, METH_VARARGS, (char *)"\n"
		"__setitem__(PySliceObject slice, LongVector v)\n"
		"Parameters:\n"
		"   slice: PySliceObject * value\n"
		"   v: std::vector< long,std::allocator< long > > const & value\n"
		"\n"
		"LongVector___setitem__(LongVector self, difference_type i, value_type x)\n"
		"Parameters:\n"
		"   self: std::vector< long > * value\n"
		"   i: std::vector< long >::difference_type value\n"
		"   x: std::vector< long >::value_type const & value\n"
		"\n"
		""},
	 { (char *)"LongVector_append", _wrap_LongVector_append, METH_VARARGS, (char *)"\n"
		"LongVector_append(LongVector self, value_type x)\n"
		"Parameters:\n"
		"   self: std::vector< long > * value\n"
		"   x: std::vector< long >::value_type const & value\n"
		"\n"
		""},
	 { (char *)"LongVector_empty", _wrap_LongVector_empty, METH_VARARGS, (char *)"\n"
		"LongVector_empty(LongVector self) -> bool\n"
		"Parameters:\n"
		"   self: std::vector< long > const * value\n"
		"\n"
		""},
	 { (char *)"LongVector_size", _wrap_LongVector_size, METH_VARARGS, (char *)"\n"
		"LongVector_size(LongVector self) -> size_type\n"
		"Parameters:\n"
		"   self: std::vector< long > const * value\n"
		"\n"
		""},
	 { (char *)"LongVector_clear", _wrap_LongVector_clear, METH_VARARGS, (char *)"\n"
		"LongVector_clear(LongVector self)\n"
		"Parameters:\n"
		"   self: std::vector< long > * value\n"
		"\n"
		""},
	 { (char *)"LongVector_swap", _wrap_LongVector_swap, METH_VARARGS, (char *)"\n"
		"LongVector_swap(LongVector self, LongVector v)\n"
		"Parameters:\n"
		"   self: std::vector< long > * value\n"
		"   v: std::vector< long > & value\n"
		"\n"
		""},
	 { (char *)"LongVector_get_allocator", _wrap_LongVector_get_allocator, METH_VARARGS, (char *)"\n"
		"LongVector_get_allocator(LongVector self) -> allocator_type\n"
		"Parameters:\n"
		"   self: std::vector< long > const * value\n"
		"\n"
		""},
	 { (char *)"LongVector_begin", _wrap_LongVector_begin, METH_VARARGS, (char *)"\n"
		"LongVector_begin(LongVector self) -> const_iterator\n"
		"Parameters:\n"
		"   self: std::vector< long > const * value\n"
		"\n"
		""},
	 { (char *)"LongVector_end", _wrap_LongVector_end, METH_VARARGS, (char *)"\n"
		"LongVector_end(LongVector self) -> const_iterator\n"
		"Parameters:\n"
		"   self: std::vector< long > const * value\n"
		"\n"
		""},
	 { (char *)"LongVector_rbegin", _wrap_LongVector_rbegin, METH_VARARGS, (char *)"\n"
		"LongVector_rbegin(LongVector self) -> const_reverse_iterator\n"
		"Parameters:\n"
		"   self: std::vector< long > const * value\n"
		"\n"
		""},
	 { (char *)"LongVector_rend", _wrap_LongVector_rend, METH_VARARGS, (char *)"\n"
		"LongVector_rend(LongVector self) -> const_reverse_iterator\n"
		"Parameters:\n"
		"   self: std::vector< long > const * value\n"
		"\n"
		""},
	 { (char *)"LongVector_pop_back", _wrap_LongVector_pop_back, METH_VARARGS, (char *)"\n"
		"LongVector_pop_back(LongVector self)\n"
		"Parameters:\n"
		"   self: std::vector< long > * value\n"
		"\n"
		""},
	 { (char *)"LongVector_erase", _wrap_LongVector_erase, METH_VARARGS, (char *)"\n"
		"erase(iterator pos) -> iterator\n"
		"Parameters:\n"
		"   pos: std::vector< long >::iterator value\n"
		"\n"
		"LongVector_erase(LongVector self, iterator first, iterator last) -> iterator\n"
		"Parameters:\n"
		"   self: std::vector< long > * value\n"
		"   first: std::vector< long >::iterator value\n"
		"   last: std::vector< long >::iterator value\n"
		"\n"
		""},
	 { (char *)"new_LongVector", _wrap_new_LongVector, METH_VARARGS, (char *)"\n"
		"LongVector()\n"
		"LongVector(LongVector arg0)\n"
		"Parameters:\n"
		"   : std::vector< long > const & value\n"
		"\n"
		"LongVector(size_type size)\n"
		"Parameters:\n"
		"   size: std::vector< long >::size_type value\n"
		"\n"
		"new_LongVector(size_type size, value_type value) -> LongVector\n"
		"Parameters:\n"
		"   size: std::vector< long >::size_type value\n"
		"   value: std::vector< long >::value_type const & value\n"
		"\n"
		""},
	 { (char *)"LongVector_push_back", _wrap_LongVector_push_back, METH_VARARGS, (char *)"\n"
		"LongVector_push_back(LongVector self, value_type x)\n"
		"Parameters:\n"
		"   self: std::vector< long > * value\n"
		"   x: std::vector< long >::value_type const & value\n"
		"\n"
		""},
	 { (char *)"LongVector_front", _wrap_LongVector_front, METH_VARARGS, (char *)"\n"
		"LongVector_front(LongVector self) -> value_type\n"
		"Parameters:\n"
		"   self: std::vector< long > const * value\n"
		"\n"
		""},
	 { (char *)"LongVector_back", _wrap_LongVector_back, METH_VARARGS, (char *)"\n"
		"LongVector_back(LongVector self) -> value_type\n"
		"Parameters:\n"
		"   self: std::vector< long > const * value\n"
		"\n"
		""},
	 { (char *)"LongVector_assign", _wrap_LongVector_assign, METH_VARARGS, (char *)"\n"
		"LongVector_assign(LongVector self, size_type n, value_type x)\n"
		"Parameters:\n"
		"   self: std::vector< long > * value\n"
		"   n: std::vector< long >::size_type value\n"
		"   x: std::vector< long >::value_type const & value\n"
		"\n"
		""},
	 { (char *)"LongVector_resize", _wrap_LongVector_resize, METH_VARARGS, (char *)"\n"
		"resize(size_type new_size)\n"
		"Parameters:\n"
		"   new_size: std::vector< long >::size_type value\n"
		"\n"
		"LongVector_resize(LongVector self, size_type new_size, value_type x)\n"
		"Parameters:\n"
		"   self: std::vector< long > * value\n"
		"   new_size: std::vector< long >::size_type value\n"
		"   x: std::vector< long >::value_type const & value\n"
		"\n"
		""},
	 { (char *)"LongVector_insert", _wrap_LongVector_insert, METH_VARARGS, (char *)"\n"
		"insert(iterator pos, value_type x) -> iterator\n"
		"Parameters:\n"
		"   pos: std::vector< long >::iterator value\n"
		"   x: std::vector< long >::value_type const & value\n"
		"\n"
		"LongVector_insert(LongVector self, iterator pos, size_type n, value_type x)\n"
		"Parameters:\n"
		"   self: std::vector< long > * value\n"
		"   pos: std::vector< long >::iterator value\n"
		"   n: std::vector< long >::size_type value\n"
		"   x: std::vector< long >::value_type const & value\n"
		"\n"
		""},
	 { (char *)"LongVector_reserve", _wrap_LongVector_reserve, METH_VARARGS, (char *)"\n"
		"LongVector_reserve(LongVector self, size_type n)\n"
		"Parameters:\n"
		"   self: std::vector< long > * value\n"
		"   n: std::vector< long >::size_type value\n"
		"\n"
		""},
	 { (char *)"LongVector_capacity", _wrap_LongVector_capacity, METH_VARARGS, (char *)"\n"
		"LongVector_capacity(LongVector self) -> size_type\n"
		"Parameters:\n"
		"   self: std::vector< long > const * value\n"
		"\n"
		""},
	 { (char *)"delete_LongVector", _wrap_delete_LongVector, METH_VARARGS, (char *)"\n"
		"delete_LongVector(LongVector self)\n"
		"Parameters:\n"
		"   self: std::vector< long > * value\n"
		"\n"
		""},
	 { (char *)"LongVector_swigregister", LongVector_swigregister, METH_VARARGS, NULL},
	 { (char *)"DoubleVector_iterator", _wrap_DoubleVector_iterator, METH_VARARGS, (char *)"\n"
		"DoubleVector_iterator(DoubleVector self) -> SwigPyIterator\n"
		"Parameters:\n"
		"   self: std::vector< double > * value\n"
		"\n"
		""},
	 { (char *)"DoubleVector___nonzero__", _wrap_DoubleVector___nonzero__, METH_VARARGS, (char *)"\n"
		"DoubleVector___nonzero__(DoubleVector self) -> bool\n"
		"Parameters:\n"
		"   self: std::vector< double > const * value\n"
		"\n"
		""},
	 { (char *)"DoubleVector___bool__", _wrap_DoubleVector___bool__, METH_VARARGS, (char *)"\n"
		"DoubleVector___bool__(DoubleVector self) -> bool\n"
		"Parameters:\n"
		"   self: std::vector< double > const * value\n"
		"\n"
		""},
	 { (char *)"DoubleVector___len__", _wrap_DoubleVector___len__, METH_VARARGS, (char *)"\n"
		"DoubleVector___len__(DoubleVector self) -> size_type\n"
		"Parameters:\n"
		"   self: std::vector< double > const * value\n"
		"\n"
		""},
	 { (char *)"DoubleVector_pop", _wrap_DoubleVector_pop, METH_VARARGS, (char *)"\n"
		"DoubleVector_pop(DoubleVector self) -> value_type\n"
		"Parameters:\n"
		"   self: std::vector< double > * value\n"
		"\n"
		""},
	 { (char *)"DoubleVector___getslice__", _wrap_DoubleVector___getslice__, METH_VARARGS, (char *)"\n"
		"DoubleVector___getslice__(DoubleVector self, difference_type i, difference_type j) -> DoubleVector\n"
		"Parameters:\n"
		"   self: std::vector< double > * value\n"
		"   i: std::vector< double >::difference_type value\n"
		"   j: std::vector< double >::difference_type value\n"
		"\n"
		""},
	 { (char *)"DoubleVector___setslice__", _wrap_DoubleVector___setslice__, METH_VARARGS, (char *)"\n"
		"DoubleVector___setslice__(DoubleVector self, difference_type i, difference_type j, \n"
		"    DoubleVector v)\n"
		"Parameters:\n"
		"   self: std::vector< double > * value\n"
		"   i: std::vector< double >::difference_type value\n"
		"   j: std::vector< double >::difference_type value\n"
		"   v: std::vector< double,std::allocator< double > > const & value\n"
		"\n"
		""},
	 { (char *)"DoubleVector___delslice__", _wrap_DoubleVector___delslice__, METH_VARARGS, (char *)"\n"
		"DoubleVector___delslice__(DoubleVector self, difference_type i, difference_type j)\n"
		"Parameters:\n"
		"   self: std::vector< double > * value\n"
		"   i: std::vector< double >::difference_type value\n"
		"   j: std::vector< double >::difference_type value\n"
		"\n"
		""},
	 { (char *)"DoubleVector___delitem__", _wrap_DoubleVector___delitem__, METH_VARARGS, (char *)"\n"
		"__delitem__(difference_type i)\n"
		"Parameters:\n"
		"   i: std::vector< double >::difference_type value\n"
		"\n"
		"DoubleVector___delitem__(DoubleVector self, PySliceObject slice)\n"
		"Parameters:\n"
		"   self: std::vector< double > * value\n"
		"   slice: PySliceObject * value\n"
		"\n"
		""},
	 { (char *)"DoubleVector___getitem__", _wrap_DoubleVector___getitem__, METH_VARARGS, (char *)"\n"
		"__getitem__(PySliceObject slice) -> DoubleVector\n"
		"Parameters:\n"
		"   slice: PySliceObject * value\n"
		"\n"
		"DoubleVector___getitem__(DoubleVector self, difference_type i) -> value_type\n"
		"Parameters:\n"
		"   self: std::vector< double > const * value\n"
		"   i: std::vector< double >::difference_type value\n"
		"\n"
		""},
	 { (char *)"DoubleVector___setitem__", _wrap_DoubleVector___setitem__, METH_VARARGS, (char *)"\n"
		"__setitem__(PySliceObject slice, DoubleVector v)\n"
		"Parameters:\n"
		"   slice: PySliceObject * value\n"
		"   v: std::vector< double,std::allocator< double > > const & value\n"
		"\n"
		"DoubleVector___setitem__(DoubleVector self, difference_type i, value_type x)\n"
		"Parameters:\n"
		"   self: std::vector< double > * value\n"
		"   i: std::vector< double >::difference_type value\n"
		"   x: std::vector< double >::value_type const & value\n"
		"\n"
		""},
	 { (char *)"DoubleVector_append", _wrap_DoubleVector_append, METH_VARARGS, (char *)"\n"
		"DoubleVector_append(DoubleVector self, value_type x)\n"
		"Parameters:\n"
		"   self: std::vector< double > * value\n"
		"   x: std::vector< double >::value_type const & value\n"
		"\n"
		""},
	 { (char *)"DoubleVector_empty", _wrap_DoubleVector_empty, METH_VARARGS, (char *)"\n"
		"DoubleVector_empty(DoubleVector self) -> bool\n"
		"Parameters:\n"
		"   self: std::vector< double > const * value\n"
		"\n"
		""},
	 { (char *)"DoubleVector_size", _wrap_DoubleVector_size, METH_VARARGS, (char *)"\n"
		"DoubleVector_size(DoubleVector self) -> size_type\n"
		"Parameters:\n"
		"   self: std::vector< double > const * value\n"
		"\n"
		""},
	 { (char *)"DoubleVector_clear", _wrap_DoubleVector_clear, METH_VARARGS, (char *)"\n"
		"DoubleVector_clear(DoubleVector self)\n"
		"Parameters:\n"
		"   self: std::vector< double > * value\n"
		"\n"
		""},
	 { (char *)"DoubleVector_swap", _wrap_DoubleVector_swap, METH_VARARGS, (char *)"\n"
		"DoubleVector_swap(DoubleVector self, DoubleVector v)\n"
		"Parameters:\n"
		"   self: std::vector< double > * value\n"
		"   v: std::vector< double > & value\n"
		"\n"
		""},
	 { (char *)"DoubleVector_get_allocator", _wrap_DoubleVector_get_allocator, METH_VARARGS, (char *)"\n"
		"DoubleVector_get_allocator(DoubleVector self) -> allocator_type\n"
		"Parameters:\n"
		"   self: std::vector< double > const * value\n"
		"\n"
		""},
	 { (char *)"DoubleVector_begin", _wrap_DoubleVector_begin, METH_VARARGS, (char *)"\n"
		"DoubleVector_begin(DoubleVector self) -> const_iterator\n"
		"Parameters:\n"
		"   self: std::vector< double > const * value\n"
		"\n"
		""},
	 { (char *)"DoubleVector_end", _wrap_DoubleVector_end, METH_VARARGS, (char *)"\n"
		"DoubleVector_end(DoubleVector self) -> const_iterator\n"
		"Parameters:\n"
		"   self: std::vector< double > const * value\n"
		"\n"
		""},
	 { (char *)"DoubleVector_rbegin", _wrap_DoubleVector_rbegin, METH_VARARGS, (char *)"\n"
		"DoubleVector_rbegin(DoubleVector self) -> const_reverse_iterator\n"
		"Parameters:\n"
		"   self: std::vector< double > const * value\n"
		"\n"
		""},
	 { (char *)"DoubleVector_rend", _wrap_DoubleVector_rend, METH_VARARGS, (char *)"\n"
		"DoubleVector_rend(DoubleVector self) -> const_reverse_iterator\n"
		"Parameters:\n"
		"   self: std::vector< double > const * value\n"
		"\n"
		""},
	 { (char *)"DoubleVector_pop_back", _wrap_DoubleVector_pop_back, METH_VARARGS, (char *)"\n"
		"DoubleVector_pop_back(DoubleVector self)\n"
		"Parameters:\n"
		"   self: std::vector< double > * value\n"
		"\n"
		""},
	 { (char *)"DoubleVector_erase", _wrap_DoubleVector_erase, METH_VARARGS, (char *)"\n"
		"erase(iterator pos) -> iterator\n"
		"Parameters:\n"
		"   pos: std::vector< double >::iterator value\n"
		"\n"
		"DoubleVector_erase(DoubleVector self, iterator first, iterator last) -> iterator\n"
		"Parameters:\n"
		"   self: std::vector< double > * value\n"
		"   first: std::vector< double >::iterator value\n"
		"   last: std::vector< double >::iterator value\n"
		"\n"
		""},
	 { (char *)"new_DoubleVector", _wrap_new_DoubleVector, METH_VARARGS, (char *)"\n"
		"DoubleVector()\n"
		"DoubleVector(DoubleVector arg0)\n"
		"Parameters:\n"
		"   : std::vector< double > const & value\n"
		"\n"
		"DoubleVector(size_type size)\n"
		"Parameters:\n"
		"   size: std::vector< double >::size_type value\n"
		"\n"
		"new_DoubleVector(size_type size, value_type value) -> DoubleVector\n"
		"Parameters:\n"
		"   size: std::vector< double >::size_type value\n"
		"   value: std::vector< double >::value_type const & value\n"
		"\n"
		""},
	 { (char *)"DoubleVector_push_back", _wrap_DoubleVector_push_back, METH_VARARGS, (char *)"\n"
		"DoubleVector_push_back(DoubleVector self, value_type x)\n"
		"Parameters:\n"
		"   self: std::vector< double > * value\n"
		"   x: std::vector< double >::value_type const & value\n"
		"\n"
		""},
	 { (char *)"DoubleVector_front", _wrap_DoubleVector_front, METH_VARARGS, (char *)"\n"
		"DoubleVector_front(DoubleVector self) -> value_type\n"
		"Parameters:\n"
		"   self: std::vector< double > const * value\n"
		"\n"
		""},
	 { (char *)"DoubleVector_back", _wrap_DoubleVector_back, METH_VARARGS, (char *)"\n"
		"DoubleVector_back(DoubleVector self) -> value_type\n"
		"Parameters:\n"
		"   self: std::vector< double > const * value\n"
		"\n"
		""},
	 { (char *)"DoubleVector_assign", _wrap_DoubleVector_assign, METH_VARARGS, (char *)"\n"
		"DoubleVector_assign(DoubleVector self, size_type n, value_type x)\n"
		"Parameters:\n"
		"   self: std::vector< double > * value\n"
		"   n: std::vector< double >::size_type value\n"
		"   x: std::vector< double >::value_type const & value\n"
		"\n"
		""},
	 { (char *)"DoubleVector_resize", _wrap_DoubleVector_resize, METH_VARARGS, (char *)"\n"
		"resize(size_type new_size)\n"
		"Parameters:\n"
		"   new_size: std::vector< double >::size_type value\n"
		"\n"
		"DoubleVector_resize(DoubleVector self, size_type new_size, value_type x)\n"
		"Parameters:\n"
		"   self: std::vector< double > * value\n"
		"   new_size: std::vector< double >::size_type value\n"
		"   x: std::vector< double >::value_type const & value\n"
		"\n"
		""},
	 { (char *)"DoubleVector_insert", _wrap_DoubleVector_insert, METH_VARARGS, (char *)"\n"
		"insert(iterator pos, value_type x) -> iterator\n"
		"Parameters:\n"
		"   pos: std::vector< double >::iterator value\n"
		"   x: std::vector< double >::value_type const & value\n"
		"\n"
		"DoubleVector_insert(DoubleVector self, iterator pos, size_type n, value_type x)\n"
		"Parameters:\n"
		"   self: std::vector< double > * value\n"
		"   pos: std::vector< double >::iterator value\n"
		"   n: std::vector< double >::size_type value\n"
		"   x: std::vector< double >::value_type const & value\n"
		"\n"
		""},
	 { (char *)"DoubleVector_reserve", _wrap_DoubleVector_reserve, METH_VARARGS, (char *)"\n"
		"DoubleVector_reserve(DoubleVector self, size_type n)\n"
		"Parameters:\n"
		"   self: std::vector< double > * value\n"
		"   n: std::vector< double >::size_type value\n"
		"\n"
		""},
	 { (char *)"DoubleVector_capacity", _wrap_DoubleVector_capacity, METH_VARARGS, (char *)"\n"
		"DoubleVector_capacity(DoubleVector self) -> size_type\n"
		"Parameters:\n"
		"   self: std::vector< double > const * value\n"
		"\n"
		""},
	 { (char *)"delete_DoubleVector", _wrap_delete_DoubleVector, METH_VARARGS, (char *)"\n"
		"delete_DoubleVector(DoubleVector self)\n"
		"Parameters:\n"
		"   self: std::vector< double > * value\n"
		"\n"
		""},
	 { (char *)"DoubleVector_swigregister", DoubleVector_swigregister, METH_VARARGS, NULL},
	 { (char *)"StrVector_iterator", _wrap_StrVector_iterator, METH_VARARGS, (char *)"\n"
		"StrVector_iterator(StrVector self) -> SwigPyIterator\n"
		"Parameters:\n"
		"   self: std::vector< std::string > * value\n"
		"\n"
		""},
	 { (char *)"StrVector___nonzero__", _wrap_StrVector___nonzero__, METH_VARARGS, (char *)"\n"
		"StrVector___nonzero__(StrVector self) -> bool\n"
		"Parameters:\n"
		"   self: std::vector< std::string > const * value\n"
		"\n"
		""},
	 { (char *)"StrVector___bool__", _wrap_StrVector___bool__, METH_VARARGS, (char *)"\n"
		"StrVector___bool__(StrVector self) -> bool\n"
		"Parameters:\n"
		"   self: std::vector< std::string > const * value\n"
		"\n"
		""},
	 { (char *)"StrVector___len__", _wrap_StrVector___len__, METH_VARARGS, (char *)"\n"
		"StrVector___len__(StrVector self) -> size_type\n"
		"Parameters:\n"
		"   self: std::vector< std::string > const * value\n"
		"\n"
		""},
	 { (char *)"StrVector_pop", _wrap_StrVector_pop, METH_VARARGS, (char *)"\n"
		"StrVector_pop(StrVector self) -> value_type\n"
		"Parameters:\n"
		"   self: std::vector< std::string > * value\n"
		"\n"
		""},
	 { (char *)"StrVector___getslice__", _wrap_StrVector___getslice__, METH_VARARGS, (char *)"\n"
		"StrVector___getslice__(StrVector self, difference_type i, difference_type j) -> StrVector\n"
		"Parameters:\n"
		"   self: std::vector< std::string > * value\n"
		"   i: std::vector< std::string >::difference_type value\n"
		"   j: std::vector< std::string >::difference_type value\n"
		"\n"
		""},
	 { (char *)"StrVector___setslice__", _wrap_StrVector___setslice__, METH_VARARGS, (char *)"\n"
		"StrVector___setslice__(StrVector self, difference_type i, difference_type j, \n"
		"    StrVector v)\n"
		"Parameters:\n"
		"   self: std::vector< std::string > * value\n"
		"   i: std::vector< std::string >::difference_type value\n"
		"   j: std::vector< std::string >::difference_type value\n"
		"   v: std::vector< std::string,std::allocator< std::string > > const & value\n"
		"\n"
		""},
	 { (char *)"StrVector___delslice__", _wrap_StrVector___delslice__, METH_VARARGS, (char *)"\n"
		"StrVector___delslice__(StrVector self, difference_type i, difference_type j)\n"
		"Parameters:\n"
		"   self: std::vector< std::string > * value\n"
		"   i: std::vector< std::string >::difference_type value\n"
		"   j: std::vector< std::string >::difference_type value\n"
		"\n"
		""},
	 { (char *)"StrVector___delitem__", _wrap_StrVector___delitem__, METH_VARARGS, (char *)"\n"
		"__delitem__(difference_type i)\n"
		"Parameters:\n"
		"   i: std::vector< std::string >::difference_type value\n"
		"\n"
		"StrVector___delitem__(StrVector self, PySliceObject slice)\n"
		"Parameters:\n"
		"   self: std::vector< std::string > * value\n"
		"   slice: PySliceObject * value\n"
		"\n"
		""},
	 { (char *)"StrVector___getitem__", _wrap_StrVector___getitem__, METH_VARARGS, (char *)"\n"
		"__getitem__(PySliceObject slice) -> StrVector\n"
		"Parameters:\n"
		"   slice: PySliceObject * value\n"
		"\n"
		"StrVector___getitem__(StrVector self, difference_type i) -> value_type\n"
		"Parameters:\n"
		"   self: std::vector< std::string > const * value\n"
		"   i: std::vector< std::string >::difference_type value\n"
		"\n"
		""},
	 { (char *)"StrVector___setitem__", _wrap_StrVector___setitem__, METH_VARARGS, (char *)"\n"
		"__setitem__(PySliceObject slice, StrVector v)\n"
		"Parameters:\n"
		"   slice: PySliceObject * value\n"
		"   v: std::vector< std::string,std::allocator< std::string > > const & value\n"
		"\n"
		"StrVector___setitem__(StrVector self, difference_type i, value_type x)\n"
		"Parameters:\n"
		"   self: std::vector< std::string > * value\n"
		"   i: std::vector< std::string >::difference_type value\n"
		"   x: std::vector< std::string >::value_type const & value\n"
		"\n"
		""},
	 { (char *)"StrVector_append", _wrap_StrVector_append, METH_VARARGS, (char *)"\n"
		"StrVector_append(StrVector self, value_type x)\n"
		"Parameters:\n"
		"   self: std::vector< std::string > * value\n"
		"   x: std::vector< std::string >::value_type const & value\n"
		"\n"
		""},
	 { (char *)"StrVector_empty", _wrap_StrVector_empty, METH_VARARGS, (char *)"\n"
		"StrVector_empty(StrVector self) -> bool\n"
		"Parameters:\n"
		"   self: std::vector< std::string > const * value\n"
		"\n"
		""},
	 { (char *)"StrVector_size", _wrap_StrVector_size, METH_VARARGS, (char *)"\n"
		"StrVector_size(StrVector self) -> size_type\n"
		"Parameters:\n"
		"   self: std::vector< std::string > const * value\n"
		"\n"
		""},
	 { (char *)"StrVector_clear", _wrap_StrVector_clear, METH_VARARGS, (char *)"\n"
		"StrVector_clear(StrVector self)\n"
		"Parameters:\n"
		"   self: std::vector< std::string > * value\n"
		"\n"
		""},
	 { (char *)"StrVector_swap", _wrap_StrVector_swap, METH_VARARGS, (char *)"\n"
		"StrVector_swap(StrVector self, StrVector v)\n"
		"Parameters:\n"
		"   self: std::vector< std::string > * value\n"
		"   v: std::vector< std::string > & value\n"
		"\n"
		""},
	 { (char *)"StrVector_get_allocator", _wrap_StrVector_get_allocator, METH_VARARGS, (char *)"\n"
		"StrVector_get_allocator(StrVector self) -> allocator_type\n"
		"Parameters:\n"
		"   self: std::vector< std::string > const * value\n"
		"\n"
		""},
	 { (char *)"StrVector_begin", _wrap_StrVector_begin, METH_VARARGS, (char *)"\n"
		"StrVector_begin(StrVector self) -> const_iterator\n"
		"Parameters:\n"
		"   self: std::vector< std::string > const * value\n"
		"\n"
		""},
	 { (char *)"StrVector_end", _wrap_StrVector_end, METH_VARARGS, (char *)"\n"
		"StrVector_end(StrVector self) -> const_iterator\n"
		"Parameters:\n"
		"   self: std::vector< std::string > const * value\n"
		"\n"
		""},
	 { (char *)"StrVector_rbegin", _wrap_StrVector_rbegin, METH_VARARGS, (char *)"\n"
		"StrVector_rbegin(StrVector self) -> const_reverse_iterator\n"
		"Parameters:\n"
		"   self: std::vector< std::string > const * value\n"
		"\n"
		""},
	 { (char *)"StrVector_rend", _wrap_StrVector_rend, METH_VARARGS, (char *)"\n"
		"StrVector_rend(StrVector self) -> const_reverse_iterator\n"
		"Parameters:\n"
		"   self: std::vector< std::string > const * value\n"
		"\n"
		""},
	 { (char *)"StrVector_pop_back", _wrap_StrVector_pop_back, METH_VARARGS, (char *)"\n"
		"StrVector_pop_back(StrVector self)\n"
		"Parameters:\n"
		"   self: std::vector< std::string > * value\n"
		"\n"
		""},
	 { (char *)"StrVector_erase", _wrap_StrVector_erase, METH_VARARGS, (char *)"\n"
		"erase(iterator pos) -> iterator\n"
		"Parameters:\n"
		"   pos: std::vector< std::string >::iterator value\n"
		"\n"
		"StrVector_erase(StrVector self, iterator first, iterator last) -> iterator\n"
		"Parameters:\n"
		"   self: std::vector< std::string > * value\n"
		"   first: std::vector< std::string >::iterator value\n"
		"   last: std::vector< std::string >::iterator value\n"
		"\n"
		""},
	 { (char *)"new_StrVector", _wrap_new_StrVector, METH_VARARGS, (char *)"\n"
		"StrVector()\n"
		"StrVector(StrVector arg0)\n"
		"Parameters:\n"
		"   : std::vector< std::string > const & value\n"
		"\n"
		"StrVector(size_type size)\n"
		"Parameters:\n"
		"   size: std::vector< std::string >::size_type value\n"
		"\n"
		"new_StrVector(size_type size, value_type value) -> StrVector\n"
		"Parameters:\n"
		"   size: std::vector< std::string >::size_type value\n"
		"   value: std::vector< std::string >::value_type const & value\n"
		"\n"
		""},
	 { (char *)"StrVector_push_back", _wrap_StrVector_push_back, METH_VARARGS, (char *)"\n"
		"StrVector_push_back(StrVector self, value_type x)\n"
		"Parameters:\n"
		"   self: std::vector< std::string > * value\n"
		"   x: std::vector< std::string >::value_type const & value\n"
		"\n"
		""},
	 { (char *)"StrVector_front", _wrap_StrVector_front, METH_VARARGS, (char *)"\n"
		"StrVector_front(StrVector self) -> value_type\n"
		"Parameters:\n"
		"   self: std::vector< std::string > const * value\n"
		"\n"
		""},
	 { (char *)"StrVector_back", _wrap_StrVector_back, METH_VARARGS, (char *)"\n"
		"StrVector_back(StrVector self) -> value_type\n"
		"Parameters:\n"
		"   self: std::vector< std::string > const * value\n"
		"\n"
		""},
	 { (char *)"StrVector_assign", _wrap_StrVector_assign, METH_VARARGS, (char *)"\n"
		"StrVector_assign(StrVector self, size_type n, value_type x)\n"
		"Parameters:\n"
		"   self: std::vector< std::string > * value\n"
		"   n: std::vector< std::string >::size_type value\n"
		"   x: std::vector< std::string >::value_type const & value\n"
		"\n"
		""},
	 { (char *)"StrVector_resize", _wrap_StrVector_resize, METH_VARARGS, (char *)"\n"
		"resize(size_type new_size)\n"
		"Parameters:\n"
		"   new_size: std::vector< std::string >::size_type value\n"
		"\n"
		"StrVector_resize(StrVector self, size_type new_size, value_type x)\n"
		"Parameters:\n"
		"   self: std::vector< std::string > * value\n"
		"   new_size: std::vector< std::string >::size_type value\n"
		"   x: std::vector< std::string >::value_type const & value\n"
		"\n"
		""},
	 { (char *)"StrVector_insert", _wrap_StrVector_insert, METH_VARARGS, (char *)"\n"
		"insert(iterator pos, value_type x) -> iterator\n"
		"Parameters:\n"
		"   pos: std::vector< std::string >::iterator value\n"
		"   x: std::vector< std::string >::value_type const & value\n"
		"\n"
		"StrVector_insert(StrVector self, iterator pos, size_type n, value_type x)\n"
		"Parameters:\n"
		"   self: std::vector< std::string > * value\n"
		"   pos: std::vector< std::string >::iterator value\n"
		"   n: std::vector< std::string >::size_type value\n"
		"   x: std::vector< std::string >::value_type const & value\n"
		"\n"
		""},
	 { (char *)"StrVector_reserve", _wrap_StrVector_reserve, METH_VARARGS, (char *)"\n"
		"StrVector_reserve(StrVector self, size_type n)\n"
		"Parameters:\n"
		"   self: std::vector< std::string > * value\n"
		"   n: std::vector< std::string >::size_type value\n"
		"\n"
		""},
	 { (char *)"StrVector_capacity", _wrap_StrVector_capacity, METH_VARARGS, (char *)"\n"
		"StrVector_capacity(StrVector self) -> size_type\n"
		"Parameters:\n"
		"   self: std::vector< std::string > const * value\n"
		"\n"
		""},
	 { (char *)"delete_StrVector", _wrap_delete_StrVector, METH_VARARGS, (char *)"\n"
		"delete_StrVector(StrVector self)\n"
		"Parameters:\n"
		"   self: std::vector< std::string > * value\n"
		"\n"
		""},
	 { (char *)"StrVector_swigregister", StrVector_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_pair_ss", _wrap_new_pair_ss, METH_VARARGS, (char *)"\n"
		"pair_ss()\n"
		"pair_ss(string first, string second)\n"
		"Parameters:\n"
		"   first: std::string value\n"
		"   second: std::string value\n"
		"\n"
		"new_pair_ss(pair_ss p) -> pair_ss\n"
		"Parameters:\n"
		"   p: std::pair< std::string,std::string > const & value\n"
		"\n"
		""},
	 { (char *)"pair_ss_first_set", _wrap_pair_ss_first_set, METH_VARARGS, (char *)"\n"
		"pair_ss_first_set(pair_ss self, string first)\n"
		"Parameters:\n"
		"   self: std::pair< std::string,std::string > * value\n"
		"   first: std::string const & value\n"
		"\n"
		""},
	 { (char *)"pair_ss_first_get", _wrap_pair_ss_first_get, METH_VARARGS, (char *)"\n"
		"pair_ss_first_get(pair_ss self) -> string\n"
		"Parameters:\n"
		"   self: std::pair< std::string,std::string > * value\n"
		"   first: std::string const & value\n"
		"\n"
		"   self: std::pair< std::string,std::string > * value\n"
		"\n"
		""},
	 { (char *)"pair_ss_second_set", _wrap_pair_ss_second_set, METH_VARARGS, (char *)"\n"
		"pair_ss_second_set(pair_ss self, string second)\n"
		"Parameters:\n"
		"   self: std::pair< std::string,std::string > * value\n"
		"   second: std::string const & value\n"
		"\n"
		""},
	 { (char *)"pair_ss_second_get", _wrap_pair_ss_second_get, METH_VARARGS, (char *)"\n"
		"pair_ss_second_get(pair_ss self) -> string\n"
		"Parameters:\n"
		"   self: std::pair< std::string,std::string > * value\n"
		"   second: std::string const & value\n"
		"\n"
		"   self: std::pair< std::string,std::string > * value\n"
		"\n"
		""},
	 { (char *)"delete_pair_ss", _wrap_delete_pair_ss, METH_VARARGS, (char *)"\n"
		"delete_pair_ss(pair_ss self)\n"
		"Parameters:\n"
		"   self: std::pair< std::string,std::string > * value\n"
		"\n"
		""},
	 { (char *)"pair_ss_swigregister", pair_ss_swigregister, METH_VARARGS, NULL},
	 { (char *)"StrMap_iterator", _wrap_StrMap_iterator, METH_VARARGS, (char *)"\n"
		"StrMap_iterator(StrMap self) -> SwigPyIterator\n"
		"Parameters:\n"
		"   self: std::map< std::string,std::string > * value\n"
		"\n"
		""},
	 { (char *)"StrMap___nonzero__", _wrap_StrMap___nonzero__, METH_VARARGS, (char *)"\n"
		"StrMap___nonzero__(StrMap self) -> bool\n"
		"Parameters:\n"
		"   self: std::map< std::string,std::string > const * value\n"
		"\n"
		""},
	 { (char *)"StrMap___bool__", _wrap_StrMap___bool__, METH_VARARGS, (char *)"\n"
		"StrMap___bool__(StrMap self) -> bool\n"
		"Parameters:\n"
		"   self: std::map< std::string,std::string > const * value\n"
		"\n"
		""},
	 { (char *)"StrMap___len__", _wrap_StrMap___len__, METH_VARARGS, (char *)"\n"
		"StrMap___len__(StrMap self) -> size_type\n"
		"Parameters:\n"
		"   self: std::map< std::string,std::string > const * value\n"
		"\n"
		""},
	 { (char *)"StrMap___getitem__", _wrap_StrMap___getitem__, METH_VARARGS, (char *)"\n"
		"StrMap___getitem__(StrMap self, key_type key) -> mapped_type\n"
		"Parameters:\n"
		"   self: std::map< std::string,std::string > const * value\n"
		"   key: std::map< std::string,std::string >::key_type const & value\n"
		"\n"
		""},
	 { (char *)"StrMap___delitem__", _wrap_StrMap___delitem__, METH_VARARGS, (char *)"\n"
		"StrMap___delitem__(StrMap self, key_type key)\n"
		"Parameters:\n"
		"   self: std::map< std::string,std::string > * value\n"
		"   key: std::map< std::string,std::string >::key_type const & value\n"
		"\n"
		""},
	 { (char *)"StrMap_has_key", _wrap_StrMap_has_key, METH_VARARGS, (char *)"\n"
		"StrMap_has_key(StrMap self, key_type key) -> bool\n"
		"Parameters:\n"
		"   self: std::map< std::string,std::string > const * value\n"
		"   key: std::map< std::string,std::string >::key_type const & value\n"
		"\n"
		""},
	 { (char *)"StrMap_keys", _wrap_StrMap_keys, METH_VARARGS, (char *)"\n"
		"StrMap_keys(StrMap self) -> PyObject\n"
		"Parameters:\n"
		"   self: std::map< std::string,std::string > * value\n"
		"\n"
		""},
	 { (char *)"StrMap_values", _wrap_StrMap_values, METH_VARARGS, (char *)"\n"
		"StrMap_values(StrMap self) -> PyObject\n"
		"Parameters:\n"
		"   self: std::map< std::string,std::string > * value\n"
		"\n"
		""},
	 { (char *)"StrMap_items", _wrap_StrMap_items, METH_VARARGS, (char *)"\n"
		"StrMap_items(StrMap self) -> PyObject\n"
		"Parameters:\n"
		"   self: std::map< std::string,std::string > * value\n"
		"\n"
		""},
	 { (char *)"StrMap___contains__", _wrap_StrMap___contains__, METH_VARARGS, (char *)"\n"
		"StrMap___contains__(StrMap self, key_type key) -> bool\n"
		"Parameters:\n"
		"   self: std::map< std::string,std::string > * value\n"
		"   key: std::map< std::string,std::string >::key_type const & value\n"
		"\n"
		""},
	 { (char *)"StrMap_key_iterator", _wrap_StrMap_key_iterator, METH_VARARGS, (char *)"\n"
		"StrMap_key_iterator(StrMap self) -> SwigPyIterator\n"
		"Parameters:\n"
		"   self: std::map< std::string,std::string > * value\n"
		"\n"
		""},
	 { (char *)"StrMap_value_iterator", _wrap_StrMap_value_iterator, METH_VARARGS, (char *)"\n"
		"StrMap_value_iterator(StrMap self) -> SwigPyIterator\n"
		"Parameters:\n"
		"   self: std::map< std::string,std::string > * value\n"
		"\n"
		""},
	 { (char *)"StrMap___setitem__", _wrap_StrMap___setitem__, METH_VARARGS, (char *)"\n"
		"StrMap___setitem__(StrMap self, key_type key, mapped_type x)\n"
		"Parameters:\n"
		"   self: std::map< std::string,std::string > * value\n"
		"   key: std::map< std::string,std::string >::key_type const & value\n"
		"   x: std::map< std::string,std::string >::mapped_type const & value\n"
		"\n"
		""},
	 { (char *)"new_StrMap", _wrap_new_StrMap, METH_VARARGS, (char *)"\n"
		"StrMap(std::less<(std::string)> arg0)\n"
		"Parameters:\n"
		"   : std::less< std::string > const & value\n"
		"\n"
		"StrMap()\n"
		"new_StrMap(StrMap arg0) -> StrMap\n"
		"Parameters:\n"
		"   arg1: std::map< std::string,std::string > const & value\n"
		"\n"
		""},
	 { (char *)"StrMap_empty", _wrap_StrMap_empty, METH_VARARGS, (char *)"\n"
		"StrMap_empty(StrMap self) -> bool\n"
		"Parameters:\n"
		"   self: std::map< std::string,std::string > const * value\n"
		"\n"
		""},
	 { (char *)"StrMap_size", _wrap_StrMap_size, METH_VARARGS, (char *)"\n"
		"StrMap_size(StrMap self) -> size_type\n"
		"Parameters:\n"
		"   self: std::map< std::string,std::string > const * value\n"
		"\n"
		""},
	 { (char *)"StrMap_clear", _wrap_StrMap_clear, METH_VARARGS, (char *)"\n"
		"StrMap_clear(StrMap self)\n"
		"Parameters:\n"
		"   self: std::map< std::string,std::string > * value\n"
		"\n"
		""},
	 { (char *)"StrMap_swap", _wrap_StrMap_swap, METH_VARARGS, (char *)"\n"
		"StrMap_swap(StrMap self, StrMap v)\n"
		"Parameters:\n"
		"   self: std::map< std::string,std::string > * value\n"
		"   v: std::map< std::string,std::string > & value\n"
		"\n"
		""},
	 { (char *)"StrMap_get_allocator", _wrap_StrMap_get_allocator, METH_VARARGS, (char *)"\n"
		"StrMap_get_allocator(StrMap self) -> allocator_type\n"
		"Parameters:\n"
		"   self: std::map< std::string,std::string > const * value\n"
		"\n"
		""},
	 { (char *)"StrMap_begin", _wrap_StrMap_begin, METH_VARARGS, (char *)"\n"
		"StrMap_begin(StrMap self) -> const_iterator\n"
		"Parameters:\n"
		"   self: std::map< std::string,std::string > const * value\n"
		"\n"
		""},
	 { (char *)"StrMap_end", _wrap_StrMap_end, METH_VARARGS, (char *)"\n"
		"StrMap_end(StrMap self) -> const_iterator\n"
		"Parameters:\n"
		"   self: std::map< std::string,std::string > const * value\n"
		"\n"
		""},
	 { (char *)"StrMap_rbegin", _wrap_StrMap_rbegin, METH_VARARGS, (char *)"\n"
		"StrMap_rbegin(StrMap self) -> const_reverse_iterator\n"
		"Parameters:\n"
		"   self: std::map< std::string,std::string > const * value\n"
		"\n"
		""},
	 { (char *)"StrMap_rend", _wrap_StrMap_rend, METH_VARARGS, (char *)"\n"
		"StrMap_rend(StrMap self) -> const_reverse_iterator\n"
		"Parameters:\n"
		"   self: std::map< std::string,std::string > const * value\n"
		"\n"
		""},
	 { (char *)"StrMap_count", _wrap_StrMap_count, METH_VARARGS, (char *)"\n"
		"StrMap_count(StrMap self, key_type x) -> size_type\n"
		"Parameters:\n"
		"   self: std::map< std::string,std::string > const * value\n"
		"   x: std::map< std::string,std::string >::key_type const & value\n"
		"\n"
		""},
	 { (char *)"StrMap_erase", _wrap_StrMap_erase, METH_VARARGS, (char *)"\n"
		"erase(key_type x) -> size_type\n"
		"Parameters:\n"
		"   x: std::map< std::string,std::string >::key_type const & value\n"
		"\n"
		"erase(iterator position)\n"
		"Parameters:\n"
		"   position: std::map< std::string,std::string >::iterator value\n"
		"\n"
		"StrMap_erase(StrMap self, iterator first, iterator last)\n"
		"Parameters:\n"
		"   self: std::map< std::string,std::string > * value\n"
		"   first: std::map< std::string,std::string >::iterator value\n"
		"   last: std::map< std::string,std::string >::iterator value\n"
		"\n"
		""},
	 { (char *)"StrMap_find", _wrap_StrMap_find, METH_VARARGS, (char *)"\n"
		"StrMap_find(StrMap self, key_type x) -> iterator\n"
		"Parameters:\n"
		"   self: std::map< std::string,std::string > * value\n"
		"   x: std::map< std::string,std::string >::key_type const & value\n"
		"\n"
		""},
	 { (char *)"StrMap_lower_bound", _wrap_StrMap_lower_bound, METH_VARARGS, (char *)"\n"
		"StrMap_lower_bound(StrMap self, key_type x) -> iterator\n"
		"Parameters:\n"
		"   self: std::map< std::string,std::string > * value\n"
		"   x: std::map< std::string,std::string >::key_type const & value\n"
		"\n"
		""},
	 { (char *)"StrMap_upper_bound", _wrap_StrMap_upper_bound, METH_VARARGS, (char *)"\n"
		"StrMap_upper_bound(StrMap self, key_type x) -> iterator\n"
		"Parameters:\n"
		"   self: std::map< std::string,std::string > * value\n"
		"   x: std::map< std::string,std::string >::key_type const & value\n"
		"\n"
		""},
	 { (char *)"delete_StrMap", _wrap_delete_StrMap, METH_VARARGS, (char *)"\n"
		"delete_StrMap(StrMap self)\n"
		"Parameters:\n"
		"   self: std::map< std::string,std::string > * value\n"
		"\n"
		""},
	 { (char *)"StrMap_swigregister", StrMap_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_CMMError", _wrap_new_CMMError, METH_VARARGS, (char *)"\n"
		"CMMError(string msg, Code code = MMERR_GENERIC)\n"
		"Parameters:\n"
		"   msg: std::string const & value\n"
		"   code: CMMError::Code value\n"
		"\n"
		"CMMError(string msg)\n"
		"Parameters:\n"
		"   msg: std::string const & value\n"
		"\n"
		"CMMError(char msg, Code code = MMERR_GENERIC)\n"
		"Parameters:\n"
		"   msg: char const * value\n"
		"   code: CMMError::Code value\n"
		"\n"
		"CMMError(char msg)\n"
		"Parameters:\n"
		"   msg: char const * value\n"
		"\n"
		"CMMError(string msg, Code code, CMMError underlyingError)\n"
		"Parameters:\n"
		"   msg: std::string const & value\n"
		"   code: CMMError::Code value\n"
		"   underlyingError: CMMError const & value\n"
		"\n"
		"CMMError(char msg, Code code, CMMError underlyingError)\n"
		"Parameters:\n"
		"   msg: char const * value\n"
		"   code: CMMError::Code value\n"
		"   underlyingError: CMMError const & value\n"
		"\n"
		"CMMError(string msg, CMMError underlyingError)\n"
		"Parameters:\n"
		"   msg: std::string const & value\n"
		"   underlyingError: CMMError const & value\n"
		"\n"
		"CMMError(char msg, CMMError underlyingError)\n"
		"Parameters:\n"
		"   msg: char const * value\n"
		"   underlyingError: CMMError const & value\n"
		"\n"
		"new_CMMError(CMMError other) -> CMMError\n"
		"Parameters:\n"
		"   other: CMMError const & value\n"
		"\n"
		""},
	 { (char *)"delete_CMMError", _wrap_delete_CMMError, METH_VARARGS, (char *)"\n"
		"delete_CMMError(CMMError self)\n"
		"Parameters:\n"
		"   self: CMMError * value\n"
		"\n"
		""},
	 { (char *)"CMMError_what", _wrap_CMMError_what, METH_VARARGS, (char *)"\n"
		"CMMError_what(CMMError self) -> char\n"
		"Parameters:\n"
		"   self: CMMError const * value\n"
		"\n"
		""},
	 { (char *)"CMMError_getMsg", _wrap_CMMError_getMsg, METH_VARARGS, (char *)"\n"
		"CMMError_getMsg(CMMError self) -> string\n"
		"Parameters:\n"
		"   self: CMMError const * value\n"
		"\n"
		""},
	 { (char *)"CMMError_getFullMsg", _wrap_CMMError_getFullMsg, METH_VARARGS, (char *)"\n"
		"CMMError_getFullMsg(CMMError self) -> string\n"
		"Parameters:\n"
		"   self: CMMError const * value\n"
		"\n"
		""},
	 { (char *)"CMMError_getCode", _wrap_CMMError_getCode, METH_VARARGS, (char *)"\n"
		"CMMError_getCode(CMMError self) -> Code\n"
		"Parameters:\n"
		"   self: CMMError const * value\n"
		"\n"
		""},
	 { (char *)"CMMError_getSpecificCode", _wrap_CMMError_getSpecificCode, METH_VARARGS, (char *)"\n"
		"CMMError_getSpecificCode(CMMError self) -> Code\n"
		"Parameters:\n"
		"   self: CMMError const * value\n"
		"\n"
		""},
	 { (char *)"CMMError_getUnderlyingError", _wrap_CMMError_getUnderlyingError, METH_VARARGS, (char *)"\n"
		"CMMError_getUnderlyingError(CMMError self) -> CMMError\n"
		"Parameters:\n"
		"   self: CMMError const * value\n"
		"\n"
		""},
	 { (char *)"CMMError___getitem__", _wrap_CMMError___getitem__, METH_VARARGS, (char *)"\n"
		"CMMError___getitem__(CMMError self, int n) -> string\n"
		"Parameters:\n"
		"   self: CMMError * value\n"
		"   n: int value\n"
		"\n"
		""},
	 { (char *)"CMMError___str__", _wrap_CMMError___str__, METH_VARARGS, (char *)"\n"
		"CMMError___str__(CMMError self) -> string\n"
		"Parameters:\n"
		"   self: CMMError * value\n"
		"\n"
		""},
	 { (char *)"CMMError_swigregister", CMMError_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_PropertySetting", _wrap_new_PropertySetting, METH_VARARGS, (char *)"\n"
		"PropertySetting(char deviceLabel, char prop, char value, bool readOnly = False)\n"
		"Parameters:\n"
		"   deviceLabel: char const * value\n"
		"   prop: char const * value\n"
		"   value: char const * value\n"
		"   readOnly: bool value\n"
		"\n"
		"PropertySetting(char deviceLabel, char prop, char value)\n"
		"Parameters:\n"
		"   deviceLabel: char const * value\n"
		"   prop: char const * value\n"
		"   value: char const * value\n"
		"\n"
		"new_PropertySetting() -> PropertySetting\n"
		""},
	 { (char *)"delete_PropertySetting", _wrap_delete_PropertySetting, METH_VARARGS, (char *)"\n"
		"delete_PropertySetting(PropertySetting self)\n"
		"Parameters:\n"
		"   self: PropertySetting * value\n"
		"\n"
		""},
	 { (char *)"PropertySetting_getDeviceLabel", _wrap_PropertySetting_getDeviceLabel, METH_VARARGS, (char *)"\n"
		"PropertySetting_getDeviceLabel(PropertySetting self) -> string\n"
		"Parameters:\n"
		"   self: PropertySetting const * value\n"
		"\n"
		""},
	 { (char *)"PropertySetting_getPropertyName", _wrap_PropertySetting_getPropertyName, METH_VARARGS, (char *)"\n"
		"PropertySetting_getPropertyName(PropertySetting self) -> string\n"
		"Parameters:\n"
		"   self: PropertySetting const * value\n"
		"\n"
		""},
	 { (char *)"PropertySetting_getReadOnly", _wrap_PropertySetting_getReadOnly, METH_VARARGS, (char *)"\n"
		"PropertySetting_getReadOnly(PropertySetting self) -> bool\n"
		"Parameters:\n"
		"   self: PropertySetting const * value\n"
		"\n"
		""},
	 { (char *)"PropertySetting_getPropertyValue", _wrap_PropertySetting_getPropertyValue, METH_VARARGS, (char *)"\n"
		"PropertySetting_getPropertyValue(PropertySetting self) -> string\n"
		"Parameters:\n"
		"   self: PropertySetting const * value\n"
		"\n"
		""},
	 { (char *)"PropertySetting_getKey", _wrap_PropertySetting_getKey, METH_VARARGS, (char *)"\n"
		"PropertySetting_getKey(PropertySetting self) -> string\n"
		"Parameters:\n"
		"   self: PropertySetting const * value\n"
		"\n"
		""},
	 { (char *)"PropertySetting_generateKey", _wrap_PropertySetting_generateKey, METH_VARARGS, (char *)"\n"
		"PropertySetting_generateKey(char device, char prop) -> string\n"
		"Parameters:\n"
		"   device: char const * value\n"
		"   prop: char const * value\n"
		"\n"
		""},
	 { (char *)"PropertySetting_getVerbose", _wrap_PropertySetting_getVerbose, METH_VARARGS, (char *)"\n"
		"PropertySetting_getVerbose(PropertySetting self) -> string\n"
		"Parameters:\n"
		"   self: PropertySetting const * value\n"
		"\n"
		""},
	 { (char *)"PropertySetting_isEqualTo", _wrap_PropertySetting_isEqualTo, METH_VARARGS, (char *)"\n"
		"PropertySetting_isEqualTo(PropertySetting self, PropertySetting ps) -> bool\n"
		"Parameters:\n"
		"   self: PropertySetting * value\n"
		"   ps: PropertySetting const & value\n"
		"\n"
		""},
	 { (char *)"PropertySetting_swigregister", PropertySetting_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_PropertyPair", _wrap_new_PropertyPair, METH_VARARGS, (char *)"\n"
		"PropertyPair(char prop, char value)\n"
		"Parameters:\n"
		"   prop: char const * value\n"
		"   value: char const * value\n"
		"\n"
		"new_PropertyPair() -> PropertyPair\n"
		""},
	 { (char *)"delete_PropertyPair", _wrap_delete_PropertyPair, METH_VARARGS, (char *)"\n"
		"delete_PropertyPair(PropertyPair self)\n"
		"Parameters:\n"
		"   self: PropertyPair * value\n"
		"\n"
		""},
	 { (char *)"PropertyPair_getPropertyName", _wrap_PropertyPair_getPropertyName, METH_VARARGS, (char *)"\n"
		"PropertyPair_getPropertyName(PropertyPair self) -> string\n"
		"Parameters:\n"
		"   self: PropertyPair const * value\n"
		"\n"
		""},
	 { (char *)"PropertyPair_getPropertyValue", _wrap_PropertyPair_getPropertyValue, METH_VARARGS, (char *)"\n"
		"PropertyPair_getPropertyValue(PropertyPair self) -> string\n"
		"Parameters:\n"
		"   self: PropertyPair const * value\n"
		"\n"
		""},
	 { (char *)"PropertyPair_swigregister", PropertyPair_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_Configuration", _wrap_new_Configuration, METH_VARARGS, (char *)"new_Configuration() -> Configuration"},
	 { (char *)"delete_Configuration", _wrap_delete_Configuration, METH_VARARGS, (char *)"\n"
		"delete_Configuration(Configuration self)\n"
		"Parameters:\n"
		"   self: Configuration * value\n"
		"\n"
		""},
	 { (char *)"Configuration_addSetting", _wrap_Configuration_addSetting, METH_VARARGS, (char *)"\n"
		"Configuration_addSetting(Configuration self, PropertySetting setting)\n"
		"Parameters:\n"
		"   self: Configuration * value\n"
		"   setting: PropertySetting const & value\n"
		"\n"
		""},
	 { (char *)"Configuration_deleteSetting", _wrap_Configuration_deleteSetting, METH_VARARGS, (char *)"\n"
		"Configuration_deleteSetting(Configuration self, char device, char prop)\n"
		"Parameters:\n"
		"   self: Configuration * value\n"
		"   device: char const * value\n"
		"   prop: char const * value\n"
		"\n"
		""},
	 { (char *)"Configuration_isPropertyIncluded", _wrap_Configuration_isPropertyIncluded, METH_VARARGS, (char *)"\n"
		"Configuration_isPropertyIncluded(Configuration self, char device, char property) -> bool\n"
		"Parameters:\n"
		"   self: Configuration * value\n"
		"   device: char const * value\n"
		"   property: char const * value\n"
		"\n"
		""},
	 { (char *)"Configuration_isSettingIncluded", _wrap_Configuration_isSettingIncluded, METH_VARARGS, (char *)"\n"
		"Configuration_isSettingIncluded(Configuration self, PropertySetting ps) -> bool\n"
		"Parameters:\n"
		"   self: Configuration * value\n"
		"   ps: PropertySetting const & value\n"
		"\n"
		""},
	 { (char *)"Configuration_isConfigurationIncluded", _wrap_Configuration_isConfigurationIncluded, METH_VARARGS, (char *)"\n"
		"Configuration_isConfigurationIncluded(Configuration self, Configuration cfg) -> bool\n"
		"Parameters:\n"
		"   self: Configuration * value\n"
		"   cfg: Configuration const & value\n"
		"\n"
		""},
	 { (char *)"Configuration_getSetting", _wrap_Configuration_getSetting, METH_VARARGS, (char *)"\n"
		"getSetting(size_t index) -> PropertySetting\n"
		"Parameters:\n"
		"   index: size_t value\n"
		"\n"
		"Configuration_getSetting(Configuration self, char device, char prop) -> PropertySetting\n"
		"Parameters:\n"
		"   self: Configuration * value\n"
		"   device: char const * value\n"
		"   prop: char const * value\n"
		"\n"
		""},
	 { (char *)"Configuration_size", _wrap_Configuration_size, METH_VARARGS, (char *)"\n"
		"Configuration_size(Configuration self) -> size_t\n"
		"Parameters:\n"
		"   self: Configuration const * value\n"
		"\n"
		""},
	 { (char *)"Configuration_getVerbose", _wrap_Configuration_getVerbose, METH_VARARGS, (char *)"\n"
		"Configuration_getVerbose(Configuration self) -> string\n"
		"Parameters:\n"
		"   self: Configuration const * value\n"
		"\n"
		""},
	 { (char *)"Configuration_swigregister", Configuration_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_PropertyBlock", _wrap_new_PropertyBlock, METH_VARARGS, (char *)"new_PropertyBlock() -> PropertyBlock"},
	 { (char *)"delete_PropertyBlock", _wrap_delete_PropertyBlock, METH_VARARGS, (char *)"\n"
		"delete_PropertyBlock(PropertyBlock self)\n"
		"Parameters:\n"
		"   self: PropertyBlock * value\n"
		"\n"
		""},
	 { (char *)"PropertyBlock_addPair", _wrap_PropertyBlock_addPair, METH_VARARGS, (char *)"\n"
		"PropertyBlock_addPair(PropertyBlock self, PropertyPair pair)\n"
		"Parameters:\n"
		"   self: PropertyBlock * value\n"
		"   pair: PropertyPair const & value\n"
		"\n"
		""},
	 { (char *)"PropertyBlock_getPair", _wrap_PropertyBlock_getPair, METH_VARARGS, (char *)"\n"
		"PropertyBlock_getPair(PropertyBlock self, size_t index) -> PropertyPair\n"
		"Parameters:\n"
		"   self: PropertyBlock const * value\n"
		"   index: size_t value\n"
		"\n"
		""},
	 { (char *)"PropertyBlock_size", _wrap_PropertyBlock_size, METH_VARARGS, (char *)"\n"
		"PropertyBlock_size(PropertyBlock self) -> size_t\n"
		"Parameters:\n"
		"   self: PropertyBlock const * value\n"
		"\n"
		""},
	 { (char *)"PropertyBlock_getValue", _wrap_PropertyBlock_getValue, METH_VARARGS, (char *)"\n"
		"PropertyBlock_getValue(PropertyBlock self, char key) -> string\n"
		"Parameters:\n"
		"   self: PropertyBlock const * value\n"
		"   key: char const * value\n"
		"\n"
		""},
	 { (char *)"PropertyBlock_swigregister", PropertyBlock_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_CMMCore", _wrap_new_CMMCore, METH_VARARGS, (char *)"new_CMMCore() -> CMMCore"},
	 { (char *)"delete_CMMCore", _wrap_delete_CMMCore, METH_VARARGS, (char *)"\n"
		"delete_CMMCore(CMMCore self)\n"
		"Parameters:\n"
		"   self: CMMCore * value\n"
		"\n"
		""},
	 { (char *)"CMMCore_noop", _wrap_CMMCore_noop, METH_VARARGS, (char *)"CMMCore_noop()"},
	 { (char *)"CMMCore_loadDevice", _wrap_CMMCore_loadDevice, METH_VARARGS, (char *)"\n"
		"CMMCore_loadDevice(CMMCore self, char label, char moduleName, char deviceName)\n"
		"Parameters:\n"
		"   self: CMMCore * value\n"
		"   label: char const * value\n"
		"   moduleName: char const * value\n"
		"   deviceName: char const * value\n"
		"\n"
		""},
	 { (char *)"CMMCore_unloadDevice", _wrap_CMMCore_unloadDevice, METH_VARARGS, (char *)"\n"
		"CMMCore_unloadDevice(CMMCore self, char label)\n"
		"Parameters:\n"
		"   self: CMMCore * value\n"
		"   label: char const * value\n"
		"\n"
		""},
	 { (char *)"CMMCore_unloadAllDevices", _wrap_CMMCore_unloadAllDevices, METH_VARARGS, (char *)"\n"
		"CMMCore_unloadAllDevices(CMMCore self)\n"
		"Parameters:\n"
		"   self: CMMCore * value\n"
		"\n"
		""},
	 { (char *)"CMMCore_initializeAllDevices", _wrap_CMMCore_initializeAllDevices, METH_VARARGS, (char *)"\n"
		"CMMCore_initializeAllDevices(CMMCore self)\n"
		"Parameters:\n"
		"   self: CMMCore * value\n"
		"\n"
		""},
	 { (char *)"CMMCore_initializeDevice", _wrap_CMMCore_initializeDevice, METH_VARARGS, (char *)"\n"
		"CMMCore_initializeDevice(CMMCore self, char label)\n"
		"Parameters:\n"
		"   self: CMMCore * value\n"
		"   label: char const * value\n"
		"\n"
		""},
	 { (char *)"CMMCore_reset", _wrap_CMMCore_reset, METH_VARARGS, (char *)"\n"
		"CMMCore_reset(CMMCore self)\n"
		"Parameters:\n"
		"   self: CMMCore * value\n"
		"\n"
		""},
	 { (char *)"CMMCore_unloadLibrary", _wrap_CMMCore_unloadLibrary, METH_VARARGS, (char *)"\n"
		"CMMCore_unloadLibrary(CMMCore self, char moduleName)\n"
		"Parameters:\n"
		"   self: CMMCore * value\n"
		"   moduleName: char const * value\n"
		"\n"
		""},
	 { (char *)"CMMCore_updateCoreProperties", _wrap_CMMCore_updateCoreProperties, METH_VARARGS, (char *)"\n"
		"CMMCore_updateCoreProperties(CMMCore self)\n"
		"Parameters:\n"
		"   self: CMMCore * value\n"
		"\n"
		""},
	 { (char *)"CMMCore_getCoreErrorText", _wrap_CMMCore_getCoreErrorText, METH_VARARGS, (char *)"\n"
		"CMMCore_getCoreErrorText(CMMCore self, int code) -> string\n"
		"Parameters:\n"
		"   self: CMMCore const * value\n"
		"   code: int value\n"
		"\n"
		""},
	 { (char *)"CMMCore_getVersionInfo", _wrap_CMMCore_getVersionInfo, METH_VARARGS, (char *)"\n"
		"CMMCore_getVersionInfo(CMMCore self) -> string\n"
		"Parameters:\n"
		"   self: CMMCore const * value\n"
		"\n"
		""},
	 { (char *)"CMMCore_getAPIVersionInfo", _wrap_CMMCore_getAPIVersionInfo, METH_VARARGS, (char *)"\n"
		"CMMCore_getAPIVersionInfo(CMMCore self) -> string\n"
		"Parameters:\n"
		"   self: CMMCore const * value\n"
		"\n"
		""},
	 { (char *)"CMMCore_getSystemState", _wrap_CMMCore_getSystemState, METH_VARARGS, (char *)"\n"
		"CMMCore_getSystemState(CMMCore self) -> Configuration\n"
		"Parameters:\n"
		"   self: CMMCore * value\n"
		"\n"
		""},
	 { (char *)"CMMCore_setSystemState", _wrap_CMMCore_setSystemState, METH_VARARGS, (char *)"\n"
		"CMMCore_setSystemState(CMMCore self, Configuration conf)\n"
		"Parameters:\n"
		"   self: CMMCore * value\n"
		"   conf: Configuration const & value\n"
		"\n"
		""},
	 { (char *)"CMMCore_getConfigState", _wrap_CMMCore_getConfigState, METH_VARARGS, (char *)"\n"
		"CMMCore_getConfigState(CMMCore self, char group, char config) -> Configuration\n"
		"Parameters:\n"
		"   self: CMMCore * value\n"
		"   group: char const * value\n"
		"   config: char const * value\n"
		"\n"
		""},
	 { (char *)"CMMCore_getConfigGroupState", _wrap_CMMCore_getConfigGroupState, METH_VARARGS, (char *)"\n"
		"CMMCore_getConfigGroupState(CMMCore self, char group) -> Configuration\n"
		"Parameters:\n"
		"   self: CMMCore * value\n"
		"   group: char const * value\n"
		"\n"
		""},
	 { (char *)"CMMCore_saveSystemState", _wrap_CMMCore_saveSystemState, METH_VARARGS, (char *)"\n"
		"CMMCore_saveSystemState(CMMCore self, char fileName)\n"
		"Parameters:\n"
		"   self: CMMCore * value\n"
		"   fileName: char const * value\n"
		"\n"
		""},
	 { (char *)"CMMCore_loadSystemState", _wrap_CMMCore_loadSystemState, METH_VARARGS, (char *)"\n"
		"CMMCore_loadSystemState(CMMCore self, char fileName)\n"
		"Parameters:\n"
		"   self: CMMCore * value\n"
		"   fileName: char const * value\n"
		"\n"
		""},
	 { (char *)"CMMCore_saveSystemConfiguration", _wrap_CMMCore_saveSystemConfiguration, METH_VARARGS, (char *)"\n"
		"CMMCore_saveSystemConfiguration(CMMCore self, char fileName)\n"
		"Parameters:\n"
		"   self: CMMCore * value\n"
		"   fileName: char const * value\n"
		"\n"
		""},
	 { (char *)"CMMCore_loadSystemConfiguration", _wrap_CMMCore_loadSystemConfiguration, METH_VARARGS, (char *)"\n"
		"CMMCore_loadSystemConfiguration(CMMCore self, char fileName)\n"
		"Parameters:\n"
		"   self: CMMCore * value\n"
		"   fileName: char const * value\n"
		"\n"
		""},
	 { (char *)"CMMCore_registerCallback", _wrap_CMMCore_registerCallback, METH_VARARGS, (char *)"\n"
		"CMMCore_registerCallback(CMMCore self, MMEventCallback cb)\n"
		"Parameters:\n"
		"   self: CMMCore * value\n"
		"   cb: MMEventCallback * value\n"
		"\n"
		""},
	 { (char *)"CMMCore_setPrimaryLogFile", _wrap_CMMCore_setPrimaryLogFile, METH_VARARGS, (char *)"\n"
		"setPrimaryLogFile(char filename, bool truncate = False)\n"
		"Parameters:\n"
		"   filename: char const * value\n"
		"   truncate: bool value\n"
		"\n"
		"CMMCore_setPrimaryLogFile(CMMCore self, char filename)\n"
		"Parameters:\n"
		"   self: CMMCore * value\n"
		"   filename: char const * value\n"
		"\n"
		""},
	 { (char *)"CMMCore_getPrimaryLogFile", _wrap_CMMCore_getPrimaryLogFile, METH_VARARGS, (char *)"\n"
		"CMMCore_getPrimaryLogFile(CMMCore self) -> string\n"
		"Parameters:\n"
		"   self: CMMCore const * value\n"
		"\n"
		""},
	 { (char *)"CMMCore_logMessage", _wrap_CMMCore_logMessage, METH_VARARGS, (char *)"\n"
		"logMessage(char msg)\n"
		"Parameters:\n"
		"   msg: char const * value\n"
		"\n"
		"CMMCore_logMessage(CMMCore self, char msg, bool debugOnly)\n"
		"Parameters:\n"
		"   self: CMMCore * value\n"
		"   msg: char const * value\n"
		"   debugOnly: bool value\n"
		"\n"
		""},
	 { (char *)"CMMCore_enableDebugLog", _wrap_CMMCore_enableDebugLog, METH_VARARGS, (char *)"\n"
		"CMMCore_enableDebugLog(CMMCore self, bool enable)\n"
		"Parameters:\n"
		"   self: CMMCore * value\n"
		"   enable: bool value\n"
		"\n"
		""},
	 { (char *)"CMMCore_debugLogEnabled", _wrap_CMMCore_debugLogEnabled, METH_VARARGS, (char *)"\n"
		"CMMCore_debugLogEnabled(CMMCore self) -> bool\n"
		"Parameters:\n"
		"   self: CMMCore * value\n"
		"\n"
		""},
	 { (char *)"CMMCore_enableStderrLog", _wrap_CMMCore_enableStderrLog, METH_VARARGS, (char *)"\n"
		"CMMCore_enableStderrLog(CMMCore self, bool enable)\n"
		"Parameters:\n"
		"   self: CMMCore * value\n"
		"   enable: bool value\n"
		"\n"
		""},
	 { (char *)"CMMCore_stderrLogEnabled", _wrap_CMMCore_stderrLogEnabled, METH_VARARGS, (char *)"\n"
		"CMMCore_stderrLogEnabled(CMMCore self) -> bool\n"
		"Parameters:\n"
		"   self: CMMCore * value\n"
		"\n"
		""},
	 { (char *)"CMMCore_startSecondaryLogFile", _wrap_CMMCore_startSecondaryLogFile, METH_VARARGS, (char *)"\n"
		"startSecondaryLogFile(char filename, bool enableDebug, bool truncate = True, \n"
		"    bool synchronous = False) -> int\n"
		"Parameters:\n"
		"   filename: char const * value\n"
		"   enableDebug: bool value\n"
		"   truncate: bool value\n"
		"   synchronous: bool value\n"
		"\n"
		"startSecondaryLogFile(char filename, bool enableDebug, bool truncate = True) -> int\n"
		"Parameters:\n"
		"   filename: char const * value\n"
		"   enableDebug: bool value\n"
		"   truncate: bool value\n"
		"\n"
		"CMMCore_startSecondaryLogFile(CMMCore self, char filename, bool enableDebug) -> int\n"
		"Parameters:\n"
		"   self: CMMCore * value\n"
		"   filename: char const * value\n"
		"   enableDebug: bool value\n"
		"\n"
		""},
	 { (char *)"CMMCore_stopSecondaryLogFile", _wrap_CMMCore_stopSecondaryLogFile, METH_VARARGS, (char *)"\n"
		"CMMCore_stopSecondaryLogFile(CMMCore self, int handle)\n"
		"Parameters:\n"
		"   self: CMMCore * value\n"
		"   handle: int value\n"
		"\n"
		""},
	 { (char *)"CMMCore_getDeviceAdapterSearchPaths", _wrap_CMMCore_getDeviceAdapterSearchPaths, METH_VARARGS, (char *)"\n"
		"CMMCore_getDeviceAdapterSearchPaths(CMMCore self) -> StrVector\n"
		"Parameters:\n"
		"   self: CMMCore * value\n"
		"\n"
		""},
	 { (char *)"CMMCore_setDeviceAdapterSearchPaths", _wrap_CMMCore_setDeviceAdapterSearchPaths, METH_VARARGS, (char *)"\n"
		"CMMCore_setDeviceAdapterSearchPaths(CMMCore self, StrVector paths)\n"
		"Parameters:\n"
		"   self: CMMCore * value\n"
		"   paths: std::vector< std::string,std::allocator< std::string > > const & value\n"
		"\n"
		""},
	 { (char *)"CMMCore_addSearchPath", _wrap_CMMCore_addSearchPath, METH_VARARGS, (char *)"\n"
		"CMMCore_addSearchPath(char path)\n"
		"Parameters:\n"
		"   path: char const * value\n"
		"\n"
		""},
	 { (char *)"CMMCore_getDeviceAdapterNames", _wrap_CMMCore_getDeviceAdapterNames, METH_VARARGS, (char *)"\n"
		"CMMCore_getDeviceAdapterNames(CMMCore self) -> StrVector\n"
		"Parameters:\n"
		"   self: CMMCore * value\n"
		"\n"
		""},
	 { (char *)"CMMCore_getDeviceLibraries", _wrap_CMMCore_getDeviceLibraries, METH_VARARGS, (char *)"CMMCore_getDeviceLibraries() -> StrVector"},
	 { (char *)"CMMCore_getAvailableDevices", _wrap_CMMCore_getAvailableDevices, METH_VARARGS, (char *)"\n"
		"CMMCore_getAvailableDevices(CMMCore self, char library) -> StrVector\n"
		"Parameters:\n"
		"   self: CMMCore * value\n"
		"   library: char const * value\n"
		"\n"
		""},
	 { (char *)"CMMCore_getAvailableDeviceDescriptions", _wrap_CMMCore_getAvailableDeviceDescriptions, METH_VARARGS, (char *)"\n"
		"CMMCore_getAvailableDeviceDescriptions(CMMCore self, char library) -> StrVector\n"
		"Parameters:\n"
		"   self: CMMCore * value\n"
		"   library: char const * value\n"
		"\n"
		""},
	 { (char *)"CMMCore_getAvailableDeviceTypes", _wrap_CMMCore_getAvailableDeviceTypes, METH_VARARGS, (char *)"\n"
		"CMMCore_getAvailableDeviceTypes(CMMCore self, char library) -> LongVector\n"
		"Parameters:\n"
		"   self: CMMCore * value\n"
		"   library: char const * value\n"
		"\n"
		""},
	 { (char *)"CMMCore_getLoadedDevices", _wrap_CMMCore_getLoadedDevices, METH_VARARGS, (char *)"\n"
		"CMMCore_getLoadedDevices(CMMCore self) -> StrVector\n"
		"Parameters:\n"
		"   self: CMMCore const * value\n"
		"\n"
		""},
	 { (char *)"CMMCore_getLoadedDevicesOfType", _wrap_CMMCore_getLoadedDevicesOfType, METH_VARARGS, (char *)"\n"
		"CMMCore_getLoadedDevicesOfType(CMMCore self, DeviceType devType) -> StrVector\n"
		"Parameters:\n"
		"   self: CMMCore const * value\n"
		"   devType: enum MM::DeviceType value\n"
		"\n"
		""},
	 { (char *)"CMMCore_getDeviceType", _wrap_CMMCore_getDeviceType, METH_VARARGS, (char *)"\n"
		"CMMCore_getDeviceType(CMMCore self, char label) -> DeviceType\n"
		"Parameters:\n"
		"   self: CMMCore * value\n"
		"   label: char const * value\n"
		"\n"
		""},
	 { (char *)"CMMCore_getDeviceLibrary", _wrap_CMMCore_getDeviceLibrary, METH_VARARGS, (char *)"\n"
		"CMMCore_getDeviceLibrary(CMMCore self, char label) -> string\n"
		"Parameters:\n"
		"   self: CMMCore * value\n"
		"   label: char const * value\n"
		"\n"
		""},
	 { (char *)"CMMCore_getDeviceName", _wrap_CMMCore_getDeviceName, METH_VARARGS, (char *)"\n"
		"CMMCore_getDeviceName(CMMCore self, char label) -> string\n"
		"Parameters:\n"
		"   self: CMMCore * value\n"
		"   label: char const * value\n"
		"\n"
		""},
	 { (char *)"CMMCore_getDeviceDescription", _wrap_CMMCore_getDeviceDescription, METH_VARARGS, (char *)"\n"
		"CMMCore_getDeviceDescription(CMMCore self, char label) -> string\n"
		"Parameters:\n"
		"   self: CMMCore * value\n"
		"   label: char const * value\n"
		"\n"
		""},
	 { (char *)"CMMCore_getDevicePropertyNames", _wrap_CMMCore_getDevicePropertyNames, METH_VARARGS, (char *)"\n"
		"CMMCore_getDevicePropertyNames(CMMCore self, char label) -> StrVector\n"
		"Parameters:\n"
		"   self: CMMCore * value\n"
		"   label: char const * value\n"
		"\n"
		""},
	 { (char *)"CMMCore_hasProperty", _wrap_CMMCore_hasProperty, METH_VARARGS, (char *)"\n"
		"CMMCore_hasProperty(CMMCore self, char label, char propName) -> bool\n"
		"Parameters:\n"
		"   self: CMMCore * value\n"
		"   label: char const * value\n"
		"   propName: char const * value\n"
		"\n"
		""},
	 { (char *)"CMMCore_getProperty", _wrap_CMMCore_getProperty, METH_VARARGS, (char *)"\n"
		"CMMCore_getProperty(CMMCore self, char label, char propName) -> string\n"
		"Parameters:\n"
		"   self: CMMCore * value\n"
		"   label: char const * value\n"
		"   propName: char const * value\n"
		"\n"
		""},
	 { (char *)"CMMCore_setProperty", _wrap_CMMCore_setProperty, METH_VARARGS, (char *)"\n"
		"setProperty(char label, char propName, char propValue)\n"
		"Parameters:\n"
		"   label: char const * value\n"
		"   propName: char const * value\n"
		"   propValue: char const * value\n"
		"\n"
		"setProperty(char label, char propName, bool propValue)\n"
		"Parameters:\n"
		"   label: char const * value\n"
		"   propName: char const * value\n"
		"   propValue: bool const value\n"
		"\n"
		"setProperty(char label, char propName, long propValue)\n"
		"Parameters:\n"
		"   label: char const * value\n"
		"   propName: char const * value\n"
		"   propValue: long const value\n"
		"\n"
		"setProperty(char label, char propName, float propValue)\n"
		"Parameters:\n"
		"   label: char const * value\n"
		"   propName: char const * value\n"
		"   propValue: float const value\n"
		"\n"
		"CMMCore_setProperty(CMMCore self, char label, char propName, double propValue)\n"
		"Parameters:\n"
		"   self: CMMCore * value\n"
		"   label: char const * value\n"
		"   propName: char const * value\n"
		"   propValue: double const value\n"
		"\n"
		""},
	 { (char *)"CMMCore_getAllowedPropertyValues", _wrap_CMMCore_getAllowedPropertyValues, METH_VARARGS, (char *)"\n"
		"CMMCore_getAllowedPropertyValues(CMMCore self, char label, char propName) -> StrVector\n"
		"Parameters:\n"
		"   self: CMMCore * value\n"
		"   label: char const * value\n"
		"   propName: char const * value\n"
		"\n"
		""},
	 { (char *)"CMMCore_isPropertyReadOnly", _wrap_CMMCore_isPropertyReadOnly, METH_VARARGS, (char *)"\n"
		"CMMCore_isPropertyReadOnly(CMMCore self, char label, char propName) -> bool\n"
		"Parameters:\n"
		"   self: CMMCore * value\n"
		"   label: char const * value\n"
		"   propName: char const * value\n"
		"\n"
		""},
	 { (char *)"CMMCore_isPropertyPreInit", _wrap_CMMCore_isPropertyPreInit, METH_VARARGS, (char *)"\n"
		"CMMCore_isPropertyPreInit(CMMCore self, char label, char propName) -> bool\n"
		"Parameters:\n"
		"   self: CMMCore * value\n"
		"   label: char const * value\n"
		"   propName: char const * value\n"
		"\n"
		""},
	 { (char *)"CMMCore_isPropertySequenceable", _wrap_CMMCore_isPropertySequenceable, METH_VARARGS, (char *)"\n"
		"CMMCore_isPropertySequenceable(CMMCore self, char label, char propName) -> bool\n"
		"Parameters:\n"
		"   self: CMMCore * value\n"
		"   label: char const * value\n"
		"   propName: char const * value\n"
		"\n"
		""},
	 { (char *)"CMMCore_hasPropertyLimits", _wrap_CMMCore_hasPropertyLimits, METH_VARARGS, (char *)"\n"
		"CMMCore_hasPropertyLimits(CMMCore self, char label, char propName) -> bool\n"
		"Parameters:\n"
		"   self: CMMCore * value\n"
		"   label: char const * value\n"
		"   propName: char const * value\n"
		"\n"
		""},
	 { (char *)"CMMCore_getPropertyLowerLimit", _wrap_CMMCore_getPropertyLowerLimit, METH_VARARGS, (char *)"\n"
		"CMMCore_getPropertyLowerLimit(CMMCore self, char label, char propName) -> double\n"
		"Parameters:\n"
		"   self: CMMCore * value\n"
		"   label: char const * value\n"
		"   propName: char const * value\n"
		"\n"
		""},
	 { (char *)"CMMCore_getPropertyUpperLimit", _wrap_CMMCore_getPropertyUpperLimit, METH_VARARGS, (char *)"\n"
		"CMMCore_getPropertyUpperLimit(CMMCore self, char label, char propName) -> double\n"
		"Parameters:\n"
		"   self: CMMCore * value\n"
		"   label: char const * value\n"
		"   propName: char const * value\n"
		"\n"
		""},
	 { (char *)"CMMCore_getPropertyType", _wrap_CMMCore_getPropertyType, METH_VARARGS, (char *)"\n"
		"CMMCore_getPropertyType(CMMCore self, char label, char propName) -> PropertyType\n"
		"Parameters:\n"
		"   self: CMMCore * value\n"
		"   label: char const * value\n"
		"   propName: char const * value\n"
		"\n"
		""},
	 { (char *)"CMMCore_startPropertySequence", _wrap_CMMCore_startPropertySequence, METH_VARARGS, (char *)"\n"
		"CMMCore_startPropertySequence(CMMCore self, char label, char propName)\n"
		"Parameters:\n"
		"   self: CMMCore * value\n"
		"   label: char const * value\n"
		"   propName: char const * value\n"
		"\n"
		""},
	 { (char *)"CMMCore_stopPropertySequence", _wrap_CMMCore_stopPropertySequence, METH_VARARGS, (char *)"\n"
		"CMMCore_stopPropertySequence(CMMCore self, char label, char propName)\n"
		"Parameters:\n"
		"   self: CMMCore * value\n"
		"   label: char const * value\n"
		"   propName: char const * value\n"
		"\n"
		""},
	 { (char *)"CMMCore_getPropertySequenceMaxLength", _wrap_CMMCore_getPropertySequenceMaxLength, METH_VARARGS, (char *)"\n"
		"CMMCore_getPropertySequenceMaxLength(CMMCore self, char label, char propName) -> long\n"
		"Parameters:\n"
		"   self: CMMCore * value\n"
		"   label: char const * value\n"
		"   propName: char const * value\n"
		"\n"
		""},
	 { (char *)"CMMCore_loadPropertySequence", _wrap_CMMCore_loadPropertySequence, METH_VARARGS, (char *)"\n"
		"CMMCore_loadPropertySequence(CMMCore self, char label, char propName, StrVector eventSequence)\n"
		"Parameters:\n"
		"   self: CMMCore * value\n"
		"   label: char const * value\n"
		"   propName: char const * value\n"
		"   eventSequence: std::vector< std::string,std::allocator< std::string > > value\n"
		"\n"
		""},
	 { (char *)"CMMCore_deviceBusy", _wrap_CMMCore_deviceBusy, METH_VARARGS, (char *)"\n"
		"CMMCore_deviceBusy(CMMCore self, char label) -> bool\n"
		"Parameters:\n"
		"   self: CMMCore * value\n"
		"   label: char const * value\n"
		"\n"
		""},
	 { (char *)"CMMCore_waitForDevice", _wrap_CMMCore_waitForDevice, METH_VARARGS, (char *)"\n"
		"CMMCore_waitForDevice(CMMCore self, char label)\n"
		"Parameters:\n"
		"   self: CMMCore * value\n"
		"   label: char const * value\n"
		"\n"
		""},
	 { (char *)"CMMCore_waitForConfig", _wrap_CMMCore_waitForConfig, METH_VARARGS, (char *)"\n"
		"CMMCore_waitForConfig(CMMCore self, char group, char configName)\n"
		"Parameters:\n"
		"   self: CMMCore * value\n"
		"   group: char const * value\n"
		"   configName: char const * value\n"
		"\n"
		""},
	 { (char *)"CMMCore_systemBusy", _wrap_CMMCore_systemBusy, METH_VARARGS, (char *)"\n"
		"CMMCore_systemBusy(CMMCore self) -> bool\n"
		"Parameters:\n"
		"   self: CMMCore * value\n"
		"\n"
		""},
	 { (char *)"CMMCore_waitForSystem", _wrap_CMMCore_waitForSystem, METH_VARARGS, (char *)"\n"
		"CMMCore_waitForSystem(CMMCore self)\n"
		"Parameters:\n"
		"   self: CMMCore * value\n"
		"\n"
		""},
	 { (char *)"CMMCore_waitForImageSynchro", _wrap_CMMCore_waitForImageSynchro, METH_VARARGS, (char *)"\n"
		"CMMCore_waitForImageSynchro(CMMCore self)\n"
		"Parameters:\n"
		"   self: CMMCore * value\n"
		"\n"
		""},
	 { (char *)"CMMCore_deviceTypeBusy", _wrap_CMMCore_deviceTypeBusy, METH_VARARGS, (char *)"\n"
		"CMMCore_deviceTypeBusy(CMMCore self, DeviceType devType) -> bool\n"
		"Parameters:\n"
		"   self: CMMCore * value\n"
		"   devType: enum MM::DeviceType value\n"
		"\n"
		""},
	 { (char *)"CMMCore_waitForDeviceType", _wrap_CMMCore_waitForDeviceType, METH_VARARGS, (char *)"\n"
		"CMMCore_waitForDeviceType(CMMCore self, DeviceType devType)\n"
		"Parameters:\n"
		"   self: CMMCore * value\n"
		"   devType: enum MM::DeviceType value\n"
		"\n"
		""},
	 { (char *)"CMMCore_getDeviceDelayMs", _wrap_CMMCore_getDeviceDelayMs, METH_VARARGS, (char *)"\n"
		"CMMCore_getDeviceDelayMs(CMMCore self, char label) -> double\n"
		"Parameters:\n"
		"   self: CMMCore * value\n"
		"   label: char const * value\n"
		"\n"
		""},
	 { (char *)"CMMCore_setDeviceDelayMs", _wrap_CMMCore_setDeviceDelayMs, METH_VARARGS, (char *)"\n"
		"CMMCore_setDeviceDelayMs(CMMCore self, char label, double delayMs)\n"
		"Parameters:\n"
		"   self: CMMCore * value\n"
		"   label: char const * value\n"
		"   delayMs: double value\n"
		"\n"
		""},
	 { (char *)"CMMCore_usesDeviceDelay", _wrap_CMMCore_usesDeviceDelay, METH_VARARGS, (char *)"\n"
		"CMMCore_usesDeviceDelay(CMMCore self, char label) -> bool\n"
		"Parameters:\n"
		"   self: CMMCore * value\n"
		"   label: char const * value\n"
		"\n"
		""},
	 { (char *)"CMMCore_setTimeoutMs", _wrap_CMMCore_setTimeoutMs, METH_VARARGS, (char *)"\n"
		"CMMCore_setTimeoutMs(CMMCore self, long timeoutMs)\n"
		"Parameters:\n"
		"   self: CMMCore * value\n"
		"   timeoutMs: long value\n"
		"\n"
		""},
	 { (char *)"CMMCore_getTimeoutMs", _wrap_CMMCore_getTimeoutMs, METH_VARARGS, (char *)"\n"
		"CMMCore_getTimeoutMs(CMMCore self) -> long\n"
		"Parameters:\n"
		"   self: CMMCore * value\n"
		"\n"
		""},
	 { (char *)"CMMCore_sleep", _wrap_CMMCore_sleep, METH_VARARGS, (char *)"\n"
		"CMMCore_sleep(CMMCore self, double intervalMs)\n"
		"Parameters:\n"
		"   self: CMMCore const * value\n"
		"   intervalMs: double value\n"
		"\n"
		""},
	 { (char *)"CMMCore_getCameraDevice", _wrap_CMMCore_getCameraDevice, METH_VARARGS, (char *)"\n"
		"CMMCore_getCameraDevice(CMMCore self) -> string\n"
		"Parameters:\n"
		"   self: CMMCore * value\n"
		"\n"
		""},
	 { (char *)"CMMCore_getShutterDevice", _wrap_CMMCore_getShutterDevice, METH_VARARGS, (char *)"\n"
		"CMMCore_getShutterDevice(CMMCore self) -> string\n"
		"Parameters:\n"
		"   self: CMMCore * value\n"
		"\n"
		""},
	 { (char *)"CMMCore_getFocusDevice", _wrap_CMMCore_getFocusDevice, METH_VARARGS, (char *)"\n"
		"CMMCore_getFocusDevice(CMMCore self) -> string\n"
		"Parameters:\n"
		"   self: CMMCore * value\n"
		"\n"
		""},
	 { (char *)"CMMCore_getXYStageDevice", _wrap_CMMCore_getXYStageDevice, METH_VARARGS, (char *)"\n"
		"CMMCore_getXYStageDevice(CMMCore self) -> string\n"
		"Parameters:\n"
		"   self: CMMCore * value\n"
		"\n"
		""},
	 { (char *)"CMMCore_getAutoFocusDevice", _wrap_CMMCore_getAutoFocusDevice, METH_VARARGS, (char *)"\n"
		"CMMCore_getAutoFocusDevice(CMMCore self) -> string\n"
		"Parameters:\n"
		"   self: CMMCore * value\n"
		"\n"
		""},
	 { (char *)"CMMCore_getImageProcessorDevice", _wrap_CMMCore_getImageProcessorDevice, METH_VARARGS, (char *)"\n"
		"CMMCore_getImageProcessorDevice(CMMCore self) -> string\n"
		"Parameters:\n"
		"   self: CMMCore * value\n"
		"\n"
		""},
	 { (char *)"CMMCore_getSLMDevice", _wrap_CMMCore_getSLMDevice, METH_VARARGS, (char *)"\n"
		"CMMCore_getSLMDevice(CMMCore self) -> string\n"
		"Parameters:\n"
		"   self: CMMCore * value\n"
		"\n"
		""},
	 { (char *)"CMMCore_getGalvoDevice", _wrap_CMMCore_getGalvoDevice, METH_VARARGS, (char *)"\n"
		"CMMCore_getGalvoDevice(CMMCore self) -> string\n"
		"Parameters:\n"
		"   self: CMMCore * value\n"
		"\n"
		""},
	 { (char *)"CMMCore_getChannelGroup", _wrap_CMMCore_getChannelGroup, METH_VARARGS, (char *)"\n"
		"CMMCore_getChannelGroup(CMMCore self) -> string\n"
		"Parameters:\n"
		"   self: CMMCore * value\n"
		"\n"
		""},
	 { (char *)"CMMCore_setCameraDevice", _wrap_CMMCore_setCameraDevice, METH_VARARGS, (char *)"\n"
		"CMMCore_setCameraDevice(CMMCore self, char cameraLabel)\n"
		"Parameters:\n"
		"   self: CMMCore * value\n"
		"   cameraLabel: char const * value\n"
		"\n"
		""},
	 { (char *)"CMMCore_setShutterDevice", _wrap_CMMCore_setShutterDevice, METH_VARARGS, (char *)"\n"
		"CMMCore_setShutterDevice(CMMCore self, char shutterLabel)\n"
		"Parameters:\n"
		"   self: CMMCore * value\n"
		"   shutterLabel: char const * value\n"
		"\n"
		""},
	 { (char *)"CMMCore_setFocusDevice", _wrap_CMMCore_setFocusDevice, METH_VARARGS, (char *)"\n"
		"CMMCore_setFocusDevice(CMMCore self, char focusLabel)\n"
		"Parameters:\n"
		"   self: CMMCore * value\n"
		"   focusLabel: char const * value\n"
		"\n"
		""},
	 { (char *)"CMMCore_setXYStageDevice", _wrap_CMMCore_setXYStageDevice, METH_VARARGS, (char *)"\n"
		"CMMCore_setXYStageDevice(CMMCore self, char xyStageLabel)\n"
		"Parameters:\n"
		"   self: CMMCore * value\n"
		"   xyStageLabel: char const * value\n"
		"\n"
		""},
	 { (char *)"CMMCore_setAutoFocusDevice", _wrap_CMMCore_setAutoFocusDevice, METH_VARARGS, (char *)"\n"
		"CMMCore_setAutoFocusDevice(CMMCore self, char focusLabel)\n"
		"Parameters:\n"
		"   self: CMMCore * value\n"
		"   focusLabel: char const * value\n"
		"\n"
		""},
	 { (char *)"CMMCore_setImageProcessorDevice", _wrap_CMMCore_setImageProcessorDevice, METH_VARARGS, (char *)"\n"
		"CMMCore_setImageProcessorDevice(CMMCore self, char procLabel)\n"
		"Parameters:\n"
		"   self: CMMCore * value\n"
		"   procLabel: char const * value\n"
		"\n"
		""},
	 { (char *)"CMMCore_setSLMDevice", _wrap_CMMCore_setSLMDevice, METH_VARARGS, (char *)"\n"
		"CMMCore_setSLMDevice(CMMCore self, char slmLabel)\n"
		"Parameters:\n"
		"   self: CMMCore * value\n"
		"   slmLabel: char const * value\n"
		"\n"
		""},
	 { (char *)"CMMCore_setGalvoDevice", _wrap_CMMCore_setGalvoDevice, METH_VARARGS, (char *)"\n"
		"CMMCore_setGalvoDevice(CMMCore self, char galvoLabel)\n"
		"Parameters:\n"
		"   self: CMMCore * value\n"
		"   galvoLabel: char const * value\n"
		"\n"
		""},
	 { (char *)"CMMCore_setChannelGroup", _wrap_CMMCore_setChannelGroup, METH_VARARGS, (char *)"\n"
		"CMMCore_setChannelGroup(CMMCore self, char channelGroup)\n"
		"Parameters:\n"
		"   self: CMMCore * value\n"
		"   channelGroup: char const * value\n"
		"\n"
		""},
	 { (char *)"CMMCore_getSystemStateCache", _wrap_CMMCore_getSystemStateCache, METH_VARARGS, (char *)"\n"
		"CMMCore_getSystemStateCache(CMMCore self) -> Configuration\n"
		"Parameters:\n"
		"   self: CMMCore const * value\n"
		"\n"
		""},
	 { (char *)"CMMCore_updateSystemStateCache", _wrap_CMMCore_updateSystemStateCache, METH_VARARGS, (char *)"\n"
		"CMMCore_updateSystemStateCache(CMMCore self)\n"
		"Parameters:\n"
		"   self: CMMCore * value\n"
		"\n"
		""},
	 { (char *)"CMMCore_getPropertyFromCache", _wrap_CMMCore_getPropertyFromCache, METH_VARARGS, (char *)"\n"
		"CMMCore_getPropertyFromCache(CMMCore self, char deviceLabel, char propName) -> string\n"
		"Parameters:\n"
		"   self: CMMCore const * value\n"
		"   deviceLabel: char const * value\n"
		"   propName: char const * value\n"
		"\n"
		""},
	 { (char *)"CMMCore_getCurrentConfigFromCache", _wrap_CMMCore_getCurrentConfigFromCache, METH_VARARGS, (char *)"\n"
		"CMMCore_getCurrentConfigFromCache(CMMCore self, char groupName) -> string\n"
		"Parameters:\n"
		"   self: CMMCore * value\n"
		"   groupName: char const * value\n"
		"\n"
		""},
	 { (char *)"CMMCore_getConfigGroupStateFromCache", _wrap_CMMCore_getConfigGroupStateFromCache, METH_VARARGS, (char *)"\n"
		"CMMCore_getConfigGroupStateFromCache(CMMCore self, char group) -> Configuration\n"
		"Parameters:\n"
		"   self: CMMCore * value\n"
		"   group: char const * value\n"
		"\n"
		""},
	 { (char *)"CMMCore_defineConfig", _wrap_CMMCore_defineConfig, METH_VARARGS, (char *)"\n"
		"defineConfig(char groupName, char configName)\n"
		"Parameters:\n"
		"   groupName: char const * value\n"
		"   configName: char const * value\n"
		"\n"
		"CMMCore_defineConfig(CMMCore self, char groupName, char configName, char deviceLabel, \n"
		"    char propName, char value)\n"
		"Parameters:\n"
		"   self: CMMCore * value\n"
		"   groupName: char const * value\n"
		"   configName: char const * value\n"
		"   deviceLabel: char const * value\n"
		"   propName: char const * value\n"
		"   value: char const * value\n"
		"\n"
		""},
	 { (char *)"CMMCore_defineConfigGroup", _wrap_CMMCore_defineConfigGroup, METH_VARARGS, (char *)"\n"
		"CMMCore_defineConfigGroup(CMMCore self, char groupName)\n"
		"Parameters:\n"
		"   self: CMMCore * value\n"
		"   groupName: char const * value\n"
		"\n"
		""},
	 { (char *)"CMMCore_deleteConfigGroup", _wrap_CMMCore_deleteConfigGroup, METH_VARARGS, (char *)"\n"
		"CMMCore_deleteConfigGroup(CMMCore self, char groupName)\n"
		"Parameters:\n"
		"   self: CMMCore * value\n"
		"   groupName: char const * value\n"
		"\n"
		""},
	 { (char *)"CMMCore_renameConfigGroup", _wrap_CMMCore_renameConfigGroup, METH_VARARGS, (char *)"\n"
		"CMMCore_renameConfigGroup(CMMCore self, char oldGroupName, char newGroupName)\n"
		"Parameters:\n"
		"   self: CMMCore * value\n"
		"   oldGroupName: char const * value\n"
		"   newGroupName: char const * value\n"
		"\n"
		""},
	 { (char *)"CMMCore_isGroupDefined", _wrap_CMMCore_isGroupDefined, METH_VARARGS, (char *)"\n"
		"CMMCore_isGroupDefined(CMMCore self, char groupName) -> bool\n"
		"Parameters:\n"
		"   self: CMMCore * value\n"
		"   groupName: char const * value\n"
		"\n"
		""},
	 { (char *)"CMMCore_isConfigDefined", _wrap_CMMCore_isConfigDefined, METH_VARARGS, (char *)"\n"
		"CMMCore_isConfigDefined(CMMCore self, char groupName, char configName) -> bool\n"
		"Parameters:\n"
		"   self: CMMCore * value\n"
		"   groupName: char const * value\n"
		"   configName: char const * value\n"
		"\n"
		""},
	 { (char *)"CMMCore_setConfig", _wrap_CMMCore_setConfig, METH_VARARGS, (char *)"\n"
		"CMMCore_setConfig(CMMCore self, char groupName, char configName)\n"
		"Parameters:\n"
		"   self: CMMCore * value\n"
		"   groupName: char const * value\n"
		"   configName: char const * value\n"
		"\n"
		""},
	 { (char *)"CMMCore_deleteConfig", _wrap_CMMCore_deleteConfig, METH_VARARGS, (char *)"\n"
		"deleteConfig(char groupName, char configName)\n"
		"Parameters:\n"
		"   groupName: char const * value\n"
		"   configName: char const * value\n"
		"\n"
		"CMMCore_deleteConfig(CMMCore self, char groupName, char configName, char deviceLabel, \n"
		"    char propName)\n"
		"Parameters:\n"
		"   self: CMMCore * value\n"
		"   groupName: char const * value\n"
		"   configName: char const * value\n"
		"   deviceLabel: char const * value\n"
		"   propName: char const * value\n"
		"\n"
		""},
	 { (char *)"CMMCore_renameConfig", _wrap_CMMCore_renameConfig, METH_VARARGS, (char *)"\n"
		"CMMCore_renameConfig(CMMCore self, char groupName, char oldConfigName, char newConfigName)\n"
		"Parameters:\n"
		"   self: CMMCore * value\n"
		"   groupName: char const * value\n"
		"   oldConfigName: char const * value\n"
		"   newConfigName: char const * value\n"
		"\n"
		""},
	 { (char *)"CMMCore_getAvailableConfigGroups", _wrap_CMMCore_getAvailableConfigGroups, METH_VARARGS, (char *)"\n"
		"CMMCore_getAvailableConfigGroups(CMMCore self) -> StrVector\n"
		"Parameters:\n"
		"   self: CMMCore const * value\n"
		"\n"
		""},
	 { (char *)"CMMCore_getAvailableConfigs", _wrap_CMMCore_getAvailableConfigs, METH_VARARGS, (char *)"\n"
		"CMMCore_getAvailableConfigs(CMMCore self, char configGroup) -> StrVector\n"
		"Parameters:\n"
		"   self: CMMCore const * value\n"
		"   configGroup: char const * value\n"
		"\n"
		""},
	 { (char *)"CMMCore_getCurrentConfig", _wrap_CMMCore_getCurrentConfig, METH_VARARGS, (char *)"\n"
		"CMMCore_getCurrentConfig(CMMCore self, char groupName) -> string\n"
		"Parameters:\n"
		"   self: CMMCore * value\n"
		"   groupName: char const * value\n"
		"\n"
		""},
	 { (char *)"CMMCore_getConfigData", _wrap_CMMCore_getConfigData, METH_VARARGS, (char *)"\n"
		"CMMCore_getConfigData(CMMCore self, char configGroup, char configName) -> Configuration\n"
		"Parameters:\n"
		"   self: CMMCore * value\n"
		"   configGroup: char const * value\n"
		"   configName: char const * value\n"
		"\n"
		""},
	 { (char *)"CMMCore_getCurrentPixelSizeConfig", _wrap_CMMCore_getCurrentPixelSizeConfig, METH_VARARGS, (char *)"\n"
		"getCurrentPixelSizeConfig() -> string\n"
		"CMMCore_getCurrentPixelSizeConfig(CMMCore self, bool cached) -> string\n"
		"Parameters:\n"
		"   self: CMMCore * value\n"
		"   cached: bool value\n"
		"\n"
		""},
	 { (char *)"CMMCore_getPixelSizeUm", _wrap_CMMCore_getPixelSizeUm, METH_VARARGS, (char *)"\n"
		"getPixelSizeUm() -> double\n"
		"CMMCore_getPixelSizeUm(CMMCore self, bool cached) -> double\n"
		"Parameters:\n"
		"   self: CMMCore * value\n"
		"   cached: bool value\n"
		"\n"
		""},
	 { (char *)"CMMCore_getPixelSizeUmByID", _wrap_CMMCore_getPixelSizeUmByID, METH_VARARGS, (char *)"\n"
		"CMMCore_getPixelSizeUmByID(CMMCore self, char resolutionID) -> double\n"
		"Parameters:\n"
		"   self: CMMCore * value\n"
		"   resolutionID: char const * value\n"
		"\n"
		""},
	 { (char *)"CMMCore_getPixelSizeAffine", _wrap_CMMCore_getPixelSizeAffine, METH_VARARGS, (char *)"\n"
		"getPixelSizeAffine() -> DoubleVector\n"
		"CMMCore_getPixelSizeAffine(CMMCore self, bool cached) -> DoubleVector\n"
		"Parameters:\n"
		"   self: CMMCore * value\n"
		"   cached: bool value\n"
		"\n"
		""},
	 { (char *)"CMMCore_getPixelSizeAffineByID", _wrap_CMMCore_getPixelSizeAffineByID, METH_VARARGS, (char *)"\n"
		"CMMCore_getPixelSizeAffineByID(CMMCore self, char resolutionID) -> DoubleVector\n"
		"Parameters:\n"
		"   self: CMMCore * value\n"
		"   resolutionID: char const * value\n"
		"\n"
		""},
	 { (char *)"CMMCore_getMagnificationFactor", _wrap_CMMCore_getMagnificationFactor, METH_VARARGS, (char *)"\n"
		"CMMCore_getMagnificationFactor(CMMCore self) -> double\n"
		"Parameters:\n"
		"   self: CMMCore const * value\n"
		"\n"
		""},
	 { (char *)"CMMCore_setPixelSizeUm", _wrap_CMMCore_setPixelSizeUm, METH_VARARGS, (char *)"\n"
		"CMMCore_setPixelSizeUm(CMMCore self, char resolutionID, double pixSize)\n"
		"Parameters:\n"
		"   self: CMMCore * value\n"
		"   resolutionID: char const * value\n"
		"   pixSize: double value\n"
		"\n"
		""},
	 { (char *)"CMMCore_setPixelSizeAffine", _wrap_CMMCore_setPixelSizeAffine, METH_VARARGS, (char *)"\n"
		"CMMCore_setPixelSizeAffine(CMMCore self, char resolutionID, DoubleVector affine)\n"
		"Parameters:\n"
		"   self: CMMCore * value\n"
		"   resolutionID: char const * value\n"
		"   affine: std::vector< double,std::allocator< double > > value\n"
		"\n"
		""},
	 { (char *)"CMMCore_definePixelSizeConfig", _wrap_CMMCore_definePixelSizeConfig, METH_VARARGS, (char *)"\n"
		"definePixelSizeConfig(char resolutionID, char deviceLabel, char propName, \n"
		"    char value)\n"
		"Parameters:\n"
		"   resolutionID: char const * value\n"
		"   deviceLabel: char const * value\n"
		"   propName: char const * value\n"
		"   value: char const * value\n"
		"\n"
		"CMMCore_definePixelSizeConfig(CMMCore self, char resolutionID)\n"
		"Parameters:\n"
		"   self: CMMCore * value\n"
		"   resolutionID: char const * value\n"
		"\n"
		""},
	 { (char *)"CMMCore_getAvailablePixelSizeConfigs", _wrap_CMMCore_getAvailablePixelSizeConfigs, METH_VARARGS, (char *)"\n"
		"CMMCore_getAvailablePixelSizeConfigs(CMMCore self) -> StrVector\n"
		"Parameters:\n"
		"   self: CMMCore const * value\n"
		"\n"
		""},
	 { (char *)"CMMCore_isPixelSizeConfigDefined", _wrap_CMMCore_isPixelSizeConfigDefined, METH_VARARGS, (char *)"\n"
		"CMMCore_isPixelSizeConfigDefined(CMMCore self, char resolutionID) -> bool\n"
		"Parameters:\n"
		"   self: CMMCore const * value\n"
		"   resolutionID: char const * value\n"
		"\n"
		""},
	 { (char *)"CMMCore_setPixelSizeConfig", _wrap_CMMCore_setPixelSizeConfig, METH_VARARGS, (char *)"\n"
		"CMMCore_setPixelSizeConfig(CMMCore self, char resolutionID)\n"
		"Parameters:\n"
		"   self: CMMCore * value\n"
		"   resolutionID: char const * value\n"
		"\n"
		""},
	 { (char *)"CMMCore_renamePixelSizeConfig", _wrap_CMMCore_renamePixelSizeConfig, METH_VARARGS, (char *)"\n"
		"CMMCore_renamePixelSizeConfig(CMMCore self, char oldConfigName, char newConfigName)\n"
		"Parameters:\n"
		"   self: CMMCore * value\n"
		"   oldConfigName: char const * value\n"
		"   newConfigName: char const * value\n"
		"\n"
		""},
	 { (char *)"CMMCore_deletePixelSizeConfig", _wrap_CMMCore_deletePixelSizeConfig, METH_VARARGS, (char *)"\n"
		"CMMCore_deletePixelSizeConfig(CMMCore self, char configName)\n"
		"Parameters:\n"
		"   self: CMMCore * value\n"
		"   configName: char const * value\n"
		"\n"
		""},
	 { (char *)"CMMCore_getPixelSizeConfigData", _wrap_CMMCore_getPixelSizeConfigData, METH_VARARGS, (char *)"\n"
		"CMMCore_getPixelSizeConfigData(CMMCore self, char configName) -> Configuration\n"
		"Parameters:\n"
		"   self: CMMCore * value\n"
		"   configName: char const * value\n"
		"\n"
		""},
	 { (char *)"CMMCore_definePropertyBlock", _wrap_CMMCore_definePropertyBlock, METH_VARARGS, (char *)"\n"
		"CMMCore_definePropertyBlock(CMMCore self, char blockName, char propertyName, char propertyValue)\n"
		"Parameters:\n"
		"   self: CMMCore * value\n"
		"   blockName: char const * value\n"
		"   propertyName: char const * value\n"
		"   propertyValue: char const * value\n"
		"\n"
		""},
	 { (char *)"CMMCore_getAvailablePropertyBlocks", _wrap_CMMCore_getAvailablePropertyBlocks, METH_VARARGS, (char *)"\n"
		"CMMCore_getAvailablePropertyBlocks(CMMCore self) -> StrVector\n"
		"Parameters:\n"
		"   self: CMMCore const * value\n"
		"\n"
		""},
	 { (char *)"CMMCore_getPropertyBlockData", _wrap_CMMCore_getPropertyBlockData, METH_VARARGS, (char *)"\n"
		"CMMCore_getPropertyBlockData(CMMCore self, char blockName) -> PropertyBlock\n"
		"Parameters:\n"
		"   self: CMMCore * value\n"
		"   blockName: char const * value\n"
		"\n"
		""},
	 { (char *)"CMMCore_setROI", _wrap_CMMCore_setROI, METH_VARARGS, (char *)"\n"
		"setROI(int x, int y, int xSize, int ySize)\n"
		"Parameters:\n"
		"   x: int value\n"
		"   y: int value\n"
		"   xSize: int value\n"
		"   ySize: int value\n"
		"\n"
		"CMMCore_setROI(CMMCore self, char label, int x, int y, int xSize, \n"
		"    int ySize)\n"
		"Parameters:\n"
		"   self: CMMCore * value\n"
		"   label: char const * value\n"
		"   x: int value\n"
		"   y: int value\n"
		"   xSize: int value\n"
		"   ySize: int value\n"
		"\n"
		""},
	 { (char *)"CMMCore_getROI", _wrap_CMMCore_getROI, METH_VARARGS, (char *)"\n"
		"getROI()\n"
		"CMMCore_getROI(CMMCore self, char label)\n"
		"Parameters:\n"
		"   self: CMMCore * value\n"
		"   label: char const * value\n"
		"\n"
		""},
	 { (char *)"CMMCore_clearROI", _wrap_CMMCore_clearROI, METH_VARARGS, (char *)"\n"
		"CMMCore_clearROI(CMMCore self)\n"
		"Parameters:\n"
		"   self: CMMCore * value\n"
		"\n"
		""},
	 { (char *)"CMMCore_isMultiROISupported", _wrap_CMMCore_isMultiROISupported, METH_VARARGS, (char *)"\n"
		"CMMCore_isMultiROISupported(CMMCore self) -> bool\n"
		"Parameters:\n"
		"   self: CMMCore * value\n"
		"\n"
		""},
	 { (char *)"CMMCore_isMultiROIEnabled", _wrap_CMMCore_isMultiROIEnabled, METH_VARARGS, (char *)"\n"
		"CMMCore_isMultiROIEnabled(CMMCore self) -> bool\n"
		"Parameters:\n"
		"   self: CMMCore * value\n"
		"\n"
		""},
	 { (char *)"CMMCore_setMultiROI", _wrap_CMMCore_setMultiROI, METH_VARARGS, (char *)"\n"
		"CMMCore_setMultiROI(CMMCore self, std::vector<(unsigned int,std::allocator<(unsigned int)>)> xs, \n"
		"    std::vector<(unsigned int,std::allocator<(unsigned int)>)> ys, \n"
		"    std::vector<(unsigned int,std::allocator<(unsigned int)>)> widths, \n"
		"    std::vector<(unsigned int,std::allocator<(unsigned int)>)> heights)\n"
		"Parameters:\n"
		"   self: CMMCore * value\n"
		"   xs: std::vector< unsigned int,std::allocator< unsigned int > > value\n"
		"   ys: std::vector< unsigned int,std::allocator< unsigned int > > value\n"
		"   widths: std::vector< unsigned int,std::allocator< unsigned int > > value\n"
		"   heights: std::vector< unsigned int,std::allocator< unsigned int > > value\n"
		"\n"
		""},
	 { (char *)"CMMCore_getMultiROI", _wrap_CMMCore_getMultiROI, METH_VARARGS, (char *)"\n"
		"CMMCore_getMultiROI(CMMCore self, std::vector<(unsigned int,std::allocator<(unsigned int)>)> xs, \n"
		"    std::vector<(unsigned int,std::allocator<(unsigned int)>)> ys, \n"
		"    std::vector<(unsigned int,std::allocator<(unsigned int)>)> widths, \n"
		"    std::vector<(unsigned int,std::allocator<(unsigned int)>)> heights)\n"
		"Parameters:\n"
		"   self: CMMCore * value\n"
		"   xs: std::vector< unsigned int,std::allocator< unsigned int > > & value\n"
		"   ys: std::vector< unsigned int,std::allocator< unsigned int > > & value\n"
		"   widths: std::vector< unsigned int,std::allocator< unsigned int > > & value\n"
		"   heights: std::vector< unsigned int,std::allocator< unsigned int > > & value\n"
		"\n"
		""},
	 { (char *)"CMMCore_setExposure", _wrap_CMMCore_setExposure, METH_VARARGS, (char *)"\n"
		"setExposure(double exp)\n"
		"Parameters:\n"
		"   exp: double value\n"
		"\n"
		"CMMCore_setExposure(CMMCore self, char cameraLabel, double dExp)\n"
		"Parameters:\n"
		"   self: CMMCore * value\n"
		"   cameraLabel: char const * value\n"
		"   dExp: double value\n"
		"\n"
		""},
	 { (char *)"CMMCore_getExposure", _wrap_CMMCore_getExposure, METH_VARARGS, (char *)"\n"
		"getExposure() -> double\n"
		"CMMCore_getExposure(CMMCore self, char label) -> double\n"
		"Parameters:\n"
		"   self: CMMCore * value\n"
		"   label: char const * value\n"
		"\n"
		""},
	 { (char *)"CMMCore_snapImage", _wrap_CMMCore_snapImage, METH_VARARGS, (char *)"\n"
		"CMMCore_snapImage(CMMCore self)\n"
		"Parameters:\n"
		"   self: CMMCore * value\n"
		"\n"
		""},
	 { (char *)"CMMCore_getImage", _wrap_CMMCore_getImage, METH_VARARGS, (char *)"\n"
		"getImage()\n"
		"CMMCore_getImage(CMMCore self, unsigned int numChannel) -> void\n"
		"Parameters:\n"
		"   self: CMMCore * value\n"
		"   numChannel: unsigned int value\n"
		"\n"
		""},
	 { (char *)"CMMCore_getImageWidth", _wrap_CMMCore_getImageWidth, METH_VARARGS, (char *)"\n"
		"CMMCore_getImageWidth(CMMCore self) -> unsigned int\n"
		"Parameters:\n"
		"   self: CMMCore * value\n"
		"\n"
		""},
	 { (char *)"CMMCore_getImageHeight", _wrap_CMMCore_getImageHeight, METH_VARARGS, (char *)"\n"
		"CMMCore_getImageHeight(CMMCore self) -> unsigned int\n"
		"Parameters:\n"
		"   self: CMMCore * value\n"
		"\n"
		""},
	 { (char *)"CMMCore_getBytesPerPixel", _wrap_CMMCore_getBytesPerPixel, METH_VARARGS, (char *)"\n"
		"CMMCore_getBytesPerPixel(CMMCore self) -> unsigned int\n"
		"Parameters:\n"
		"   self: CMMCore * value\n"
		"\n"
		""},
	 { (char *)"CMMCore_getImageBitDepth", _wrap_CMMCore_getImageBitDepth, METH_VARARGS, (char *)"\n"
		"CMMCore_getImageBitDepth(CMMCore self) -> unsigned int\n"
		"Parameters:\n"
		"   self: CMMCore * value\n"
		"\n"
		""},
	 { (char *)"CMMCore_getNumberOfComponents", _wrap_CMMCore_getNumberOfComponents, METH_VARARGS, (char *)"\n"
		"CMMCore_getNumberOfComponents(CMMCore self) -> unsigned int\n"
		"Parameters:\n"
		"   self: CMMCore * value\n"
		"\n"
		""},
	 { (char *)"CMMCore_getNumberOfCameraChannels", _wrap_CMMCore_getNumberOfCameraChannels, METH_VARARGS, (char *)"\n"
		"CMMCore_getNumberOfCameraChannels(CMMCore self) -> unsigned int\n"
		"Parameters:\n"
		"   self: CMMCore * value\n"
		"\n"
		""},
	 { (char *)"CMMCore_getCameraChannelName", _wrap_CMMCore_getCameraChannelName, METH_VARARGS, (char *)"\n"
		"CMMCore_getCameraChannelName(CMMCore self, unsigned int channelNr) -> string\n"
		"Parameters:\n"
		"   self: CMMCore * value\n"
		"   channelNr: unsigned int value\n"
		"\n"
		""},
	 { (char *)"CMMCore_getImageBufferSize", _wrap_CMMCore_getImageBufferSize, METH_VARARGS, (char *)"\n"
		"CMMCore_getImageBufferSize(CMMCore self) -> long\n"
		"Parameters:\n"
		"   self: CMMCore * value\n"
		"\n"
		""},
	 { (char *)"CMMCore_assignImageSynchro", _wrap_CMMCore_assignImageSynchro, METH_VARARGS, (char *)"\n"
		"CMMCore_assignImageSynchro(CMMCore self, char deviceLabel)\n"
		"Parameters:\n"
		"   self: CMMCore * value\n"
		"   deviceLabel: char const * value\n"
		"\n"
		""},
	 { (char *)"CMMCore_removeImageSynchro", _wrap_CMMCore_removeImageSynchro, METH_VARARGS, (char *)"\n"
		"CMMCore_removeImageSynchro(CMMCore self, char deviceLabel)\n"
		"Parameters:\n"
		"   self: CMMCore * value\n"
		"   deviceLabel: char const * value\n"
		"\n"
		""},
	 { (char *)"CMMCore_removeImageSynchroAll", _wrap_CMMCore_removeImageSynchroAll, METH_VARARGS, (char *)"\n"
		"CMMCore_removeImageSynchroAll(CMMCore self)\n"
		"Parameters:\n"
		"   self: CMMCore * value\n"
		"\n"
		""},
	 { (char *)"CMMCore_setAutoShutter", _wrap_CMMCore_setAutoShutter, METH_VARARGS, (char *)"\n"
		"CMMCore_setAutoShutter(CMMCore self, bool state)\n"
		"Parameters:\n"
		"   self: CMMCore * value\n"
		"   state: bool value\n"
		"\n"
		""},
	 { (char *)"CMMCore_getAutoShutter", _wrap_CMMCore_getAutoShutter, METH_VARARGS, (char *)"\n"
		"CMMCore_getAutoShutter(CMMCore self) -> bool\n"
		"Parameters:\n"
		"   self: CMMCore * value\n"
		"\n"
		""},
	 { (char *)"CMMCore_setShutterOpen", _wrap_CMMCore_setShutterOpen, METH_VARARGS, (char *)"\n"
		"setShutterOpen(bool state)\n"
		"Parameters:\n"
		"   state: bool value\n"
		"\n"
		"CMMCore_setShutterOpen(CMMCore self, char shutterLabel, bool state)\n"
		"Parameters:\n"
		"   self: CMMCore * value\n"
		"   shutterLabel: char const * value\n"
		"   state: bool value\n"
		"\n"
		""},
	 { (char *)"CMMCore_getShutterOpen", _wrap_CMMCore_getShutterOpen, METH_VARARGS, (char *)"\n"
		"getShutterOpen() -> bool\n"
		"CMMCore_getShutterOpen(CMMCore self, char shutterLabel) -> bool\n"
		"Parameters:\n"
		"   self: CMMCore * value\n"
		"   shutterLabel: char const * value\n"
		"\n"
		""},
	 { (char *)"CMMCore_startSequenceAcquisition", _wrap_CMMCore_startSequenceAcquisition, METH_VARARGS, (char *)"\n"
		"startSequenceAcquisition(long numImages, double intervalMs, bool stopOnOverflow)\n"
		"Parameters:\n"
		"   numImages: long value\n"
		"   intervalMs: double value\n"
		"   stopOnOverflow: bool value\n"
		"\n"
		"CMMCore_startSequenceAcquisition(CMMCore self, char cameraLabel, long numImages, double intervalMs, \n"
		"    bool stopOnOverflow)\n"
		"Parameters:\n"
		"   self: CMMCore * value\n"
		"   cameraLabel: char const * value\n"
		"   numImages: long value\n"
		"   intervalMs: double value\n"
		"   stopOnOverflow: bool value\n"
		"\n"
		""},
	 { (char *)"CMMCore_prepareSequenceAcquisition", _wrap_CMMCore_prepareSequenceAcquisition, METH_VARARGS, (char *)"\n"
		"CMMCore_prepareSequenceAcquisition(CMMCore self, char cameraLabel)\n"
		"Parameters:\n"
		"   self: CMMCore * value\n"
		"   cameraLabel: char const * value\n"
		"\n"
		""},
	 { (char *)"CMMCore_startContinuousSequenceAcquisition", _wrap_CMMCore_startContinuousSequenceAcquisition, METH_VARARGS, (char *)"\n"
		"CMMCore_startContinuousSequenceAcquisition(CMMCore self, double intervalMs)\n"
		"Parameters:\n"
		"   self: CMMCore * value\n"
		"   intervalMs: double value\n"
		"\n"
		""},
	 { (char *)"CMMCore_stopSequenceAcquisition", _wrap_CMMCore_stopSequenceAcquisition, METH_VARARGS, (char *)"\n"
		"stopSequenceAcquisition()\n"
		"CMMCore_stopSequenceAcquisition(CMMCore self, char cameraLabel)\n"
		"Parameters:\n"
		"   self: CMMCore * value\n"
		"   cameraLabel: char const * value\n"
		"\n"
		""},
	 { (char *)"CMMCore_isSequenceRunning", _wrap_CMMCore_isSequenceRunning, METH_VARARGS, (char *)"\n"
		"isSequenceRunning() -> bool\n"
		"CMMCore_isSequenceRunning(CMMCore self, char cameraLabel) -> bool\n"
		"Parameters:\n"
		"   self: CMMCore * value\n"
		"   cameraLabel: char const * value\n"
		"\n"
		""},
	 { (char *)"CMMCore_getLastImage", _wrap_CMMCore_getLastImage, METH_VARARGS, (char *)"\n"
		"CMMCore_getLastImage(CMMCore self) -> void\n"
		"Parameters:\n"
		"   self: CMMCore * value\n"
		"\n"
		""},
	 { (char *)"CMMCore_popNextImage", _wrap_CMMCore_popNextImage, METH_VARARGS, (char *)"\n"
		"CMMCore_popNextImage(CMMCore self) -> void\n"
		"Parameters:\n"
		"   self: CMMCore * value\n"
		"\n"
		""},
	 { (char *)"CMMCore_getLastImageMD", _wrap_CMMCore_getLastImageMD, METH_VARARGS, (char *)"\n"
		"getLastImageMD(unsigned int channel, unsigned int slice, Metadata md)\n"
		"Parameters:\n"
		"   channel: unsigned int value\n"
		"   slice: unsigned int value\n"
		"   md: Metadata & value\n"
		"\n"
		"CMMCore_getLastImageMD(CMMCore self, Metadata md) -> void\n"
		"Parameters:\n"
		"   self: CMMCore const * value\n"
		"   md: Metadata & value\n"
		"\n"
		""},
	 { (char *)"CMMCore_getNBeforeLastImageMD", _wrap_CMMCore_getNBeforeLastImageMD, METH_VARARGS, (char *)"\n"
		"CMMCore_getNBeforeLastImageMD(CMMCore self, unsigned long n, Metadata md) -> void\n"
		"Parameters:\n"
		"   self: CMMCore const * value\n"
		"   n: unsigned long value\n"
		"   md: Metadata & value\n"
		"\n"
		""},
	 { (char *)"CMMCore_popNextImageMD", _wrap_CMMCore_popNextImageMD, METH_VARARGS, (char *)"\n"
		"popNextImageMD(unsigned int channel, unsigned int slice, Metadata md)\n"
		"Parameters:\n"
		"   channel: unsigned int value\n"
		"   slice: unsigned int value\n"
		"   md: Metadata & value\n"
		"\n"
		"CMMCore_popNextImageMD(CMMCore self, Metadata md) -> void\n"
		"Parameters:\n"
		"   self: CMMCore * value\n"
		"   md: Metadata & value\n"
		"\n"
		""},
	 { (char *)"CMMCore_getRemainingImageCount", _wrap_CMMCore_getRemainingImageCount, METH_VARARGS, (char *)"\n"
		"CMMCore_getRemainingImageCount(CMMCore self) -> long\n"
		"Parameters:\n"
		"   self: CMMCore * value\n"
		"\n"
		""},
	 { (char *)"CMMCore_getBufferTotalCapacity", _wrap_CMMCore_getBufferTotalCapacity, METH_VARARGS, (char *)"\n"
		"CMMCore_getBufferTotalCapacity(CMMCore self) -> long\n"
		"Parameters:\n"
		"   self: CMMCore * value\n"
		"\n"
		""},
	 { (char *)"CMMCore_getBufferFreeCapacity", _wrap_CMMCore_getBufferFreeCapacity, METH_VARARGS, (char *)"\n"
		"CMMCore_getBufferFreeCapacity(CMMCore self) -> long\n"
		"Parameters:\n"
		"   self: CMMCore * value\n"
		"\n"
		""},
	 { (char *)"CMMCore_isBufferOverflowed", _wrap_CMMCore_isBufferOverflowed, METH_VARARGS, (char *)"\n"
		"CMMCore_isBufferOverflowed(CMMCore self) -> bool\n"
		"Parameters:\n"
		"   self: CMMCore const * value\n"
		"\n"
		""},
	 { (char *)"CMMCore_setCircularBufferMemoryFootprint", _wrap_CMMCore_setCircularBufferMemoryFootprint, METH_VARARGS, (char *)"\n"
		"CMMCore_setCircularBufferMemoryFootprint(CMMCore self, unsigned int sizeMB)\n"
		"Parameters:\n"
		"   self: CMMCore * value\n"
		"   sizeMB: unsigned int value\n"
		"\n"
		""},
	 { (char *)"CMMCore_getCircularBufferMemoryFootprint", _wrap_CMMCore_getCircularBufferMemoryFootprint, METH_VARARGS, (char *)"\n"
		"CMMCore_getCircularBufferMemoryFootprint(CMMCore self) -> unsigned int\n"
		"Parameters:\n"
		"   self: CMMCore * value\n"
		"\n"
		""},
	 { (char *)"CMMCore_initializeCircularBuffer", _wrap_CMMCore_initializeCircularBuffer, METH_VARARGS, (char *)"\n"
		"CMMCore_initializeCircularBuffer(CMMCore self)\n"
		"Parameters:\n"
		"   self: CMMCore * value\n"
		"\n"
		""},
	 { (char *)"CMMCore_clearCircularBuffer", _wrap_CMMCore_clearCircularBuffer, METH_VARARGS, (char *)"\n"
		"CMMCore_clearCircularBuffer(CMMCore self)\n"
		"Parameters:\n"
		"   self: CMMCore * value\n"
		"\n"
		""},
	 { (char *)"CMMCore_isExposureSequenceable", _wrap_CMMCore_isExposureSequenceable, METH_VARARGS, (char *)"\n"
		"CMMCore_isExposureSequenceable(CMMCore self, char cameraLabel) -> bool\n"
		"Parameters:\n"
		"   self: CMMCore * value\n"
		"   cameraLabel: char const * value\n"
		"\n"
		""},
	 { (char *)"CMMCore_startExposureSequence", _wrap_CMMCore_startExposureSequence, METH_VARARGS, (char *)"\n"
		"CMMCore_startExposureSequence(CMMCore self, char cameraLabel)\n"
		"Parameters:\n"
		"   self: CMMCore * value\n"
		"   cameraLabel: char const * value\n"
		"\n"
		""},
	 { (char *)"CMMCore_stopExposureSequence", _wrap_CMMCore_stopExposureSequence, METH_VARARGS, (char *)"\n"
		"CMMCore_stopExposureSequence(CMMCore self, char cameraLabel)\n"
		"Parameters:\n"
		"   self: CMMCore * value\n"
		"   cameraLabel: char const * value\n"
		"\n"
		""},
	 { (char *)"CMMCore_getExposureSequenceMaxLength", _wrap_CMMCore_getExposureSequenceMaxLength, METH_VARARGS, (char *)"\n"
		"CMMCore_getExposureSequenceMaxLength(CMMCore self, char cameraLabel) -> long\n"
		"Parameters:\n"
		"   self: CMMCore * value\n"
		"   cameraLabel: char const * value\n"
		"\n"
		""},
	 { (char *)"CMMCore_loadExposureSequence", _wrap_CMMCore_loadExposureSequence, METH_VARARGS, (char *)"\n"
		"CMMCore_loadExposureSequence(CMMCore self, char cameraLabel, DoubleVector exposureSequence_ms)\n"
		"Parameters:\n"
		"   self: CMMCore * value\n"
		"   cameraLabel: char const * value\n"
		"   exposureSequence_ms: std::vector< double,std::allocator< double > > value\n"
		"\n"
		""},
	 { (char *)"CMMCore_getLastFocusScore", _wrap_CMMCore_getLastFocusScore, METH_VARARGS, (char *)"\n"
		"CMMCore_getLastFocusScore(CMMCore self) -> double\n"
		"Parameters:\n"
		"   self: CMMCore * value\n"
		"\n"
		""},
	 { (char *)"CMMCore_getCurrentFocusScore", _wrap_CMMCore_getCurrentFocusScore, METH_VARARGS, (char *)"\n"
		"CMMCore_getCurrentFocusScore(CMMCore self) -> double\n"
		"Parameters:\n"
		"   self: CMMCore * value\n"
		"\n"
		""},
	 { (char *)"CMMCore_enableContinuousFocus", _wrap_CMMCore_enableContinuousFocus, METH_VARARGS, (char *)"\n"
		"CMMCore_enableContinuousFocus(CMMCore self, bool enable)\n"
		"Parameters:\n"
		"   self: CMMCore * value\n"
		"   enable: bool value\n"
		"\n"
		""},
	 { (char *)"CMMCore_isContinuousFocusEnabled", _wrap_CMMCore_isContinuousFocusEnabled, METH_VARARGS, (char *)"\n"
		"CMMCore_isContinuousFocusEnabled(CMMCore self) -> bool\n"
		"Parameters:\n"
		"   self: CMMCore * value\n"
		"\n"
		""},
	 { (char *)"CMMCore_isContinuousFocusLocked", _wrap_CMMCore_isContinuousFocusLocked, METH_VARARGS, (char *)"\n"
		"CMMCore_isContinuousFocusLocked(CMMCore self) -> bool\n"
		"Parameters:\n"
		"   self: CMMCore * value\n"
		"\n"
		""},
	 { (char *)"CMMCore_isContinuousFocusDrive", _wrap_CMMCore_isContinuousFocusDrive, METH_VARARGS, (char *)"\n"
		"CMMCore_isContinuousFocusDrive(CMMCore self, char stageLabel) -> bool\n"
		"Parameters:\n"
		"   self: CMMCore * value\n"
		"   stageLabel: char const * value\n"
		"\n"
		""},
	 { (char *)"CMMCore_fullFocus", _wrap_CMMCore_fullFocus, METH_VARARGS, (char *)"\n"
		"CMMCore_fullFocus(CMMCore self)\n"
		"Parameters:\n"
		"   self: CMMCore * value\n"
		"\n"
		""},
	 { (char *)"CMMCore_incrementalFocus", _wrap_CMMCore_incrementalFocus, METH_VARARGS, (char *)"\n"
		"CMMCore_incrementalFocus(CMMCore self)\n"
		"Parameters:\n"
		"   self: CMMCore * value\n"
		"\n"
		""},
	 { (char *)"CMMCore_setAutoFocusOffset", _wrap_CMMCore_setAutoFocusOffset, METH_VARARGS, (char *)"\n"
		"CMMCore_setAutoFocusOffset(CMMCore self, double offset)\n"
		"Parameters:\n"
		"   self: CMMCore * value\n"
		"   offset: double value\n"
		"\n"
		""},
	 { (char *)"CMMCore_getAutoFocusOffset", _wrap_CMMCore_getAutoFocusOffset, METH_VARARGS, (char *)"\n"
		"CMMCore_getAutoFocusOffset(CMMCore self) -> double\n"
		"Parameters:\n"
		"   self: CMMCore * value\n"
		"\n"
		""},
	 { (char *)"CMMCore_setState", _wrap_CMMCore_setState, METH_VARARGS, (char *)"\n"
		"CMMCore_setState(CMMCore self, char stateDeviceLabel, long state)\n"
		"Parameters:\n"
		"   self: CMMCore * value\n"
		"   stateDeviceLabel: char const * value\n"
		"   state: long value\n"
		"\n"
		""},
	 { (char *)"CMMCore_getState", _wrap_CMMCore_getState, METH_VARARGS, (char *)"\n"
		"CMMCore_getState(CMMCore self, char stateDeviceLabel) -> long\n"
		"Parameters:\n"
		"   self: CMMCore * value\n"
		"   stateDeviceLabel: char const * value\n"
		"\n"
		""},
	 { (char *)"CMMCore_getNumberOfStates", _wrap_CMMCore_getNumberOfStates, METH_VARARGS, (char *)"\n"
		"CMMCore_getNumberOfStates(CMMCore self, char stateDeviceLabel) -> long\n"
		"Parameters:\n"
		"   self: CMMCore * value\n"
		"   stateDeviceLabel: char const * value\n"
		"\n"
		""},
	 { (char *)"CMMCore_setStateLabel", _wrap_CMMCore_setStateLabel, METH_VARARGS, (char *)"\n"
		"CMMCore_setStateLabel(CMMCore self, char stateDeviceLabel, char stateLabel)\n"
		"Parameters:\n"
		"   self: CMMCore * value\n"
		"   stateDeviceLabel: char const * value\n"
		"   stateLabel: char const * value\n"
		"\n"
		""},
	 { (char *)"CMMCore_getStateLabel", _wrap_CMMCore_getStateLabel, METH_VARARGS, (char *)"\n"
		"CMMCore_getStateLabel(CMMCore self, char stateDeviceLabel) -> string\n"
		"Parameters:\n"
		"   self: CMMCore * value\n"
		"   stateDeviceLabel: char const * value\n"
		"\n"
		""},
	 { (char *)"CMMCore_defineStateLabel", _wrap_CMMCore_defineStateLabel, METH_VARARGS, (char *)"\n"
		"CMMCore_defineStateLabel(CMMCore self, char stateDeviceLabel, long state, char stateLabel)\n"
		"Parameters:\n"
		"   self: CMMCore * value\n"
		"   stateDeviceLabel: char const * value\n"
		"   state: long value\n"
		"   stateLabel: char const * value\n"
		"\n"
		""},
	 { (char *)"CMMCore_getStateLabels", _wrap_CMMCore_getStateLabels, METH_VARARGS, (char *)"\n"
		"CMMCore_getStateLabels(CMMCore self, char stateDeviceLabel) -> StrVector\n"
		"Parameters:\n"
		"   self: CMMCore * value\n"
		"   stateDeviceLabel: char const * value\n"
		"\n"
		""},
	 { (char *)"CMMCore_getStateFromLabel", _wrap_CMMCore_getStateFromLabel, METH_VARARGS, (char *)"\n"
		"CMMCore_getStateFromLabel(CMMCore self, char stateDeviceLabel, char stateLabel) -> long\n"
		"Parameters:\n"
		"   self: CMMCore * value\n"
		"   stateDeviceLabel: char const * value\n"
		"   stateLabel: char const * value\n"
		"\n"
		""},
	 { (char *)"CMMCore_getStateLabelData", _wrap_CMMCore_getStateLabelData, METH_VARARGS, (char *)"\n"
		"CMMCore_getStateLabelData(CMMCore self, char stateDeviceLabel, char stateLabel) -> PropertyBlock\n"
		"Parameters:\n"
		"   self: CMMCore * value\n"
		"   stateDeviceLabel: char const * value\n"
		"   stateLabel: char const * value\n"
		"\n"
		""},
	 { (char *)"CMMCore_getData", _wrap_CMMCore_getData, METH_VARARGS, (char *)"\n"
		"CMMCore_getData(CMMCore self, char stateDeviceLabel) -> PropertyBlock\n"
		"Parameters:\n"
		"   self: CMMCore * value\n"
		"   stateDeviceLabel: char const * value\n"
		"\n"
		""},
	 { (char *)"CMMCore_setPosition", _wrap_CMMCore_setPosition, METH_VARARGS, (char *)"\n"
		"setPosition(char stageLabel, double position)\n"
		"Parameters:\n"
		"   stageLabel: char const * value\n"
		"   position: double value\n"
		"\n"
		"CMMCore_setPosition(CMMCore self, double position)\n"
		"Parameters:\n"
		"   self: CMMCore * value\n"
		"   position: double value\n"
		"\n"
		""},
	 { (char *)"CMMCore_getPosition", _wrap_CMMCore_getPosition, METH_VARARGS, (char *)"\n"
		"getPosition(char stageLabel) -> double\n"
		"Parameters:\n"
		"   stageLabel: char const * value\n"
		"\n"
		"CMMCore_getPosition(CMMCore self) -> double\n"
		"Parameters:\n"
		"   self: CMMCore * value\n"
		"\n"
		""},
	 { (char *)"CMMCore_setRelativePosition", _wrap_CMMCore_setRelativePosition, METH_VARARGS, (char *)"\n"
		"setRelativePosition(char stageLabel, double d)\n"
		"Parameters:\n"
		"   stageLabel: char const * value\n"
		"   d: double value\n"
		"\n"
		"CMMCore_setRelativePosition(CMMCore self, double d)\n"
		"Parameters:\n"
		"   self: CMMCore * value\n"
		"   d: double value\n"
		"\n"
		""},
	 { (char *)"CMMCore_setOrigin", _wrap_CMMCore_setOrigin, METH_VARARGS, (char *)"\n"
		"setOrigin(char stageLabel)\n"
		"Parameters:\n"
		"   stageLabel: char const * value\n"
		"\n"
		"CMMCore_setOrigin(CMMCore self)\n"
		"Parameters:\n"
		"   self: CMMCore * value\n"
		"\n"
		""},
	 { (char *)"CMMCore_setAdapterOrigin", _wrap_CMMCore_setAdapterOrigin, METH_VARARGS, (char *)"\n"
		"setAdapterOrigin(char stageLabel, double newZUm)\n"
		"Parameters:\n"
		"   stageLabel: char const * value\n"
		"   newZUm: double value\n"
		"\n"
		"CMMCore_setAdapterOrigin(CMMCore self, double newZUm)\n"
		"Parameters:\n"
		"   self: CMMCore * value\n"
		"   newZUm: double value\n"
		"\n"
		""},
	 { (char *)"CMMCore_setFocusDirection", _wrap_CMMCore_setFocusDirection, METH_VARARGS, (char *)"\n"
		"CMMCore_setFocusDirection(CMMCore self, char stageLabel, int sign)\n"
		"Parameters:\n"
		"   self: CMMCore * value\n"
		"   stageLabel: char const * value\n"
		"   sign: int value\n"
		"\n"
		""},
	 { (char *)"CMMCore_getFocusDirection", _wrap_CMMCore_getFocusDirection, METH_VARARGS, (char *)"\n"
		"CMMCore_getFocusDirection(CMMCore self, char stageLabel) -> int\n"
		"Parameters:\n"
		"   self: CMMCore * value\n"
		"   stageLabel: char const * value\n"
		"\n"
		""},
	 { (char *)"CMMCore_isStageSequenceable", _wrap_CMMCore_isStageSequenceable, METH_VARARGS, (char *)"\n"
		"CMMCore_isStageSequenceable(CMMCore self, char stageLabel) -> bool\n"
		"Parameters:\n"
		"   self: CMMCore * value\n"
		"   stageLabel: char const * value\n"
		"\n"
		""},
	 { (char *)"CMMCore_isStageLinearSequenceable", _wrap_CMMCore_isStageLinearSequenceable, METH_VARARGS, (char *)"\n"
		"CMMCore_isStageLinearSequenceable(CMMCore self, char stageLabel) -> bool\n"
		"Parameters:\n"
		"   self: CMMCore * value\n"
		"   stageLabel: char const * value\n"
		"\n"
		""},
	 { (char *)"CMMCore_startStageSequence", _wrap_CMMCore_startStageSequence, METH_VARARGS, (char *)"\n"
		"CMMCore_startStageSequence(CMMCore self, char stageLabel)\n"
		"Parameters:\n"
		"   self: CMMCore * value\n"
		"   stageLabel: char const * value\n"
		"\n"
		""},
	 { (char *)"CMMCore_stopStageSequence", _wrap_CMMCore_stopStageSequence, METH_VARARGS, (char *)"\n"
		"CMMCore_stopStageSequence(CMMCore self, char stageLabel)\n"
		"Parameters:\n"
		"   self: CMMCore * value\n"
		"   stageLabel: char const * value\n"
		"\n"
		""},
	 { (char *)"CMMCore_getStageSequenceMaxLength", _wrap_CMMCore_getStageSequenceMaxLength, METH_VARARGS, (char *)"\n"
		"CMMCore_getStageSequenceMaxLength(CMMCore self, char stageLabel) -> long\n"
		"Parameters:\n"
		"   self: CMMCore * value\n"
		"   stageLabel: char const * value\n"
		"\n"
		""},
	 { (char *)"CMMCore_loadStageSequence", _wrap_CMMCore_loadStageSequence, METH_VARARGS, (char *)"\n"
		"CMMCore_loadStageSequence(CMMCore self, char stageLabel, DoubleVector positionSequence)\n"
		"Parameters:\n"
		"   self: CMMCore * value\n"
		"   stageLabel: char const * value\n"
		"   positionSequence: std::vector< double,std::allocator< double > > value\n"
		"\n"
		""},
	 { (char *)"CMMCore_setStageLinearSequence", _wrap_CMMCore_setStageLinearSequence, METH_VARARGS, (char *)"\n"
		"CMMCore_setStageLinearSequence(CMMCore self, char stageLabel, double dZ_um, int nSlices)\n"
		"Parameters:\n"
		"   self: CMMCore * value\n"
		"   stageLabel: char const * value\n"
		"   dZ_um: double value\n"
		"   nSlices: int value\n"
		"\n"
		""},
	 { (char *)"CMMCore_setXYPosition", _wrap_CMMCore_setXYPosition, METH_VARARGS, (char *)"\n"
		"setXYPosition(char xyStageLabel, double x, double y)\n"
		"Parameters:\n"
		"   xyStageLabel: char const * value\n"
		"   x: double value\n"
		"   y: double value\n"
		"\n"
		"CMMCore_setXYPosition(CMMCore self, double x, double y)\n"
		"Parameters:\n"
		"   self: CMMCore * value\n"
		"   x: double value\n"
		"   y: double value\n"
		"\n"
		""},
	 { (char *)"CMMCore_setRelativeXYPosition", _wrap_CMMCore_setRelativeXYPosition, METH_VARARGS, (char *)"\n"
		"setRelativeXYPosition(char xyStageLabel, double dx, double dy)\n"
		"Parameters:\n"
		"   xyStageLabel: char const * value\n"
		"   dx: double value\n"
		"   dy: double value\n"
		"\n"
		"CMMCore_setRelativeXYPosition(CMMCore self, double dx, double dy)\n"
		"Parameters:\n"
		"   self: CMMCore * value\n"
		"   dx: double value\n"
		"   dy: double value\n"
		"\n"
		""},
	 { (char *)"CMMCore_getXYPosition", _wrap_CMMCore_getXYPosition, METH_VARARGS, (char *)"\n"
		"getXYPosition(char xyStageLabel)\n"
		"Parameters:\n"
		"   xyStageLabel: char const * value\n"
		"\n"
		"CMMCore_getXYPosition(CMMCore self)\n"
		"Parameters:\n"
		"   self: CMMCore * value\n"
		"\n"
		""},
	 { (char *)"CMMCore_getXPosition", _wrap_CMMCore_getXPosition, METH_VARARGS, (char *)"\n"
		"getXPosition(char xyStageLabel) -> double\n"
		"Parameters:\n"
		"   xyStageLabel: char const * value\n"
		"\n"
		"CMMCore_getXPosition(CMMCore self) -> double\n"
		"Parameters:\n"
		"   self: CMMCore * value\n"
		"\n"
		""},
	 { (char *)"CMMCore_getYPosition", _wrap_CMMCore_getYPosition, METH_VARARGS, (char *)"\n"
		"getYPosition(char xyStageLabel) -> double\n"
		"Parameters:\n"
		"   xyStageLabel: char const * value\n"
		"\n"
		"CMMCore_getYPosition(CMMCore self) -> double\n"
		"Parameters:\n"
		"   self: CMMCore * value\n"
		"\n"
		""},
	 { (char *)"CMMCore_stop", _wrap_CMMCore_stop, METH_VARARGS, (char *)"\n"
		"CMMCore_stop(CMMCore self, char xyOrZStageLabel)\n"
		"Parameters:\n"
		"   self: CMMCore * value\n"
		"   xyOrZStageLabel: char const * value\n"
		"\n"
		""},
	 { (char *)"CMMCore_home", _wrap_CMMCore_home, METH_VARARGS, (char *)"\n"
		"CMMCore_home(CMMCore self, char xyOrZStageLabel)\n"
		"Parameters:\n"
		"   self: CMMCore * value\n"
		"   xyOrZStageLabel: char const * value\n"
		"\n"
		""},
	 { (char *)"CMMCore_setOriginXY", _wrap_CMMCore_setOriginXY, METH_VARARGS, (char *)"\n"
		"setOriginXY(char xyStageLabel)\n"
		"Parameters:\n"
		"   xyStageLabel: char const * value\n"
		"\n"
		"CMMCore_setOriginXY(CMMCore self)\n"
		"Parameters:\n"
		"   self: CMMCore * value\n"
		"\n"
		""},
	 { (char *)"CMMCore_setOriginX", _wrap_CMMCore_setOriginX, METH_VARARGS, (char *)"\n"
		"setOriginX(char xyStageLabel)\n"
		"Parameters:\n"
		"   xyStageLabel: char const * value\n"
		"\n"
		"CMMCore_setOriginX(CMMCore self)\n"
		"Parameters:\n"
		"   self: CMMCore * value\n"
		"\n"
		""},
	 { (char *)"CMMCore_setOriginY", _wrap_CMMCore_setOriginY, METH_VARARGS, (char *)"\n"
		"setOriginY(char xyStageLabel)\n"
		"Parameters:\n"
		"   xyStageLabel: char const * value\n"
		"\n"
		"CMMCore_setOriginY(CMMCore self)\n"
		"Parameters:\n"
		"   self: CMMCore * value\n"
		"\n"
		""},
	 { (char *)"CMMCore_setAdapterOriginXY", _wrap_CMMCore_setAdapterOriginXY, METH_VARARGS, (char *)"\n"
		"setAdapterOriginXY(char xyStageLabel, double newXUm, double newYUm)\n"
		"Parameters:\n"
		"   xyStageLabel: char const * value\n"
		"   newXUm: double value\n"
		"   newYUm: double value\n"
		"\n"
		"CMMCore_setAdapterOriginXY(CMMCore self, double newXUm, double newYUm)\n"
		"Parameters:\n"
		"   self: CMMCore * value\n"
		"   newXUm: double value\n"
		"   newYUm: double value\n"
		"\n"
		""},
	 { (char *)"CMMCore_isXYStageSequenceable", _wrap_CMMCore_isXYStageSequenceable, METH_VARARGS, (char *)"\n"
		"CMMCore_isXYStageSequenceable(CMMCore self, char xyStageLabel) -> bool\n"
		"Parameters:\n"
		"   self: CMMCore * value\n"
		"   xyStageLabel: char const * value\n"
		"\n"
		""},
	 { (char *)"CMMCore_startXYStageSequence", _wrap_CMMCore_startXYStageSequence, METH_VARARGS, (char *)"\n"
		"CMMCore_startXYStageSequence(CMMCore self, char xyStageLabel)\n"
		"Parameters:\n"
		"   self: CMMCore * value\n"
		"   xyStageLabel: char const * value\n"
		"\n"
		""},
	 { (char *)"CMMCore_stopXYStageSequence", _wrap_CMMCore_stopXYStageSequence, METH_VARARGS, (char *)"\n"
		"CMMCore_stopXYStageSequence(CMMCore self, char xyStageLabel)\n"
		"Parameters:\n"
		"   self: CMMCore * value\n"
		"   xyStageLabel: char const * value\n"
		"\n"
		""},
	 { (char *)"CMMCore_getXYStageSequenceMaxLength", _wrap_CMMCore_getXYStageSequenceMaxLength, METH_VARARGS, (char *)"\n"
		"CMMCore_getXYStageSequenceMaxLength(CMMCore self, char xyStageLabel) -> long\n"
		"Parameters:\n"
		"   self: CMMCore * value\n"
		"   xyStageLabel: char const * value\n"
		"\n"
		""},
	 { (char *)"CMMCore_loadXYStageSequence", _wrap_CMMCore_loadXYStageSequence, METH_VARARGS, (char *)"\n"
		"CMMCore_loadXYStageSequence(CMMCore self, char xyStageLabel, DoubleVector xSequence, \n"
		"    DoubleVector ySequence)\n"
		"Parameters:\n"
		"   self: CMMCore * value\n"
		"   xyStageLabel: char const * value\n"
		"   xSequence: std::vector< double,std::allocator< double > > value\n"
		"   ySequence: std::vector< double,std::allocator< double > > value\n"
		"\n"
		""},
	 { (char *)"CMMCore_setSerialProperties", _wrap_CMMCore_setSerialProperties, METH_VARARGS, (char *)"\n"
		"CMMCore_setSerialProperties(CMMCore self, char portName, char answerTimeout, char baudRate, \n"
		"    char delayBetweenCharsMs, char handshaking, \n"
		"    char parity, char stopBits)\n"
		"Parameters:\n"
		"   self: CMMCore * value\n"
		"   portName: char const * value\n"
		"   answerTimeout: char const * value\n"
		"   baudRate: char const * value\n"
		"   delayBetweenCharsMs: char const * value\n"
		"   handshaking: char const * value\n"
		"   parity: char const * value\n"
		"   stopBits: char const * value\n"
		"\n"
		""},
	 { (char *)"CMMCore_setSerialPortCommand", _wrap_CMMCore_setSerialPortCommand, METH_VARARGS, (char *)"\n"
		"CMMCore_setSerialPortCommand(CMMCore self, char portLabel, char command, char term)\n"
		"Parameters:\n"
		"   self: CMMCore * value\n"
		"   portLabel: char const * value\n"
		"   command: char const * value\n"
		"   term: char const * value\n"
		"\n"
		""},
	 { (char *)"CMMCore_getSerialPortAnswer", _wrap_CMMCore_getSerialPortAnswer, METH_VARARGS, (char *)"\n"
		"CMMCore_getSerialPortAnswer(CMMCore self, char portLabel, char term) -> string\n"
		"Parameters:\n"
		"   self: CMMCore * value\n"
		"   portLabel: char const * value\n"
		"   term: char const * value\n"
		"\n"
		""},
	 { (char *)"CMMCore_writeToSerialPort", _wrap_CMMCore_writeToSerialPort, METH_VARARGS, (char *)"\n"
		"CMMCore_writeToSerialPort(CMMCore self, char portLabel, CharVector data)\n"
		"Parameters:\n"
		"   self: CMMCore * value\n"
		"   portLabel: char const * value\n"
		"   data: std::vector< char,std::allocator< char > > const & value\n"
		"\n"
		""},
	 { (char *)"CMMCore_readFromSerialPort", _wrap_CMMCore_readFromSerialPort, METH_VARARGS, (char *)"\n"
		"CMMCore_readFromSerialPort(CMMCore self, char portLabel) -> CharVector\n"
		"Parameters:\n"
		"   self: CMMCore * value\n"
		"   portLabel: char const * value\n"
		"\n"
		""},
	 { (char *)"CMMCore_setSLMPixelsTo", _wrap_CMMCore_setSLMPixelsTo, METH_VARARGS, (char *)"\n"
		"setSLMPixelsTo(char slmLabel, unsigned char intensity)\n"
		"Parameters:\n"
		"   slmLabel: char const * value\n"
		"   intensity: unsigned char value\n"
		"\n"
		"CMMCore_setSLMPixelsTo(CMMCore self, char slmLabel, unsigned char red, unsigned char green, \n"
		"    unsigned char blue)\n"
		"Parameters:\n"
		"   self: CMMCore * value\n"
		"   slmLabel: char const * value\n"
		"   red: unsigned char value\n"
		"   green: unsigned char value\n"
		"   blue: unsigned char value\n"
		"\n"
		""},
	 { (char *)"CMMCore_displaySLMImage", _wrap_CMMCore_displaySLMImage, METH_VARARGS, (char *)"\n"
		"CMMCore_displaySLMImage(CMMCore self, char slmLabel)\n"
		"Parameters:\n"
		"   self: CMMCore * value\n"
		"   slmLabel: char const * value\n"
		"\n"
		""},
	 { (char *)"CMMCore_setSLMExposure", _wrap_CMMCore_setSLMExposure, METH_VARARGS, (char *)"\n"
		"CMMCore_setSLMExposure(CMMCore self, char slmLabel, double exposure_ms)\n"
		"Parameters:\n"
		"   self: CMMCore * value\n"
		"   slmLabel: char const * value\n"
		"   exposure_ms: double value\n"
		"\n"
		""},
	 { (char *)"CMMCore_getSLMExposure", _wrap_CMMCore_getSLMExposure, METH_VARARGS, (char *)"\n"
		"CMMCore_getSLMExposure(CMMCore self, char slmLabel) -> double\n"
		"Parameters:\n"
		"   self: CMMCore * value\n"
		"   slmLabel: char const * value\n"
		"\n"
		""},
	 { (char *)"CMMCore_getSLMWidth", _wrap_CMMCore_getSLMWidth, METH_VARARGS, (char *)"\n"
		"CMMCore_getSLMWidth(CMMCore self, char slmLabel) -> unsigned int\n"
		"Parameters:\n"
		"   self: CMMCore * value\n"
		"   slmLabel: char const * value\n"
		"\n"
		""},
	 { (char *)"CMMCore_getSLMHeight", _wrap_CMMCore_getSLMHeight, METH_VARARGS, (char *)"\n"
		"CMMCore_getSLMHeight(CMMCore self, char slmLabel) -> unsigned int\n"
		"Parameters:\n"
		"   self: CMMCore * value\n"
		"   slmLabel: char const * value\n"
		"\n"
		""},
	 { (char *)"CMMCore_getSLMNumberOfComponents", _wrap_CMMCore_getSLMNumberOfComponents, METH_VARARGS, (char *)"\n"
		"CMMCore_getSLMNumberOfComponents(CMMCore self, char slmLabel) -> unsigned int\n"
		"Parameters:\n"
		"   self: CMMCore * value\n"
		"   slmLabel: char const * value\n"
		"\n"
		""},
	 { (char *)"CMMCore_getSLMBytesPerPixel", _wrap_CMMCore_getSLMBytesPerPixel, METH_VARARGS, (char *)"\n"
		"CMMCore_getSLMBytesPerPixel(CMMCore self, char slmLabel) -> unsigned int\n"
		"Parameters:\n"
		"   self: CMMCore * value\n"
		"   slmLabel: char const * value\n"
		"\n"
		""},
	 { (char *)"CMMCore_getSLMSequenceMaxLength", _wrap_CMMCore_getSLMSequenceMaxLength, METH_VARARGS, (char *)"\n"
		"CMMCore_getSLMSequenceMaxLength(CMMCore self, char slmLabel) -> long\n"
		"Parameters:\n"
		"   self: CMMCore * value\n"
		"   slmLabel: char const * value\n"
		"\n"
		""},
	 { (char *)"CMMCore_startSLMSequence", _wrap_CMMCore_startSLMSequence, METH_VARARGS, (char *)"\n"
		"CMMCore_startSLMSequence(CMMCore self, char slmLabel)\n"
		"Parameters:\n"
		"   self: CMMCore * value\n"
		"   slmLabel: char const * value\n"
		"\n"
		""},
	 { (char *)"CMMCore_stopSLMSequence", _wrap_CMMCore_stopSLMSequence, METH_VARARGS, (char *)"\n"
		"CMMCore_stopSLMSequence(CMMCore self, char slmLabel)\n"
		"Parameters:\n"
		"   self: CMMCore * value\n"
		"   slmLabel: char const * value\n"
		"\n"
		""},
	 { (char *)"CMMCore_loadSLMSequence", _wrap_CMMCore_loadSLMSequence, METH_VARARGS, (char *)"\n"
		"CMMCore_loadSLMSequence(CMMCore self, char slmLabel, std::vector<(p.unsigned char,std::allocator<(p.unsigned char)>)> imageSequence)\n"
		"Parameters:\n"
		"   self: CMMCore * value\n"
		"   slmLabel: char const * value\n"
		"   imageSequence: std::vector< unsigned char *,std::allocator< unsigned char * > > value\n"
		"\n"
		""},
	 { (char *)"CMMCore_pointGalvoAndFire", _wrap_CMMCore_pointGalvoAndFire, METH_VARARGS, (char *)"\n"
		"CMMCore_pointGalvoAndFire(CMMCore self, char galvoLabel, double x, double y, \n"
		"    double pulseTime_us)\n"
		"Parameters:\n"
		"   self: CMMCore * value\n"
		"   galvoLabel: char const * value\n"
		"   x: double value\n"
		"   y: double value\n"
		"   pulseTime_us: double value\n"
		"\n"
		""},
	 { (char *)"CMMCore_setGalvoSpotInterval", _wrap_CMMCore_setGalvoSpotInterval, METH_VARARGS, (char *)"\n"
		"CMMCore_setGalvoSpotInterval(CMMCore self, char galvoLabel, double pulseTime_us)\n"
		"Parameters:\n"
		"   self: CMMCore * value\n"
		"   galvoLabel: char const * value\n"
		"   pulseTime_us: double value\n"
		"\n"
		""},
	 { (char *)"CMMCore_setGalvoPosition", _wrap_CMMCore_setGalvoPosition, METH_VARARGS, (char *)"\n"
		"CMMCore_setGalvoPosition(CMMCore self, char galvoLabel, double x, double y)\n"
		"Parameters:\n"
		"   self: CMMCore * value\n"
		"   galvoLabel: char const * value\n"
		"   x: double value\n"
		"   y: double value\n"
		"\n"
		""},
	 { (char *)"CMMCore_getGalvoPosition", _wrap_CMMCore_getGalvoPosition, METH_VARARGS, (char *)"\n"
		"CMMCore_getGalvoPosition(CMMCore self, char galvoLabel)\n"
		"Parameters:\n"
		"   self: CMMCore * value\n"
		"   galvoLabel: char const * value\n"
		"\n"
		""},
	 { (char *)"CMMCore_setGalvoIlluminationState", _wrap_CMMCore_setGalvoIlluminationState, METH_VARARGS, (char *)"\n"
		"CMMCore_setGalvoIlluminationState(CMMCore self, char galvoLabel, bool on)\n"
		"Parameters:\n"
		"   self: CMMCore * value\n"
		"   galvoLabel: char const * value\n"
		"   on: bool value\n"
		"\n"
		""},
	 { (char *)"CMMCore_getGalvoXRange", _wrap_CMMCore_getGalvoXRange, METH_VARARGS, (char *)"\n"
		"CMMCore_getGalvoXRange(CMMCore self, char galvoLabel) -> double\n"
		"Parameters:\n"
		"   self: CMMCore * value\n"
		"   galvoLabel: char const * value\n"
		"\n"
		""},
	 { (char *)"CMMCore_getGalvoXMinimum", _wrap_CMMCore_getGalvoXMinimum, METH_VARARGS, (char *)"\n"
		"CMMCore_getGalvoXMinimum(CMMCore self, char galvoLabel) -> double\n"
		"Parameters:\n"
		"   self: CMMCore * value\n"
		"   galvoLabel: char const * value\n"
		"\n"
		""},
	 { (char *)"CMMCore_getGalvoYRange", _wrap_CMMCore_getGalvoYRange, METH_VARARGS, (char *)"\n"
		"CMMCore_getGalvoYRange(CMMCore self, char galvoLabel) -> double\n"
		"Parameters:\n"
		"   self: CMMCore * value\n"
		"   galvoLabel: char const * value\n"
		"\n"
		""},
	 { (char *)"CMMCore_getGalvoYMinimum", _wrap_CMMCore_getGalvoYMinimum, METH_VARARGS, (char *)"\n"
		"CMMCore_getGalvoYMinimum(CMMCore self, char galvoLabel) -> double\n"
		"Parameters:\n"
		"   self: CMMCore * value\n"
		"   galvoLabel: char const * value\n"
		"\n"
		""},
	 { (char *)"CMMCore_addGalvoPolygonVertex", _wrap_CMMCore_addGalvoPolygonVertex, METH_VARARGS, (char *)"\n"
		"CMMCore_addGalvoPolygonVertex(CMMCore self, char galvoLabel, int polygonIndex, double x, \n"
		"    double y)\n"
		"Parameters:\n"
		"   self: CMMCore * value\n"
		"   galvoLabel: char const * value\n"
		"   polygonIndex: int value\n"
		"   x: double value\n"
		"   y: double value\n"
		"\n"
		""},
	 { (char *)"CMMCore_deleteGalvoPolygons", _wrap_CMMCore_deleteGalvoPolygons, METH_VARARGS, (char *)"\n"
		"CMMCore_deleteGalvoPolygons(CMMCore self, char galvoLabel)\n"
		"Parameters:\n"
		"   self: CMMCore * value\n"
		"   galvoLabel: char const * value\n"
		"\n"
		""},
	 { (char *)"CMMCore_loadGalvoPolygons", _wrap_CMMCore_loadGalvoPolygons, METH_VARARGS, (char *)"\n"
		"CMMCore_loadGalvoPolygons(CMMCore self, char galvoLabel)\n"
		"Parameters:\n"
		"   self: CMMCore * value\n"
		"   galvoLabel: char const * value\n"
		"\n"
		""},
	 { (char *)"CMMCore_setGalvoPolygonRepetitions", _wrap_CMMCore_setGalvoPolygonRepetitions, METH_VARARGS, (char *)"\n"
		"CMMCore_setGalvoPolygonRepetitions(CMMCore self, char galvoLabel, int repetitions)\n"
		"Parameters:\n"
		"   self: CMMCore * value\n"
		"   galvoLabel: char const * value\n"
		"   repetitions: int value\n"
		"\n"
		""},
	 { (char *)"CMMCore_runGalvoPolygons", _wrap_CMMCore_runGalvoPolygons, METH_VARARGS, (char *)"\n"
		"CMMCore_runGalvoPolygons(CMMCore self, char galvoLabel)\n"
		"Parameters:\n"
		"   self: CMMCore * value\n"
		"   galvoLabel: char const * value\n"
		"\n"
		""},
	 { (char *)"CMMCore_runGalvoSequence", _wrap_CMMCore_runGalvoSequence, METH_VARARGS, (char *)"\n"
		"CMMCore_runGalvoSequence(CMMCore self, char galvoLabel)\n"
		"Parameters:\n"
		"   self: CMMCore * value\n"
		"   galvoLabel: char const * value\n"
		"\n"
		""},
	 { (char *)"CMMCore_getGalvoChannel", _wrap_CMMCore_getGalvoChannel, METH_VARARGS, (char *)"\n"
		"CMMCore_getGalvoChannel(CMMCore self, char galvoLabel) -> string\n"
		"Parameters:\n"
		"   self: CMMCore * value\n"
		"   galvoLabel: char const * value\n"
		"\n"
		""},
	 { (char *)"CMMCore_supportsDeviceDetection", _wrap_CMMCore_supportsDeviceDetection, METH_VARARGS, (char *)"\n"
		"CMMCore_supportsDeviceDetection(CMMCore self, char deviceLabel) -> bool\n"
		"Parameters:\n"
		"   self: CMMCore * value\n"
		"   deviceLabel: char * value\n"
		"\n"
		""},
	 { (char *)"CMMCore_detectDevice", _wrap_CMMCore_detectDevice, METH_VARARGS, (char *)"\n"
		"CMMCore_detectDevice(CMMCore self, char deviceLabel) -> DeviceDetectionStatus\n"
		"Parameters:\n"
		"   self: CMMCore * value\n"
		"   deviceLabel: char * value\n"
		"\n"
		""},
	 { (char *)"CMMCore_getParentLabel", _wrap_CMMCore_getParentLabel, METH_VARARGS, (char *)"\n"
		"CMMCore_getParentLabel(CMMCore self, char peripheralLabel) -> string\n"
		"Parameters:\n"
		"   self: CMMCore * value\n"
		"   peripheralLabel: char const * value\n"
		"\n"
		""},
	 { (char *)"CMMCore_setParentLabel", _wrap_CMMCore_setParentLabel, METH_VARARGS, (char *)"\n"
		"CMMCore_setParentLabel(CMMCore self, char deviceLabel, char parentHubLabel)\n"
		"Parameters:\n"
		"   self: CMMCore * value\n"
		"   deviceLabel: char const * value\n"
		"   parentHubLabel: char const * value\n"
		"\n"
		""},
	 { (char *)"CMMCore_getInstalledDevices", _wrap_CMMCore_getInstalledDevices, METH_VARARGS, (char *)"\n"
		"CMMCore_getInstalledDevices(CMMCore self, char hubLabel) -> StrVector\n"
		"Parameters:\n"
		"   self: CMMCore * value\n"
		"   hubLabel: char const * value\n"
		"\n"
		""},
	 { (char *)"CMMCore_getInstalledDeviceDescription", _wrap_CMMCore_getInstalledDeviceDescription, METH_VARARGS, (char *)"\n"
		"CMMCore_getInstalledDeviceDescription(CMMCore self, char hubLabel, char peripheralLabel) -> string\n"
		"Parameters:\n"
		"   self: CMMCore * value\n"
		"   hubLabel: char const * value\n"
		"   peripheralLabel: char const * value\n"
		"\n"
		""},
	 { (char *)"CMMCore_getLoadedPeripheralDevices", _wrap_CMMCore_getLoadedPeripheralDevices, METH_VARARGS, (char *)"\n"
		"CMMCore_getLoadedPeripheralDevices(CMMCore self, char hubLabel) -> StrVector\n"
		"Parameters:\n"
		"   self: CMMCore * value\n"
		"   hubLabel: char const * value\n"
		"\n"
		""},
	 { (char *)"CMMCore_getUserId", _wrap_CMMCore_getUserId, METH_VARARGS, (char *)"\n"
		"CMMCore_getUserId(CMMCore self) -> string\n"
		"Parameters:\n"
		"   self: CMMCore const * value\n"
		"\n"
		""},
	 { (char *)"CMMCore_getHostName", _wrap_CMMCore_getHostName, METH_VARARGS, (char *)"\n"
		"CMMCore_getHostName(CMMCore self) -> string\n"
		"Parameters:\n"
		"   self: CMMCore const * value\n"
		"\n"
		""},
	 { (char *)"CMMCore_getMACAddresses", _wrap_CMMCore_getMACAddresses, METH_VARARGS, (char *)"\n"
		"CMMCore_getMACAddresses(CMMCore self) -> StrVector\n"
		"Parameters:\n"
		"   self: CMMCore * value\n"
		"\n"
		""},
	 { (char *)"CMMCore_setSLMImage", _wrap_CMMCore_setSLMImage, METH_VARARGS, (char *)"\n"
		"CMMCore_setSLMImage(CMMCore self, char slmLabel, char pixels) -> PyObject\n"
		"Parameters:\n"
		"   self: CMMCore * value\n"
		"   slmLabel: char const * value\n"
		"   pixels: char * value\n"
		"\n"
		""},
	 { (char *)"CMMCore_swigregister", CMMCore_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_MetadataError", _wrap_new_MetadataError, METH_VARARGS, (char *)"\n"
		"new_MetadataError(char msg) -> MetadataError\n"
		"Parameters:\n"
		"   msg: char const * value\n"
		"\n"
		""},
	 { (char *)"delete_MetadataError", _wrap_delete_MetadataError, METH_VARARGS, (char *)"\n"
		"delete_MetadataError(MetadataError self)\n"
		"Parameters:\n"
		"   self: MetadataError * value\n"
		"\n"
		""},
	 { (char *)"MetadataError_getMsg", _wrap_MetadataError_getMsg, METH_VARARGS, (char *)"\n"
		"MetadataError_getMsg(MetadataError self) -> string\n"
		"Parameters:\n"
		"   self: MetadataError * value\n"
		"\n"
		""},
	 { (char *)"MetadataError_swigregister", MetadataError_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_MetadataKeyError", _wrap_new_MetadataKeyError, METH_VARARGS, (char *)"new_MetadataKeyError() -> MetadataKeyError"},
	 { (char *)"delete_MetadataKeyError", _wrap_delete_MetadataKeyError, METH_VARARGS, (char *)"\n"
		"delete_MetadataKeyError(MetadataKeyError self)\n"
		"Parameters:\n"
		"   self: MetadataKeyError * value\n"
		"\n"
		""},
	 { (char *)"MetadataKeyError___getitem__", _wrap_MetadataKeyError___getitem__, METH_VARARGS, (char *)"\n"
		"MetadataKeyError___getitem__(MetadataKeyError self, int n) -> string\n"
		"Parameters:\n"
		"   self: MetadataKeyError * value\n"
		"   n: int value\n"
		"\n"
		""},
	 { (char *)"MetadataKeyError___str__", _wrap_MetadataKeyError___str__, METH_VARARGS, (char *)"\n"
		"MetadataKeyError___str__(MetadataKeyError self) -> string\n"
		"Parameters:\n"
		"   self: MetadataKeyError * value\n"
		"\n"
		""},
	 { (char *)"MetadataKeyError_swigregister", MetadataKeyError_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_MetadataIndexError", _wrap_new_MetadataIndexError, METH_VARARGS, (char *)"new_MetadataIndexError() -> MetadataIndexError"},
	 { (char *)"delete_MetadataIndexError", _wrap_delete_MetadataIndexError, METH_VARARGS, (char *)"\n"
		"delete_MetadataIndexError(MetadataIndexError self)\n"
		"Parameters:\n"
		"   self: MetadataIndexError * value\n"
		"\n"
		""},
	 { (char *)"MetadataIndexError___getitem__", _wrap_MetadataIndexError___getitem__, METH_VARARGS, (char *)"\n"
		"MetadataIndexError___getitem__(MetadataIndexError self, int n) -> string\n"
		"Parameters:\n"
		"   self: MetadataIndexError * value\n"
		"   n: int value\n"
		"\n"
		""},
	 { (char *)"MetadataIndexError___str__", _wrap_MetadataIndexError___str__, METH_VARARGS, (char *)"\n"
		"MetadataIndexError___str__(MetadataIndexError self) -> string\n"
		"Parameters:\n"
		"   self: MetadataIndexError * value\n"
		"\n"
		""},
	 { (char *)"MetadataIndexError_swigregister", MetadataIndexError_swigregister, METH_VARARGS, NULL},
	 { (char *)"delete_MetadataTag", _wrap_delete_MetadataTag, METH_VARARGS, (char *)"\n"
		"delete_MetadataTag(MetadataTag self)\n"
		"Parameters:\n"
		"   self: MetadataTag * value\n"
		"\n"
		""},
	 { (char *)"MetadataTag_GetDevice", _wrap_MetadataTag_GetDevice, METH_VARARGS, (char *)"\n"
		"MetadataTag_GetDevice(MetadataTag self) -> string\n"
		"Parameters:\n"
		"   self: MetadataTag const * value\n"
		"\n"
		""},
	 { (char *)"MetadataTag_GetName", _wrap_MetadataTag_GetName, METH_VARARGS, (char *)"\n"
		"MetadataTag_GetName(MetadataTag self) -> string\n"
		"Parameters:\n"
		"   self: MetadataTag const * value\n"
		"\n"
		""},
	 { (char *)"MetadataTag_GetQualifiedName", _wrap_MetadataTag_GetQualifiedName, METH_VARARGS, (char *)"\n"
		"MetadataTag_GetQualifiedName(MetadataTag self) -> string\n"
		"Parameters:\n"
		"   self: MetadataTag const * value\n"
		"\n"
		""},
	 { (char *)"MetadataTag_IsReadOnly", _wrap_MetadataTag_IsReadOnly, METH_VARARGS, (char *)"\n"
		"MetadataTag_IsReadOnly(MetadataTag self) -> bool\n"
		"Parameters:\n"
		"   self: MetadataTag const * value\n"
		"\n"
		""},
	 { (char *)"MetadataTag_SetDevice", _wrap_MetadataTag_SetDevice, METH_VARARGS, (char *)"\n"
		"MetadataTag_SetDevice(MetadataTag self, char device)\n"
		"Parameters:\n"
		"   self: MetadataTag * value\n"
		"   device: char const * value\n"
		"\n"
		""},
	 { (char *)"MetadataTag_SetName", _wrap_MetadataTag_SetName, METH_VARARGS, (char *)"\n"
		"MetadataTag_SetName(MetadataTag self, char name)\n"
		"Parameters:\n"
		"   self: MetadataTag * value\n"
		"   name: char const * value\n"
		"\n"
		""},
	 { (char *)"MetadataTag_SetReadOnly", _wrap_MetadataTag_SetReadOnly, METH_VARARGS, (char *)"\n"
		"MetadataTag_SetReadOnly(MetadataTag self, bool ro)\n"
		"Parameters:\n"
		"   self: MetadataTag * value\n"
		"   ro: bool value\n"
		"\n"
		""},
	 { (char *)"MetadataTag_ToSingleTag", _wrap_MetadataTag_ToSingleTag, METH_VARARGS, (char *)"\n"
		"MetadataTag_ToSingleTag(MetadataTag self) -> MetadataSingleTag\n"
		"Parameters:\n"
		"   self: MetadataTag const * value\n"
		"\n"
		""},
	 { (char *)"MetadataTag_ToArrayTag", _wrap_MetadataTag_ToArrayTag, METH_VARARGS, (char *)"\n"
		"MetadataTag_ToArrayTag(MetadataTag self) -> MetadataArrayTag\n"
		"Parameters:\n"
		"   self: MetadataTag const * value\n"
		"\n"
		""},
	 { (char *)"MetadataTag_Clone", _wrap_MetadataTag_Clone, METH_VARARGS, (char *)"\n"
		"MetadataTag_Clone(MetadataTag self) -> MetadataTag\n"
		"Parameters:\n"
		"   self: MetadataTag * value\n"
		"\n"
		""},
	 { (char *)"MetadataTag_Serialize", _wrap_MetadataTag_Serialize, METH_VARARGS, (char *)"\n"
		"MetadataTag_Serialize(MetadataTag self) -> string\n"
		"Parameters:\n"
		"   self: MetadataTag * value\n"
		"\n"
		""},
	 { (char *)"MetadataTag_Restore", _wrap_MetadataTag_Restore, METH_VARARGS, (char *)"\n"
		"Restore(char stream) -> bool\n"
		"Parameters:\n"
		"   stream: char const * value\n"
		"\n"
		"MetadataTag_Restore(MetadataTag self, std::istringstream _is) -> bool\n"
		"Parameters:\n"
		"   self: MetadataTag * value\n"
		"   is: std::istringstream & value\n"
		"\n"
		""},
	 { (char *)"MetadataTag_ReadLine", _wrap_MetadataTag_ReadLine, METH_VARARGS, (char *)"\n"
		"MetadataTag_ReadLine(std::istringstream _is) -> string\n"
		"Parameters:\n"
		"   is: std::istringstream & value\n"
		"\n"
		""},
	 { (char *)"MetadataTag_swigregister", MetadataTag_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_MetadataSingleTag", _wrap_new_MetadataSingleTag, METH_VARARGS, (char *)"\n"
		"MetadataSingleTag()\n"
		"new_MetadataSingleTag(char name, char device, bool readOnly) -> MetadataSingleTag\n"
		"Parameters:\n"
		"   name: char const * value\n"
		"   device: char const * value\n"
		"   readOnly: bool value\n"
		"\n"
		""},
	 { (char *)"delete_MetadataSingleTag", _wrap_delete_MetadataSingleTag, METH_VARARGS, (char *)"\n"
		"delete_MetadataSingleTag(MetadataSingleTag self)\n"
		"Parameters:\n"
		"   self: MetadataSingleTag * value\n"
		"\n"
		""},
	 { (char *)"MetadataSingleTag_GetValue", _wrap_MetadataSingleTag_GetValue, METH_VARARGS, (char *)"\n"
		"MetadataSingleTag_GetValue(MetadataSingleTag self) -> string\n"
		"Parameters:\n"
		"   self: MetadataSingleTag const * value\n"
		"\n"
		""},
	 { (char *)"MetadataSingleTag_SetValue", _wrap_MetadataSingleTag_SetValue, METH_VARARGS, (char *)"\n"
		"MetadataSingleTag_SetValue(MetadataSingleTag self, char val)\n"
		"Parameters:\n"
		"   self: MetadataSingleTag * value\n"
		"   val: char const * value\n"
		"\n"
		""},
	 { (char *)"MetadataSingleTag_ToSingleTag", _wrap_MetadataSingleTag_ToSingleTag, METH_VARARGS, (char *)"\n"
		"MetadataSingleTag_ToSingleTag(MetadataSingleTag self) -> MetadataSingleTag\n"
		"Parameters:\n"
		"   self: MetadataSingleTag const * value\n"
		"\n"
		""},
	 { (char *)"MetadataSingleTag_Clone", _wrap_MetadataSingleTag_Clone, METH_VARARGS, (char *)"\n"
		"MetadataSingleTag_Clone(MetadataSingleTag self) -> MetadataTag\n"
		"Parameters:\n"
		"   self: MetadataSingleTag * value\n"
		"\n"
		""},
	 { (char *)"MetadataSingleTag_Serialize", _wrap_MetadataSingleTag_Serialize, METH_VARARGS, (char *)"\n"
		"MetadataSingleTag_Serialize(MetadataSingleTag self) -> string\n"
		"Parameters:\n"
		"   self: MetadataSingleTag * value\n"
		"\n"
		""},
	 { (char *)"MetadataSingleTag_Restore", _wrap_MetadataSingleTag_Restore, METH_VARARGS, (char *)"\n"
		"Restore(char stream) -> bool\n"
		"Parameters:\n"
		"   stream: char const * value\n"
		"\n"
		"MetadataSingleTag_Restore(MetadataSingleTag self, std::istringstream _is) -> bool\n"
		"Parameters:\n"
		"   self: MetadataSingleTag * value\n"
		"   is: std::istringstream & value\n"
		"\n"
		""},
	 { (char *)"MetadataSingleTag_swigregister", MetadataSingleTag_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_MetadataArrayTag", _wrap_new_MetadataArrayTag, METH_VARARGS, (char *)"\n"
		"MetadataArrayTag()\n"
		"new_MetadataArrayTag(char name, char device, bool readOnly) -> MetadataArrayTag\n"
		"Parameters:\n"
		"   name: char const * value\n"
		"   device: char const * value\n"
		"   readOnly: bool value\n"
		"\n"
		""},
	 { (char *)"delete_MetadataArrayTag", _wrap_delete_MetadataArrayTag, METH_VARARGS, (char *)"\n"
		"delete_MetadataArrayTag(MetadataArrayTag self)\n"
		"Parameters:\n"
		"   self: MetadataArrayTag * value\n"
		"\n"
		""},
	 { (char *)"MetadataArrayTag_ToArrayTag", _wrap_MetadataArrayTag_ToArrayTag, METH_VARARGS, (char *)"\n"
		"MetadataArrayTag_ToArrayTag(MetadataArrayTag self) -> MetadataArrayTag\n"
		"Parameters:\n"
		"   self: MetadataArrayTag const * value\n"
		"\n"
		""},
	 { (char *)"MetadataArrayTag_AddValue", _wrap_MetadataArrayTag_AddValue, METH_VARARGS, (char *)"\n"
		"MetadataArrayTag_AddValue(MetadataArrayTag self, char val)\n"
		"Parameters:\n"
		"   self: MetadataArrayTag * value\n"
		"   val: char const * value\n"
		"\n"
		""},
	 { (char *)"MetadataArrayTag_SetValue", _wrap_MetadataArrayTag_SetValue, METH_VARARGS, (char *)"\n"
		"MetadataArrayTag_SetValue(MetadataArrayTag self, char val, size_t idx)\n"
		"Parameters:\n"
		"   self: MetadataArrayTag * value\n"
		"   val: char const * value\n"
		"   idx: size_t value\n"
		"\n"
		""},
	 { (char *)"MetadataArrayTag_GetValue", _wrap_MetadataArrayTag_GetValue, METH_VARARGS, (char *)"\n"
		"MetadataArrayTag_GetValue(MetadataArrayTag self, size_t idx) -> string\n"
		"Parameters:\n"
		"   self: MetadataArrayTag const * value\n"
		"   idx: size_t value\n"
		"\n"
		""},
	 { (char *)"MetadataArrayTag_GetSize", _wrap_MetadataArrayTag_GetSize, METH_VARARGS, (char *)"\n"
		"MetadataArrayTag_GetSize(MetadataArrayTag self) -> size_t\n"
		"Parameters:\n"
		"   self: MetadataArrayTag const * value\n"
		"\n"
		""},
	 { (char *)"MetadataArrayTag_Clone", _wrap_MetadataArrayTag_Clone, METH_VARARGS, (char *)"\n"
		"MetadataArrayTag_Clone(MetadataArrayTag self) -> MetadataTag\n"
		"Parameters:\n"
		"   self: MetadataArrayTag * value\n"
		"\n"
		""},
	 { (char *)"MetadataArrayTag_Serialize", _wrap_MetadataArrayTag_Serialize, METH_VARARGS, (char *)"\n"
		"MetadataArrayTag_Serialize(MetadataArrayTag self) -> string\n"
		"Parameters:\n"
		"   self: MetadataArrayTag * value\n"
		"\n"
		""},
	 { (char *)"MetadataArrayTag_Restore", _wrap_MetadataArrayTag_Restore, METH_VARARGS, (char *)"\n"
		"Restore(char stream) -> bool\n"
		"Parameters:\n"
		"   stream: char const * value\n"
		"\n"
		"MetadataArrayTag_Restore(MetadataArrayTag self, std::istringstream _is) -> bool\n"
		"Parameters:\n"
		"   self: MetadataArrayTag * value\n"
		"   is: std::istringstream & value\n"
		"\n"
		""},
	 { (char *)"MetadataArrayTag_swigregister", MetadataArrayTag_swigregister, METH_VARARGS, NULL},
	 { (char *)"delete_Metadata", _wrap_delete_Metadata, METH_VARARGS, (char *)"\n"
		"delete_Metadata(Metadata self)\n"
		"Parameters:\n"
		"   self: Metadata * value\n"
		"\n"
		""},
	 { (char *)"new_Metadata", _wrap_new_Metadata, METH_VARARGS, (char *)"\n"
		"Metadata()\n"
		"new_Metadata(Metadata original) -> Metadata\n"
		"Parameters:\n"
		"   original: Metadata const & value\n"
		"\n"
		""},
	 { (char *)"Metadata_Clear", _wrap_Metadata_Clear, METH_VARARGS, (char *)"\n"
		"Metadata_Clear(Metadata self)\n"
		"Parameters:\n"
		"   self: Metadata * value\n"
		"\n"
		""},
	 { (char *)"Metadata_GetKeys", _wrap_Metadata_GetKeys, METH_VARARGS, (char *)"\n"
		"Metadata_GetKeys(Metadata self) -> StrVector\n"
		"Parameters:\n"
		"   self: Metadata const * value\n"
		"\n"
		""},
	 { (char *)"Metadata_HasTag", _wrap_Metadata_HasTag, METH_VARARGS, (char *)"\n"
		"Metadata_HasTag(Metadata self, char key) -> bool\n"
		"Parameters:\n"
		"   self: Metadata * value\n"
		"   key: char const * value\n"
		"\n"
		""},
	 { (char *)"Metadata_GetSingleTag", _wrap_Metadata_GetSingleTag, METH_VARARGS, (char *)"\n"
		"Metadata_GetSingleTag(Metadata self, char key) -> MetadataSingleTag\n"
		"Parameters:\n"
		"   self: Metadata const * value\n"
		"   key: char const * value\n"
		"\n"
		""},
	 { (char *)"Metadata_GetArrayTag", _wrap_Metadata_GetArrayTag, METH_VARARGS, (char *)"\n"
		"Metadata_GetArrayTag(Metadata self, char key) -> MetadataArrayTag\n"
		"Parameters:\n"
		"   self: Metadata const * value\n"
		"   key: char const * value\n"
		"\n"
		""},
	 { (char *)"Metadata_SetTag", _wrap_Metadata_SetTag, METH_VARARGS, (char *)"\n"
		"Metadata_SetTag(Metadata self, MetadataTag tag)\n"
		"Parameters:\n"
		"   self: Metadata * value\n"
		"   tag: MetadataTag & value\n"
		"\n"
		""},
	 { (char *)"Metadata_RemoveTag", _wrap_Metadata_RemoveTag, METH_VARARGS, (char *)"\n"
		"Metadata_RemoveTag(Metadata self, char key)\n"
		"Parameters:\n"
		"   self: Metadata * value\n"
		"   key: char const * value\n"
		"\n"
		""},
	 { (char *)"Metadata_Merge", _wrap_Metadata_Merge, METH_VARARGS, (char *)"\n"
		"Metadata_Merge(Metadata self, Metadata newTags)\n"
		"Parameters:\n"
		"   self: Metadata * value\n"
		"   newTags: Metadata const & value\n"
		"\n"
		""},
	 { (char *)"Metadata_Serialize", _wrap_Metadata_Serialize, METH_VARARGS, (char *)"\n"
		"Metadata_Serialize(Metadata self) -> string\n"
		"Parameters:\n"
		"   self: Metadata const * value\n"
		"\n"
		""},
	 { (char *)"Metadata_readLine", _wrap_Metadata_readLine, METH_VARARGS, (char *)"\n"
		"Metadata_readLine(Metadata self, std::istringstream iss) -> string\n"
		"Parameters:\n"
		"   self: Metadata * value\n"
		"   iss: std::istringstream & value\n"
		"\n"
		""},
	 { (char *)"Metadata_Restore", _wrap_Metadata_Restore, METH_VARARGS, (char *)"\n"
		"Metadata_Restore(Metadata self, char stream) -> bool\n"
		"Parameters:\n"
		"   self: Metadata * value\n"
		"   stream: char const * value\n"
		"\n"
		""},
	 { (char *)"Metadata_Dump", _wrap_Metadata_Dump, METH_VARARGS, (char *)"\n"
		"Metadata_Dump(Metadata self) -> string\n"
		"Parameters:\n"
		"   self: Metadata * value\n"
		"\n"
		""},
	 { (char *)"Metadata_swigregister", Metadata_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_MMEventCallback", _wrap_new_MMEventCallback, METH_VARARGS, (char *)"\n"
		"new_MMEventCallback(PyObject self) -> MMEventCallback\n"
		"Parameters:\n"
		"   self: PyObject * value\n"
		"\n"
		""},
	 { (char *)"delete_MMEventCallback", _wrap_delete_MMEventCallback, METH_VARARGS, (char *)"\n"
		"delete_MMEventCallback(MMEventCallback self)\n"
		"Parameters:\n"
		"   self: MMEventCallback * value\n"
		"\n"
		""},
	 { (char *)"MMEventCallback_onPropertiesChanged", _wrap_MMEventCallback_onPropertiesChanged, METH_VARARGS, (char *)"\n"
		"MMEventCallback_onPropertiesChanged(MMEventCallback self)\n"
		"Parameters:\n"
		"   self: MMEventCallback * value\n"
		"\n"
		""},
	 { (char *)"MMEventCallback_onPropertyChanged", _wrap_MMEventCallback_onPropertyChanged, METH_VARARGS, (char *)"\n"
		"MMEventCallback_onPropertyChanged(MMEventCallback self, char name, char propName, char propValue)\n"
		"Parameters:\n"
		"   self: MMEventCallback * value\n"
		"   name: char const * value\n"
		"   propName: char const * value\n"
		"   propValue: char const * value\n"
		"\n"
		""},
	 { (char *)"MMEventCallback_onChannelGroupChanged", _wrap_MMEventCallback_onChannelGroupChanged, METH_VARARGS, (char *)"\n"
		"MMEventCallback_onChannelGroupChanged(MMEventCallback self, char newChannelGroupName)\n"
		"Parameters:\n"
		"   self: MMEventCallback * value\n"
		"   newChannelGroupName: char const * value\n"
		"\n"
		""},
	 { (char *)"MMEventCallback_onConfigGroupChanged", _wrap_MMEventCallback_onConfigGroupChanged, METH_VARARGS, (char *)"\n"
		"MMEventCallback_onConfigGroupChanged(MMEventCallback self, char groupName, char newConfigName)\n"
		"Parameters:\n"
		"   self: MMEventCallback * value\n"
		"   groupName: char const * value\n"
		"   newConfigName: char const * value\n"
		"\n"
		""},
	 { (char *)"MMEventCallback_onSystemConfigurationLoaded", _wrap_MMEventCallback_onSystemConfigurationLoaded, METH_VARARGS, (char *)"\n"
		"MMEventCallback_onSystemConfigurationLoaded(MMEventCallback self)\n"
		"Parameters:\n"
		"   self: MMEventCallback * value\n"
		"\n"
		""},
	 { (char *)"MMEventCallback_onPixelSizeChanged", _wrap_MMEventCallback_onPixelSizeChanged, METH_VARARGS, (char *)"\n"
		"MMEventCallback_onPixelSizeChanged(MMEventCallback self, double newPixelSizeUm)\n"
		"Parameters:\n"
		"   self: MMEventCallback * value\n"
		"   newPixelSizeUm: double value\n"
		"\n"
		""},
	 { (char *)"MMEventCallback_onPixelSizeAffineChanged", _wrap_MMEventCallback_onPixelSizeAffineChanged, METH_VARARGS, (char *)"\n"
		"MMEventCallback_onPixelSizeAffineChanged(MMEventCallback self, double v0, double v1, double v2, \n"
		"    double v3, double v4, double v5)\n"
		"Parameters:\n"
		"   self: MMEventCallback * value\n"
		"   v0: double value\n"
		"   v1: double value\n"
		"   v2: double value\n"
		"   v3: double value\n"
		"   v4: double value\n"
		"   v5: double value\n"
		"\n"
		""},
	 { (char *)"MMEventCallback_onStagePositionChanged", _wrap_MMEventCallback_onStagePositionChanged, METH_VARARGS, (char *)"\n"
		"MMEventCallback_onStagePositionChanged(MMEventCallback self, char name, double pos)\n"
		"Parameters:\n"
		"   self: MMEventCallback * value\n"
		"   name: char * value\n"
		"   pos: double value\n"
		"\n"
		""},
	 { (char *)"MMEventCallback_onXYStagePositionChanged", _wrap_MMEventCallback_onXYStagePositionChanged, METH_VARARGS, (char *)"\n"
		"MMEventCallback_onXYStagePositionChanged(MMEventCallback self, char name, double xpos, double ypos)\n"
		"Parameters:\n"
		"   self: MMEventCallback * value\n"
		"   name: char * value\n"
		"   xpos: double value\n"
		"   ypos: double value\n"
		"\n"
		""},
	 { (char *)"MMEventCallback_onExposureChanged", _wrap_MMEventCallback_onExposureChanged, METH_VARARGS, (char *)"\n"
		"MMEventCallback_onExposureChanged(MMEventCallback self, char name, double newExposure)\n"
		"Parameters:\n"
		"   self: MMEventCallback * value\n"
		"   name: char * value\n"
		"   newExposure: double value\n"
		"\n"
		""},
	 { (char *)"MMEventCallback_onSLMExposureChanged", _wrap_MMEventCallback_onSLMExposureChanged, METH_VARARGS, (char *)"\n"
		"MMEventCallback_onSLMExposureChanged(MMEventCallback self, char name, double newExposure)\n"
		"Parameters:\n"
		"   self: MMEventCallback * value\n"
		"   name: char * value\n"
		"   newExposure: double value\n"
		"\n"
		""},
	 { (char *)"disown_MMEventCallback", _wrap_disown_MMEventCallback, METH_VARARGS, NULL},
	 { (char *)"MMEventCallback_swigregister", MMEventCallback_swigregister, METH_VARARGS, NULL},
	 { NULL, NULL, 0, NULL }
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static void *_p_MetadataArrayTagTo_p_MetadataTag(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((MetadataTag *)  ((MetadataArrayTag *) x));
}
static void *_p_MetadataSingleTagTo_p_MetadataTag(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((MetadataTag *)  ((MetadataSingleTag *) x));
}
static void *_p_MetadataKeyErrorTo_p_MetadataError(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((MetadataError *)  ((MetadataKeyError *) x));
}
static void *_p_MetadataIndexErrorTo_p_MetadataError(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((MetadataError *)  ((MetadataIndexError *) x));
}
static void *_p_CMMErrorTo_p_std__exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::exception *)  ((CMMError *) x));
}
static swig_type_info _swigt__p_CMMCore = {"_p_CMMCore", "CMMCore *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_CMMError = {"_p_CMMError", "CMMError *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Code = {"_p_Code", "Code *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Configuration = {"_p_Configuration", "Configuration *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_MMEventCallback = {"_p_MMEventCallback", "MMEventCallback *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Metadata = {"_p_Metadata", "Metadata *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_MetadataArrayTag = {"_p_MetadataArrayTag", "MetadataArrayTag *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_MetadataError = {"_p_MetadataError", "MetadataError *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_MetadataIndexError = {"_p_MetadataIndexError", "MetadataIndexError *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_MetadataKeyError = {"_p_MetadataKeyError", "MetadataKeyError *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_MetadataSingleTag = {"_p_MetadataSingleTag", "MetadataSingleTag *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_MetadataTag = {"_p_MetadataTag", "MetadataTag *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_PropertyBlock = {"_p_PropertyBlock", "PropertyBlock *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_PropertyPair = {"_p_PropertyPair", "PropertyPair *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_PropertySetting = {"_p_PropertySetting", "PropertySetting *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_allocator_type = {"_p_allocator_type", "allocator_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_char = {"_p_char", "char *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_difference_type = {"_p_difference_type", "difference_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_double = {"_p_double", "double *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_first_type = {"_p_first_type", "first_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_int = {"_p_int", "int *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_key_type = {"_p_key_type", "key_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mapped_type = {"_p_mapped_type", "mapped_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_PyObject = {"_p_p_PyObject", "PyObject **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_second_type = {"_p_second_type", "second_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_size_type = {"_p_size_type", "size_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__exception = {"_p_std__exception", "std::exception *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__invalid_argument = {"_p_std__invalid_argument", "std::invalid_argument *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__istringstream = {"_p_std__istringstream", "std::istringstream *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__lessT_std__string_t = {"_p_std__lessT_std__string_t", "std::less< std::string > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__mapT_std__string_std__string_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_std__string_t_t_t = {"_p_std__mapT_std__string_std__string_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_std__string_t_t_t", "std::map< std::string,std::string > *|std::map< std::string,std::string,std::less< std::string >,std::allocator< std::pair< std::string const,std::string > > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__mapT_std__string_std__string_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_std__string_t_t_t__allocator_type = {"_p_std__mapT_std__string_std__string_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_std__string_t_t_t__allocator_type", "std::map< std::string,std::string >::allocator_type *|std::allocator< std::pair< std::string const,std::string > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__pairT_std__string_std__string_t = {"_p_std__pairT_std__string_std__string_t", "std::pair< std::string,std::string > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_char_std__allocatorT_char_t_t = {"_p_std__vectorT_char_std__allocatorT_char_t_t", "std::vector< char > *|std::vector< char,std::allocator< char > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_char_std__allocatorT_char_t_t__allocator_type = {"_p_std__vectorT_char_std__allocatorT_char_t_t__allocator_type", "std::vector< char >::allocator_type *|std::allocator< char > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_double_std__allocatorT_double_t_t = {"_p_std__vectorT_double_std__allocatorT_double_t_t", "std::vector< double,std::allocator< double > > *|std::vector< double > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_double_std__allocatorT_double_t_t__allocator_type = {"_p_std__vectorT_double_std__allocatorT_double_t_t__allocator_type", "std::vector< double >::allocator_type *|std::allocator< double > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_long_std__allocatorT_long_t_t = {"_p_std__vectorT_long_std__allocatorT_long_t_t", "std::vector< long,std::allocator< long > > *|std::vector< long > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_long_std__allocatorT_long_t_t__allocator_type = {"_p_std__vectorT_long_std__allocatorT_long_t_t__allocator_type", "std::vector< long >::allocator_type *|std::allocator< long > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_std__string_std__allocatorT_std__string_t_t = {"_p_std__vectorT_std__string_std__allocatorT_std__string_t_t", "std::vector< std::string,std::allocator< std::string > > *|std::vector< std::string > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_std__string_std__allocatorT_std__string_t_t__allocator_type = {"_p_std__vectorT_std__string_std__allocatorT_std__string_t_t__allocator_type", "std::vector< std::string >::allocator_type *|std::allocator< std::string > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_unsigned_char_p_std__allocatorT_unsigned_char_p_t_t = {"_p_std__vectorT_unsigned_char_p_std__allocatorT_unsigned_char_p_t_t", "std::vector< unsigned char *,std::allocator< unsigned char * > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t = {"_p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t", "std::vector< unsigned int,std::allocator< unsigned int > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_swig__SwigPyIterator = {"_p_swig__SwigPyIterator", "swig::SwigPyIterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_value_type = {"_p_value_type", "value_type *", 0, 0, (void*)0, 0};

static swig_type_info *swig_type_initial[] = {
  &_swigt__p_CMMCore,
  &_swigt__p_CMMError,
  &_swigt__p_Code,
  &_swigt__p_Configuration,
  &_swigt__p_MMEventCallback,
  &_swigt__p_Metadata,
  &_swigt__p_MetadataArrayTag,
  &_swigt__p_MetadataError,
  &_swigt__p_MetadataIndexError,
  &_swigt__p_MetadataKeyError,
  &_swigt__p_MetadataSingleTag,
  &_swigt__p_MetadataTag,
  &_swigt__p_PropertyBlock,
  &_swigt__p_PropertyPair,
  &_swigt__p_PropertySetting,
  &_swigt__p_allocator_type,
  &_swigt__p_char,
  &_swigt__p_difference_type,
  &_swigt__p_double,
  &_swigt__p_first_type,
  &_swigt__p_int,
  &_swigt__p_key_type,
  &_swigt__p_mapped_type,
  &_swigt__p_p_PyObject,
  &_swigt__p_second_type,
  &_swigt__p_size_type,
  &_swigt__p_std__exception,
  &_swigt__p_std__invalid_argument,
  &_swigt__p_std__istringstream,
  &_swigt__p_std__lessT_std__string_t,
  &_swigt__p_std__mapT_std__string_std__string_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_std__string_t_t_t,
  &_swigt__p_std__mapT_std__string_std__string_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_std__string_t_t_t__allocator_type,
  &_swigt__p_std__pairT_std__string_std__string_t,
  &_swigt__p_std__vectorT_char_std__allocatorT_char_t_t,
  &_swigt__p_std__vectorT_char_std__allocatorT_char_t_t__allocator_type,
  &_swigt__p_std__vectorT_double_std__allocatorT_double_t_t,
  &_swigt__p_std__vectorT_double_std__allocatorT_double_t_t__allocator_type,
  &_swigt__p_std__vectorT_long_std__allocatorT_long_t_t,
  &_swigt__p_std__vectorT_long_std__allocatorT_long_t_t__allocator_type,
  &_swigt__p_std__vectorT_std__string_std__allocatorT_std__string_t_t,
  &_swigt__p_std__vectorT_std__string_std__allocatorT_std__string_t_t__allocator_type,
  &_swigt__p_std__vectorT_unsigned_char_p_std__allocatorT_unsigned_char_p_t_t,
  &_swigt__p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t,
  &_swigt__p_swig__SwigPyIterator,
  &_swigt__p_value_type,
};

static swig_cast_info _swigc__p_CMMCore[] = {  {&_swigt__p_CMMCore, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CMMError[] = {  {&_swigt__p_CMMError, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Code[] = {  {&_swigt__p_Code, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Configuration[] = {  {&_swigt__p_Configuration, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_MMEventCallback[] = {  {&_swigt__p_MMEventCallback, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Metadata[] = {  {&_swigt__p_Metadata, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_MetadataArrayTag[] = {  {&_swigt__p_MetadataArrayTag, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_MetadataError[] = {  {&_swigt__p_MetadataKeyError, _p_MetadataKeyErrorTo_p_MetadataError, 0, 0},  {&_swigt__p_MetadataError, 0, 0, 0},  {&_swigt__p_MetadataIndexError, _p_MetadataIndexErrorTo_p_MetadataError, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_MetadataIndexError[] = {  {&_swigt__p_MetadataIndexError, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_MetadataKeyError[] = {  {&_swigt__p_MetadataKeyError, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_MetadataSingleTag[] = {  {&_swigt__p_MetadataSingleTag, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_MetadataTag[] = {  {&_swigt__p_MetadataArrayTag, _p_MetadataArrayTagTo_p_MetadataTag, 0, 0},  {&_swigt__p_MetadataSingleTag, _p_MetadataSingleTagTo_p_MetadataTag, 0, 0},  {&_swigt__p_MetadataTag, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_PropertyBlock[] = {  {&_swigt__p_PropertyBlock, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_PropertyPair[] = {  {&_swigt__p_PropertyPair, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_PropertySetting[] = {  {&_swigt__p_PropertySetting, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_allocator_type[] = {  {&_swigt__p_allocator_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_char[] = {  {&_swigt__p_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_difference_type[] = {  {&_swigt__p_difference_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_double[] = {  {&_swigt__p_double, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_first_type[] = {  {&_swigt__p_first_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_int[] = {  {&_swigt__p_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_key_type[] = {  {&_swigt__p_key_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mapped_type[] = {  {&_swigt__p_mapped_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_PyObject[] = {  {&_swigt__p_p_PyObject, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_second_type[] = {  {&_swigt__p_second_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_size_type[] = {  {&_swigt__p_size_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__exception[] = {  {&_swigt__p_std__exception, 0, 0, 0},  {&_swigt__p_CMMError, _p_CMMErrorTo_p_std__exception, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__invalid_argument[] = {  {&_swigt__p_std__invalid_argument, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__istringstream[] = {  {&_swigt__p_std__istringstream, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__lessT_std__string_t[] = {  {&_swigt__p_std__lessT_std__string_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__mapT_std__string_std__string_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_std__string_t_t_t[] = {  {&_swigt__p_std__mapT_std__string_std__string_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_std__string_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__mapT_std__string_std__string_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_std__string_t_t_t__allocator_type[] = {  {&_swigt__p_std__mapT_std__string_std__string_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_std__string_t_t_t__allocator_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__pairT_std__string_std__string_t[] = {  {&_swigt__p_std__pairT_std__string_std__string_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_char_std__allocatorT_char_t_t[] = {  {&_swigt__p_std__vectorT_char_std__allocatorT_char_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_char_std__allocatorT_char_t_t__allocator_type[] = {  {&_swigt__p_std__vectorT_char_std__allocatorT_char_t_t__allocator_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_double_std__allocatorT_double_t_t[] = {  {&_swigt__p_std__vectorT_double_std__allocatorT_double_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_double_std__allocatorT_double_t_t__allocator_type[] = {  {&_swigt__p_std__vectorT_double_std__allocatorT_double_t_t__allocator_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_long_std__allocatorT_long_t_t[] = {  {&_swigt__p_std__vectorT_long_std__allocatorT_long_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_long_std__allocatorT_long_t_t__allocator_type[] = {  {&_swigt__p_std__vectorT_long_std__allocatorT_long_t_t__allocator_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_std__string_std__allocatorT_std__string_t_t[] = {  {&_swigt__p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_std__string_std__allocatorT_std__string_t_t__allocator_type[] = {  {&_swigt__p_std__vectorT_std__string_std__allocatorT_std__string_t_t__allocator_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_unsigned_char_p_std__allocatorT_unsigned_char_p_t_t[] = {  {&_swigt__p_std__vectorT_unsigned_char_p_std__allocatorT_unsigned_char_p_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t[] = {  {&_swigt__p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_swig__SwigPyIterator[] = {  {&_swigt__p_swig__SwigPyIterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_value_type[] = {  {&_swigt__p_value_type, 0, 0, 0},{0, 0, 0, 0}};

static swig_cast_info *swig_cast_initial[] = {
  _swigc__p_CMMCore,
  _swigc__p_CMMError,
  _swigc__p_Code,
  _swigc__p_Configuration,
  _swigc__p_MMEventCallback,
  _swigc__p_Metadata,
  _swigc__p_MetadataArrayTag,
  _swigc__p_MetadataError,
  _swigc__p_MetadataIndexError,
  _swigc__p_MetadataKeyError,
  _swigc__p_MetadataSingleTag,
  _swigc__p_MetadataTag,
  _swigc__p_PropertyBlock,
  _swigc__p_PropertyPair,
  _swigc__p_PropertySetting,
  _swigc__p_allocator_type,
  _swigc__p_char,
  _swigc__p_difference_type,
  _swigc__p_double,
  _swigc__p_first_type,
  _swigc__p_int,
  _swigc__p_key_type,
  _swigc__p_mapped_type,
  _swigc__p_p_PyObject,
  _swigc__p_second_type,
  _swigc__p_size_type,
  _swigc__p_std__exception,
  _swigc__p_std__invalid_argument,
  _swigc__p_std__istringstream,
  _swigc__p_std__lessT_std__string_t,
  _swigc__p_std__mapT_std__string_std__string_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_std__string_t_t_t,
  _swigc__p_std__mapT_std__string_std__string_std__lessT_std__string_t_std__allocatorT_std__pairT_std__string_const_std__string_t_t_t__allocator_type,
  _swigc__p_std__pairT_std__string_std__string_t,
  _swigc__p_std__vectorT_char_std__allocatorT_char_t_t,
  _swigc__p_std__vectorT_char_std__allocatorT_char_t_t__allocator_type,
  _swigc__p_std__vectorT_double_std__allocatorT_double_t_t,
  _swigc__p_std__vectorT_double_std__allocatorT_double_t_t__allocator_type,
  _swigc__p_std__vectorT_long_std__allocatorT_long_t_t,
  _swigc__p_std__vectorT_long_std__allocatorT_long_t_t__allocator_type,
  _swigc__p_std__vectorT_std__string_std__allocatorT_std__string_t_t,
  _swigc__p_std__vectorT_std__string_std__allocatorT_std__string_t_t__allocator_type,
  _swigc__p_std__vectorT_unsigned_char_p_std__allocatorT_unsigned_char_p_t_t,
  _swigc__p_std__vectorT_unsigned_int_std__allocatorT_unsigned_int_t_t,
  _swigc__p_swig__SwigPyIterator,
  _swigc__p_value_type,
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */

static swig_const_info swig_const_table[] = {
{0, 0, 0, 0.0, 0, 0}};

#ifdef __cplusplus
}
#endif
/* -----------------------------------------------------------------------------
 * Type initialization:
 * This problem is tough by the requirement that no dynamic 
 * memory is used. Also, since swig_type_info structures store pointers to 
 * swig_cast_info structures and swig_cast_info structures store pointers back
 * to swig_type_info structures, we need some lookup code at initialization. 
 * The idea is that swig generates all the structures that are needed. 
 * The runtime then collects these partially filled structures. 
 * The SWIG_InitializeModule function takes these initial arrays out of 
 * swig_module, and does all the lookup, filling in the swig_module.types
 * array with the correct data and linking the correct swig_cast_info
 * structures together.
 *
 * The generated swig_type_info structures are assigned staticly to an initial 
 * array. We just loop through that array, and handle each type individually.
 * First we lookup if this type has been already loaded, and if so, use the
 * loaded structure instead of the generated one. Then we have to fill in the
 * cast linked list. The cast data is initially stored in something like a
 * two-dimensional array. Each row corresponds to a type (there are the same
 * number of rows as there are in the swig_type_initial array). Each entry in
 * a column is one of the swig_cast_info structures for that type.
 * The cast_initial array is actually an array of arrays, because each row has
 * a variable number of columns. So to actually build the cast linked list,
 * we find the array of casts associated with the type, and loop through it 
 * adding the casts to the list. The one last trick we need to do is making
 * sure the type pointer in the swig_cast_info struct is correct.
 *
 * First off, we lookup the cast->type name to see if it is already loaded. 
 * There are three cases to handle:
 *  1) If the cast->type has already been loaded AND the type we are adding
 *     casting info to has not been loaded (it is in this module), THEN we
 *     replace the cast->type pointer with the type pointer that has already
 *     been loaded.
 *  2) If BOTH types (the one we are adding casting info to, and the 
 *     cast->type) are loaded, THEN the cast info has already been loaded by
 *     the previous module so we just ignore it.
 *  3) Finally, if cast->type has not already been loaded, then we add that
 *     swig_cast_info to the linked list (because the cast->type) pointer will
 *     be correct.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#if 0
} /* c-mode */
#endif
#endif

#if 0
#define SWIGRUNTIME_DEBUG
#endif


SWIGRUNTIME void
SWIG_InitializeModule(void *clientdata) {
  size_t i;
  swig_module_info *module_head, *iter;
  int found, init;
  
  clientdata = clientdata;
  
  /* check to see if the circular list has been setup, if not, set it up */
  if (swig_module.next==0) {
    /* Initialize the swig_module */
    swig_module.type_initial = swig_type_initial;
    swig_module.cast_initial = swig_cast_initial;
    swig_module.next = &swig_module;
    init = 1;
  } else {
    init = 0;
  }
  
  /* Try and load any already created modules */
  module_head = SWIG_GetModule(clientdata);
  if (!module_head) {
    /* This is the first module loaded for this interpreter */
    /* so set the swig module into the interpreter */
    SWIG_SetModule(clientdata, &swig_module);
    module_head = &swig_module;
  } else {
    /* the interpreter has loaded a SWIG module, but has it loaded this one? */
    found=0;
    iter=module_head;
    do {
      if (iter==&swig_module) {
        found=1;
        break;
      }
      iter=iter->next;
    } while (iter!= module_head);
    
    /* if the is found in the list, then all is done and we may leave */
    if (found) return;
    /* otherwise we must add out module into the list */
    swig_module.next = module_head->next;
    module_head->next = &swig_module;
  }
  
  /* When multiple interpeters are used, a module could have already been initialized in
       a different interpreter, but not yet have a pointer in this interpreter.
       In this case, we do not want to continue adding types... everything should be
       set up already */
  if (init == 0) return;
  
  /* Now work on filling in swig_module.types */
#ifdef SWIGRUNTIME_DEBUG
  printf("SWIG_InitializeModule: size %d\n", swig_module.size);
#endif
  for (i = 0; i < swig_module.size; ++i) {
    swig_type_info *type = 0;
    swig_type_info *ret;
    swig_cast_info *cast;
    
#ifdef SWIGRUNTIME_DEBUG
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
#endif
    
    /* if there is another module already loaded */
    if (swig_module.next != &swig_module) {
      type = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, swig_module.type_initial[i]->name);
    }
    if (type) {
      /* Overwrite clientdata field */
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found type %s\n", type->name);
#endif
      if (swig_module.type_initial[i]->clientdata) {
        type->clientdata = swig_module.type_initial[i]->clientdata;
#ifdef SWIGRUNTIME_DEBUG
        printf("SWIG_InitializeModule: found and overwrite type %s \n", type->name);
#endif
      }
    } else {
      type = swig_module.type_initial[i];
    }
    
    /* Insert casting types */
    cast = swig_module.cast_initial[i];
    while (cast->type) {
      /* Don't need to add information already in the list */
      ret = 0;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: look cast %s\n", cast->type->name);
#endif
      if (swig_module.next != &swig_module) {
        ret = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, cast->type->name);
#ifdef SWIGRUNTIME_DEBUG
        if (ret) printf("SWIG_InitializeModule: found cast %s\n", ret->name);
#endif
      }
      if (ret) {
        if (type == swig_module.type_initial[i]) {
#ifdef SWIGRUNTIME_DEBUG
          printf("SWIG_InitializeModule: skip old type %s\n", ret->name);
#endif
          cast->type = ret;
          ret = 0;
        } else {
          /* Check for casting already in the list */
          swig_cast_info *ocast = SWIG_TypeCheck(ret->name, type);
#ifdef SWIGRUNTIME_DEBUG
          if (ocast) printf("SWIG_InitializeModule: skip old cast %s\n", ret->name);
#endif
          if (!ocast) ret = 0;
        }
      }
      
      if (!ret) {
#ifdef SWIGRUNTIME_DEBUG
        printf("SWIG_InitializeModule: adding cast %s\n", cast->type->name);
#endif
        if (type->cast) {
          type->cast->prev = cast;
          cast->next = type->cast;
        }
        type->cast = cast;
      }
      cast++;
    }
    /* Set entry in modules->types array equal to the type */
    swig_module.types[i] = type;
  }
  swig_module.types[i] = 0;
  
#ifdef SWIGRUNTIME_DEBUG
  printf("**** SWIG_InitializeModule: Cast List ******\n");
  for (i = 0; i < swig_module.size; ++i) {
    int j = 0;
    swig_cast_info *cast = swig_module.cast_initial[i];
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
    while (cast->type) {
      printf("SWIG_InitializeModule: cast type %s\n", cast->type->name);
      cast++;
      ++j;
    }
    printf("---- Total casts: %d\n",j);
  }
  printf("**** SWIG_InitializeModule: Cast List ******\n");
#endif
}

/* This function will propagate the clientdata field of type to
* any new swig_type_info structures that have been added into the list
* of equivalent types.  It is like calling
* SWIG_TypeClientData(type, clientdata) a second time.
*/
SWIGRUNTIME void
SWIG_PropagateClientData(void) {
  size_t i;
  swig_cast_info *equiv;
  static int init_run = 0;
  
  if (init_run) return;
  init_run = 1;
  
  for (i = 0; i < swig_module.size; i++) {
    if (swig_module.types[i]->clientdata) {
      equiv = swig_module.types[i]->cast;
      while (equiv) {
        if (!equiv->converter) {
          if (equiv->type && !equiv->type->clientdata)
          SWIG_TypeClientData(equiv->type, swig_module.types[i]->clientdata);
        }
        equiv = equiv->next;
      }
    }
  }
}

#ifdef __cplusplus
#if 0
{
  /* c-mode */
#endif
}
#endif



#ifdef __cplusplus
extern "C" {
#endif
  
  /* Python-specific SWIG API */
#define SWIG_newvarlink()                             SWIG_Python_newvarlink()
#define SWIG_addvarlink(p, name, get_attr, set_attr)  SWIG_Python_addvarlink(p, name, get_attr, set_attr)
#define SWIG_InstallConstants(d, constants)           SWIG_Python_InstallConstants(d, constants)
  
  /* -----------------------------------------------------------------------------
   * global variable support code.
   * ----------------------------------------------------------------------------- */
  
  typedef struct swig_globalvar {
    char       *name;                  /* Name of global variable */
    PyObject *(*get_attr)(void);       /* Return the current value */
    int       (*set_attr)(PyObject *); /* Set the value */
    struct swig_globalvar *next;
  } swig_globalvar;
  
  typedef struct swig_varlinkobject {
    PyObject_HEAD
    swig_globalvar *vars;
  } swig_varlinkobject;
  
  SWIGINTERN PyObject *
  swig_varlink_repr(swig_varlinkobject *SWIGUNUSEDPARM(v)) {
#if PY_VERSION_HEX >= 0x03000000
    return PyUnicode_InternFromString("<Swig global variables>");
#else
    return PyString_FromString("<Swig global variables>");
#endif
  }
  
  SWIGINTERN PyObject *
  swig_varlink_str(swig_varlinkobject *v) {
#if PY_VERSION_HEX >= 0x03000000
    PyObject *str = PyUnicode_InternFromString("(");
    PyObject *tail;
    PyObject *joined;
    swig_globalvar *var;
    for (var = v->vars; var; var=var->next) {
      tail = PyUnicode_FromString(var->name);
      joined = PyUnicode_Concat(str, tail);
      Py_DecRef(str);
      Py_DecRef(tail);
      str = joined;
      if (var->next) {
        tail = PyUnicode_InternFromString(", ");
        joined = PyUnicode_Concat(str, tail);
        Py_DecRef(str);
        Py_DecRef(tail);
        str = joined;
      }
    }
    tail = PyUnicode_InternFromString(")");
    joined = PyUnicode_Concat(str, tail);
    Py_DecRef(str);
    Py_DecRef(tail);
    str = joined;
#else
    PyObject *str = PyString_FromString("(");
    swig_globalvar *var;
    for (var = v->vars; var; var=var->next) {
      PyString_ConcatAndDel(&str,PyString_FromString(var->name));
      if (var->next) PyString_ConcatAndDel(&str,PyString_FromString(", "));
    }
    PyString_ConcatAndDel(&str,PyString_FromString(")"));
#endif
    return str;
  }
  
  SWIGINTERN int
  swig_varlink_print(swig_varlinkobject *v, FILE *fp, int SWIGUNUSEDPARM(flags)) {
    char *tmp;
    PyObject *str = swig_varlink_str(v);
    fprintf(fp,"Swig global variables ");
    fprintf(fp,"%s\n", tmp = SWIG_Python_str_AsChar(str));
    SWIG_Python_str_DelForPy3(tmp);
    Py_DECREF(str);
    return 0;
  }
  
  SWIGINTERN void
  swig_varlink_dealloc(swig_varlinkobject *v) {
    swig_globalvar *var = v->vars;
    while (var) {
      swig_globalvar *n = var->next;
      free(var->name);
      free(var);
      var = n;
    }
  }
  
  SWIGINTERN PyObject *
  swig_varlink_getattr(swig_varlinkobject *v, char *n) {
    PyObject *res = NULL;
    swig_globalvar *var = v->vars;
    while (var) {
      if (strcmp(var->name,n) == 0) {
        res = (*var->get_attr)();
        break;
      }
      var = var->next;
    }
    if (res == NULL && !PyErr_Occurred()) {
      PyErr_SetString(PyExc_NameError,"Unknown C global variable");
    }
    return res;
  }
  
  SWIGINTERN int
  swig_varlink_setattr(swig_varlinkobject *v, char *n, PyObject *p) {
    int res = 1;
    swig_globalvar *var = v->vars;
    while (var) {
      if (strcmp(var->name,n) == 0) {
        res = (*var->set_attr)(p);
        break;
      }
      var = var->next;
    }
    if (res == 1 && !PyErr_Occurred()) {
      PyErr_SetString(PyExc_NameError,"Unknown C global variable");
    }
    return res;
  }
  
  SWIGINTERN PyTypeObject*
  swig_varlink_type(void) {
    static char varlink__doc__[] = "Swig var link object";
    static PyTypeObject varlink_type;
    static int type_init = 0;  
    if (!type_init) {
      const PyTypeObject tmp
      = {
        /* PyObject header changed in Python 3 */
#if PY_VERSION_HEX >= 0x03000000
        PyVarObject_HEAD_INIT(&PyType_Type, 0)
#else
        PyObject_HEAD_INIT(NULL)
        0,                                  /* Number of items in variable part (ob_size) */
#endif
        (char *)"swigvarlink",              /* Type name (tp_name) */
        sizeof(swig_varlinkobject),         /* Basic size (tp_basicsize) */
        0,                                  /* Itemsize (tp_itemsize) */
        (destructor) swig_varlink_dealloc,  /* Deallocator (tp_dealloc) */ 
        (printfunc) swig_varlink_print,     /* Print (tp_print) */
        (getattrfunc) swig_varlink_getattr, /* get attr (tp_getattr) */
        (setattrfunc) swig_varlink_setattr, /* Set attr (tp_setattr) */
        0,                                  /* tp_compare */
        (reprfunc) swig_varlink_repr,       /* tp_repr */
        0,                                  /* tp_as_number */
        0,                                  /* tp_as_sequence */
        0,                                  /* tp_as_mapping */
        0,                                  /* tp_hash */
        0,                                  /* tp_call */
        (reprfunc) swig_varlink_str,        /* tp_str */
        0,                                  /* tp_getattro */
        0,                                  /* tp_setattro */
        0,                                  /* tp_as_buffer */
        0,                                  /* tp_flags */
        varlink__doc__,                     /* tp_doc */
        0,                                  /* tp_traverse */
        0,                                  /* tp_clear */
        0,                                  /* tp_richcompare */
        0,                                  /* tp_weaklistoffset */
#if PY_VERSION_HEX >= 0x02020000
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, /* tp_iter -> tp_weaklist */
#endif
#if PY_VERSION_HEX >= 0x02030000
        0,                                  /* tp_del */
#endif
#ifdef COUNT_ALLOCS
        0,0,0,0                             /* tp_alloc -> tp_next */
#endif
      };
      varlink_type = tmp;
      /* for Python 3 we already assigned ob_type in PyVarObject_HEAD_INIT() */
#if PY_VERSION_HEX < 0x03000000
      varlink_type.ob_type = &PyType_Type;
#endif
      type_init = 1;
    }
    return &varlink_type;
  }
  
  /* Create a variable linking object for use later */
  SWIGINTERN PyObject *
  SWIG_Python_newvarlink(void) {
    swig_varlinkobject *result = PyObject_NEW(swig_varlinkobject, swig_varlink_type());
    if (result) {
      result->vars = 0;
    }
    return ((PyObject*) result);
  }
  
  SWIGINTERN void 
  SWIG_Python_addvarlink(PyObject *p, char *name, PyObject *(*get_attr)(void), int (*set_attr)(PyObject *p)) {
    swig_varlinkobject *v = (swig_varlinkobject *) p;
    swig_globalvar *gv = (swig_globalvar *) malloc(sizeof(swig_globalvar));
    if (gv) {
      size_t size = strlen(name)+1;
      gv->name = (char *)malloc(size);
      if (gv->name) {
        strncpy(gv->name,name,size);
        gv->get_attr = get_attr;
        gv->set_attr = set_attr;
        gv->next = v->vars;
      }
    }
    v->vars = gv;
  }
  
  SWIGINTERN PyObject *
  SWIG_globals(void) {
    static PyObject *_SWIG_globals = 0; 
    if (!_SWIG_globals) _SWIG_globals = SWIG_newvarlink();  
    return _SWIG_globals;
  }
  
  /* -----------------------------------------------------------------------------
   * constants/methods manipulation
   * ----------------------------------------------------------------------------- */
  
  /* Install Constants */
  SWIGINTERN void
  SWIG_Python_InstallConstants(PyObject *d, swig_const_info constants[]) {
    PyObject *obj = 0;
    size_t i;
    for (i = 0; constants[i].type; ++i) {
      switch(constants[i].type) {
      case SWIG_PY_POINTER:
        obj = SWIG_NewPointerObj(constants[i].pvalue, *(constants[i]).ptype,0);
        break;
      case SWIG_PY_BINARY:
        obj = SWIG_NewPackedObj(constants[i].pvalue, constants[i].lvalue, *(constants[i].ptype));
        break;
      default:
        obj = 0;
        break;
      }
      if (obj) {
        PyDict_SetItemString(d, constants[i].name, obj);
        Py_DECREF(obj);
      }
    }
  }
  
  /* -----------------------------------------------------------------------------*/
  /* Fix SwigMethods to carry the callback ptrs when needed */
  /* -----------------------------------------------------------------------------*/
  
  SWIGINTERN void
  SWIG_Python_FixMethods(PyMethodDef *methods,
    swig_const_info *const_table,
    swig_type_info **types,
    swig_type_info **types_initial) {
    size_t i;
    for (i = 0; methods[i].ml_name; ++i) {
      const char *c = methods[i].ml_doc;
      if (c && (c = strstr(c, "swig_ptr: "))) {
        int j;
        swig_const_info *ci = 0;
        const char *name = c + 10;
        for (j = 0; const_table[j].type; ++j) {
          if (strncmp(const_table[j].name, name, 
              strlen(const_table[j].name)) == 0) {
            ci = &(const_table[j]);
            break;
          }
        }
        if (ci) {
          void *ptr = (ci->type == SWIG_PY_POINTER) ? ci->pvalue : 0;
          if (ptr) {
            size_t shift = (ci->ptype) - types;
            swig_type_info *ty = types_initial[shift];
            size_t ldoc = (c - methods[i].ml_doc);
            size_t lptr = strlen(ty->name)+2*sizeof(void*)+2;
            char *ndoc = (char*)malloc(ldoc + lptr + 10);
            if (ndoc) {
              char *buff = ndoc;
              strncpy(buff, methods[i].ml_doc, ldoc);
              buff += ldoc;
              strncpy(buff, "swig_ptr: ", 10);
              buff += 10;
              SWIG_PackVoidPtr(buff, ptr, ty->name, lptr);
              methods[i].ml_doc = ndoc;
            }
          }
        }
      }
    }
  } 
  
#ifdef __cplusplus
}
#endif

/* -----------------------------------------------------------------------------*
 *  Partial Init method
 * -----------------------------------------------------------------------------*/

#ifdef __cplusplus
extern "C"
#endif

SWIGEXPORT 
#if PY_VERSION_HEX >= 0x03000000
PyObject*
#else
void
#endif
SWIG_init(void) {
  PyObject *m, *d;  
#if PY_VERSION_HEX >= 0x03000000
  static struct PyModuleDef SWIG_module = {
    PyModuleDef_HEAD_INIT,
    (char *) SWIG_name,
    NULL,
    -1,
    SwigMethods,
    NULL,
    NULL,
    NULL,
    NULL
  };
#endif
  
  /* Fix SwigMethods to carry the callback ptrs when needed */
  SWIG_Python_FixMethods(SwigMethods, swig_const_table, swig_types, swig_type_initial);
  
#if PY_VERSION_HEX >= 0x03000000
  m = PyModule_Create(&SWIG_module);
#else
  m = Py_InitModule((char *) SWIG_name, SwigMethods);
#endif
  d = PyModule_GetDict(m);
  
  SWIG_InitializeModule(0);
  SWIG_InstallConstants(d,swig_const_table);
  
  
  
  import_array();
  
  SWIG_Python_SetConstant(d, "MM_CODE_OK",SWIG_From_int(static_cast< int >(0)));
  SWIG_Python_SetConstant(d, "MM_CODE_ERR",SWIG_From_int(static_cast< int >(1)));
  SWIG_Python_SetConstant(d, "DEVICE_OK",SWIG_From_int(static_cast< int >(0)));
  SWIG_Python_SetConstant(d, "DEVICE_ERR",SWIG_From_int(static_cast< int >(1)));
  SWIG_Python_SetConstant(d, "DEVICE_INVALID_PROPERTY",SWIG_From_int(static_cast< int >(2)));
  SWIG_Python_SetConstant(d, "DEVICE_INVALID_PROPERTY_VALUE",SWIG_From_int(static_cast< int >(3)));
  SWIG_Python_SetConstant(d, "DEVICE_DUPLICATE_PROPERTY",SWIG_From_int(static_cast< int >(4)));
  SWIG_Python_SetConstant(d, "DEVICE_INVALID_PROPERTY_TYPE",SWIG_From_int(static_cast< int >(5)));
  SWIG_Python_SetConstant(d, "DEVICE_NATIVE_MODULE_FAILED",SWIG_From_int(static_cast< int >(6)));
  SWIG_Python_SetConstant(d, "DEVICE_UNSUPPORTED_DATA_FORMAT",SWIG_From_int(static_cast< int >(7)));
  SWIG_Python_SetConstant(d, "DEVICE_INTERNAL_INCONSISTENCY",SWIG_From_int(static_cast< int >(8)));
  SWIG_Python_SetConstant(d, "DEVICE_NOT_SUPPORTED",SWIG_From_int(static_cast< int >(9)));
  SWIG_Python_SetConstant(d, "DEVICE_UNKNOWN_LABEL",SWIG_From_int(static_cast< int >(10)));
  SWIG_Python_SetConstant(d, "DEVICE_UNSUPPORTED_COMMAND",SWIG_From_int(static_cast< int >(11)));
  SWIG_Python_SetConstant(d, "DEVICE_UNKNOWN_POSITION",SWIG_From_int(static_cast< int >(12)));
  SWIG_Python_SetConstant(d, "DEVICE_NO_CALLBACK_REGISTERED",SWIG_From_int(static_cast< int >(13)));
  SWIG_Python_SetConstant(d, "DEVICE_SERIAL_COMMAND_FAILED",SWIG_From_int(static_cast< int >(14)));
  SWIG_Python_SetConstant(d, "DEVICE_SERIAL_BUFFER_OVERRUN",SWIG_From_int(static_cast< int >(15)));
  SWIG_Python_SetConstant(d, "DEVICE_SERIAL_INVALID_RESPONSE",SWIG_From_int(static_cast< int >(16)));
  SWIG_Python_SetConstant(d, "DEVICE_SERIAL_TIMEOUT",SWIG_From_int(static_cast< int >(17)));
  SWIG_Python_SetConstant(d, "DEVICE_SELF_REFERENCE",SWIG_From_int(static_cast< int >(18)));
  SWIG_Python_SetConstant(d, "DEVICE_NO_PROPERTY_DATA",SWIG_From_int(static_cast< int >(19)));
  SWIG_Python_SetConstant(d, "DEVICE_DUPLICATE_LABEL",SWIG_From_int(static_cast< int >(20)));
  SWIG_Python_SetConstant(d, "DEVICE_INVALID_INPUT_PARAM",SWIG_From_int(static_cast< int >(21)));
  SWIG_Python_SetConstant(d, "DEVICE_BUFFER_OVERFLOW",SWIG_From_int(static_cast< int >(22)));
  SWIG_Python_SetConstant(d, "DEVICE_NONEXISTENT_CHANNEL",SWIG_From_int(static_cast< int >(23)));
  SWIG_Python_SetConstant(d, "DEVICE_INVALID_PROPERTY_LIMTS",SWIG_From_int(static_cast< int >(24)));
  SWIG_Python_SetConstant(d, "DEVICE_SNAP_IMAGE_FAILED",SWIG_From_int(static_cast< int >(25)));
  SWIG_Python_SetConstant(d, "DEVICE_IMAGE_PARAMS_FAILED",SWIG_From_int(static_cast< int >(26)));
  SWIG_Python_SetConstant(d, "DEVICE_CORE_FOCUS_STAGE_UNDEF",SWIG_From_int(static_cast< int >(27)));
  SWIG_Python_SetConstant(d, "DEVICE_CORE_EXPOSURE_FAILED",SWIG_From_int(static_cast< int >(28)));
  SWIG_Python_SetConstant(d, "DEVICE_CORE_CONFIG_FAILED",SWIG_From_int(static_cast< int >(29)));
  SWIG_Python_SetConstant(d, "DEVICE_CAMERA_BUSY_ACQUIRING",SWIG_From_int(static_cast< int >(30)));
  SWIG_Python_SetConstant(d, "DEVICE_INCOMPATIBLE_IMAGE",SWIG_From_int(static_cast< int >(31)));
  SWIG_Python_SetConstant(d, "DEVICE_CAN_NOT_SET_PROPERTY",SWIG_From_int(static_cast< int >(32)));
  SWIG_Python_SetConstant(d, "DEVICE_CORE_CHANNEL_PRESETS_FAILED",SWIG_From_int(static_cast< int >(33)));
  SWIG_Python_SetConstant(d, "DEVICE_LOCALLY_DEFINED_ERROR",SWIG_From_int(static_cast< int >(34)));
  SWIG_Python_SetConstant(d, "DEVICE_NOT_CONNECTED",SWIG_From_int(static_cast< int >(35)));
  SWIG_Python_SetConstant(d, "DEVICE_COMM_HUB_MISSING",SWIG_From_int(static_cast< int >(36)));
  SWIG_Python_SetConstant(d, "DEVICE_DUPLICATE_LIBRARY",SWIG_From_int(static_cast< int >(37)));
  SWIG_Python_SetConstant(d, "DEVICE_PROPERTY_NOT_SEQUENCEABLE",SWIG_From_int(static_cast< int >(38)));
  SWIG_Python_SetConstant(d, "DEVICE_SEQUENCE_TOO_LARGE",SWIG_From_int(static_cast< int >(39)));
  SWIG_Python_SetConstant(d, "DEVICE_OUT_OF_MEMORY",SWIG_From_int(static_cast< int >(40)));
  SWIG_Python_SetConstant(d, "DEVICE_NOT_YET_IMPLEMENTED",SWIG_From_int(static_cast< int >(41)));
  PyDict_SetItemString(d,(char*)"cvar", SWIG_globals());
  SWIG_addvarlink(SWIG_globals(),(char*)"MaxStrLength",Swig_var_MaxStrLength_get, Swig_var_MaxStrLength_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"g_Keyword_Name",Swig_var_g_Keyword_Name_get, Swig_var_g_Keyword_Name_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"g_Keyword_Description",Swig_var_g_Keyword_Description_get, Swig_var_g_Keyword_Description_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"g_Keyword_CameraName",Swig_var_g_Keyword_CameraName_get, Swig_var_g_Keyword_CameraName_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"g_Keyword_CameraID",Swig_var_g_Keyword_CameraID_get, Swig_var_g_Keyword_CameraID_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"g_Keyword_CameraChannelName",Swig_var_g_Keyword_CameraChannelName_get, Swig_var_g_Keyword_CameraChannelName_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"g_Keyword_CameraChannelIndex",Swig_var_g_Keyword_CameraChannelIndex_get, Swig_var_g_Keyword_CameraChannelIndex_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"g_Keyword_Binning",Swig_var_g_Keyword_Binning_get, Swig_var_g_Keyword_Binning_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"g_Keyword_Exposure",Swig_var_g_Keyword_Exposure_get, Swig_var_g_Keyword_Exposure_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"g_Keyword_ActualExposure",Swig_var_g_Keyword_ActualExposure_get, Swig_var_g_Keyword_ActualExposure_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"g_Keyword_ActualInterval_ms",Swig_var_g_Keyword_ActualInterval_ms_get, Swig_var_g_Keyword_ActualInterval_ms_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"g_Keyword_Interval_ms",Swig_var_g_Keyword_Interval_ms_get, Swig_var_g_Keyword_Interval_ms_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"g_Keyword_Elapsed_Time_ms",Swig_var_g_Keyword_Elapsed_Time_ms_get, Swig_var_g_Keyword_Elapsed_Time_ms_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"g_Keyword_PixelType",Swig_var_g_Keyword_PixelType_get, Swig_var_g_Keyword_PixelType_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"g_Keyword_ReadoutTime",Swig_var_g_Keyword_ReadoutTime_get, Swig_var_g_Keyword_ReadoutTime_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"g_Keyword_ReadoutMode",Swig_var_g_Keyword_ReadoutMode_get, Swig_var_g_Keyword_ReadoutMode_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"g_Keyword_Gain",Swig_var_g_Keyword_Gain_get, Swig_var_g_Keyword_Gain_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"g_Keyword_EMGain",Swig_var_g_Keyword_EMGain_get, Swig_var_g_Keyword_EMGain_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"g_Keyword_Offset",Swig_var_g_Keyword_Offset_get, Swig_var_g_Keyword_Offset_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"g_Keyword_CCDTemperature",Swig_var_g_Keyword_CCDTemperature_get, Swig_var_g_Keyword_CCDTemperature_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"g_Keyword_CCDTemperatureSetPoint",Swig_var_g_Keyword_CCDTemperatureSetPoint_get, Swig_var_g_Keyword_CCDTemperatureSetPoint_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"g_Keyword_State",Swig_var_g_Keyword_State_get, Swig_var_g_Keyword_State_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"g_Keyword_Label",Swig_var_g_Keyword_Label_get, Swig_var_g_Keyword_Label_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"g_Keyword_Position",Swig_var_g_Keyword_Position_get, Swig_var_g_Keyword_Position_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"g_Keyword_Type",Swig_var_g_Keyword_Type_get, Swig_var_g_Keyword_Type_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"g_Keyword_Delay",Swig_var_g_Keyword_Delay_get, Swig_var_g_Keyword_Delay_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"g_Keyword_BaudRate",Swig_var_g_Keyword_BaudRate_get, Swig_var_g_Keyword_BaudRate_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"g_Keyword_DataBits",Swig_var_g_Keyword_DataBits_get, Swig_var_g_Keyword_DataBits_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"g_Keyword_StopBits",Swig_var_g_Keyword_StopBits_get, Swig_var_g_Keyword_StopBits_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"g_Keyword_Parity",Swig_var_g_Keyword_Parity_get, Swig_var_g_Keyword_Parity_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"g_Keyword_Handshaking",Swig_var_g_Keyword_Handshaking_get, Swig_var_g_Keyword_Handshaking_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"g_Keyword_DelayBetweenCharsMs",Swig_var_g_Keyword_DelayBetweenCharsMs_get, Swig_var_g_Keyword_DelayBetweenCharsMs_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"g_Keyword_Port",Swig_var_g_Keyword_Port_get, Swig_var_g_Keyword_Port_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"g_Keyword_AnswerTimeout",Swig_var_g_Keyword_AnswerTimeout_get, Swig_var_g_Keyword_AnswerTimeout_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"g_Keyword_Speed",Swig_var_g_Keyword_Speed_get, Swig_var_g_Keyword_Speed_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"g_Keyword_CoreDevice",Swig_var_g_Keyword_CoreDevice_get, Swig_var_g_Keyword_CoreDevice_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"g_Keyword_CoreInitialize",Swig_var_g_Keyword_CoreInitialize_get, Swig_var_g_Keyword_CoreInitialize_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"g_Keyword_CoreCamera",Swig_var_g_Keyword_CoreCamera_get, Swig_var_g_Keyword_CoreCamera_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"g_Keyword_CoreShutter",Swig_var_g_Keyword_CoreShutter_get, Swig_var_g_Keyword_CoreShutter_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"g_Keyword_CoreXYStage",Swig_var_g_Keyword_CoreXYStage_get, Swig_var_g_Keyword_CoreXYStage_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"g_Keyword_CoreFocus",Swig_var_g_Keyword_CoreFocus_get, Swig_var_g_Keyword_CoreFocus_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"g_Keyword_CoreAutoFocus",Swig_var_g_Keyword_CoreAutoFocus_get, Swig_var_g_Keyword_CoreAutoFocus_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"g_Keyword_CoreAutoShutter",Swig_var_g_Keyword_CoreAutoShutter_get, Swig_var_g_Keyword_CoreAutoShutter_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"g_Keyword_CoreChannelGroup",Swig_var_g_Keyword_CoreChannelGroup_get, Swig_var_g_Keyword_CoreChannelGroup_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"g_Keyword_CoreImageProcessor",Swig_var_g_Keyword_CoreImageProcessor_get, Swig_var_g_Keyword_CoreImageProcessor_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"g_Keyword_CoreSLM",Swig_var_g_Keyword_CoreSLM_get, Swig_var_g_Keyword_CoreSLM_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"g_Keyword_CoreGalvo",Swig_var_g_Keyword_CoreGalvo_get, Swig_var_g_Keyword_CoreGalvo_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"g_Keyword_CoreTimeoutMs",Swig_var_g_Keyword_CoreTimeoutMs_get, Swig_var_g_Keyword_CoreTimeoutMs_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"g_Keyword_Channel",Swig_var_g_Keyword_Channel_get, Swig_var_g_Keyword_Channel_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"g_Keyword_Version",Swig_var_g_Keyword_Version_get, Swig_var_g_Keyword_Version_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"g_Keyword_ColorMode",Swig_var_g_Keyword_ColorMode_get, Swig_var_g_Keyword_ColorMode_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"g_Keyword_Transpose_SwapXY",Swig_var_g_Keyword_Transpose_SwapXY_get, Swig_var_g_Keyword_Transpose_SwapXY_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"g_Keyword_Transpose_MirrorX",Swig_var_g_Keyword_Transpose_MirrorX_get, Swig_var_g_Keyword_Transpose_MirrorX_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"g_Keyword_Transpose_MirrorY",Swig_var_g_Keyword_Transpose_MirrorY_get, Swig_var_g_Keyword_Transpose_MirrorY_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"g_Keyword_Transpose_Correction",Swig_var_g_Keyword_Transpose_Correction_get, Swig_var_g_Keyword_Transpose_Correction_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"g_Keyword_Closed_Position",Swig_var_g_Keyword_Closed_Position_get, Swig_var_g_Keyword_Closed_Position_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"g_Keyword_HubID",Swig_var_g_Keyword_HubID_get, Swig_var_g_Keyword_HubID_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"g_Keyword_Meatdata_Exposure",Swig_var_g_Keyword_Meatdata_Exposure_get, Swig_var_g_Keyword_Meatdata_Exposure_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"g_Keyword_Metadata_Score",Swig_var_g_Keyword_Metadata_Score_get, Swig_var_g_Keyword_Metadata_Score_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"g_Keyword_Metadata_ImageNumber",Swig_var_g_Keyword_Metadata_ImageNumber_get, Swig_var_g_Keyword_Metadata_ImageNumber_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"g_Keyword_Metadata_StartTime",Swig_var_g_Keyword_Metadata_StartTime_get, Swig_var_g_Keyword_Metadata_StartTime_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"g_Keyword_Metadata_ROI_X",Swig_var_g_Keyword_Metadata_ROI_X_get, Swig_var_g_Keyword_Metadata_ROI_X_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"g_Keyword_Metadata_ROI_Y",Swig_var_g_Keyword_Metadata_ROI_Y_get, Swig_var_g_Keyword_Metadata_ROI_Y_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"g_Keyword_Metadata_TimeInCore",Swig_var_g_Keyword_Metadata_TimeInCore_get, Swig_var_g_Keyword_Metadata_TimeInCore_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"g_FieldDelimiters",Swig_var_g_FieldDelimiters_get, Swig_var_g_FieldDelimiters_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"g_CFGCommand_Device",Swig_var_g_CFGCommand_Device_get, Swig_var_g_CFGCommand_Device_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"g_CFGCommand_Label",Swig_var_g_CFGCommand_Label_get, Swig_var_g_CFGCommand_Label_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"g_CFGCommand_Property",Swig_var_g_CFGCommand_Property_get, Swig_var_g_CFGCommand_Property_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"g_CFGCommand_Configuration",Swig_var_g_CFGCommand_Configuration_get, Swig_var_g_CFGCommand_Configuration_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"g_CFGCommand_ConfigGroup",Swig_var_g_CFGCommand_ConfigGroup_get, Swig_var_g_CFGCommand_ConfigGroup_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"g_CFGCommand_Equipment",Swig_var_g_CFGCommand_Equipment_get, Swig_var_g_CFGCommand_Equipment_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"g_CFGCommand_Delay",Swig_var_g_CFGCommand_Delay_get, Swig_var_g_CFGCommand_Delay_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"g_CFGCommand_ImageSynchro",Swig_var_g_CFGCommand_ImageSynchro_get, Swig_var_g_CFGCommand_ImageSynchro_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"g_CFGCommand_ConfigPixelSize",Swig_var_g_CFGCommand_ConfigPixelSize_get, Swig_var_g_CFGCommand_ConfigPixelSize_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"g_CFGCommand_PixelSize_um",Swig_var_g_CFGCommand_PixelSize_um_get, Swig_var_g_CFGCommand_PixelSize_um_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"g_CFGCommand_PixelSizeAffine",Swig_var_g_CFGCommand_PixelSizeAffine_get, Swig_var_g_CFGCommand_PixelSizeAffine_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"g_CFGCommand_ParentID",Swig_var_g_CFGCommand_ParentID_get, Swig_var_g_CFGCommand_ParentID_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"g_CFGCommand_FocusDirection",Swig_var_g_CFGCommand_FocusDirection_get, Swig_var_g_CFGCommand_FocusDirection_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"g_CFGGroup_System",Swig_var_g_CFGGroup_System_get, Swig_var_g_CFGGroup_System_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"g_CFGGroup_System_Startup",Swig_var_g_CFGGroup_System_Startup_get, Swig_var_g_CFGGroup_System_Startup_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"g_CFGGroup_System_Shutdown",Swig_var_g_CFGGroup_System_Shutdown_get, Swig_var_g_CFGGroup_System_Shutdown_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"g_CFGGroup_PixelSizeUm",Swig_var_g_CFGGroup_PixelSizeUm_get, Swig_var_g_CFGGroup_PixelSizeUm_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"_DATABITS_5",Swig_var__DATABITS_5_get, Swig_var__DATABITS_5_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"_DATABITS_6",Swig_var__DATABITS_6_get, Swig_var__DATABITS_6_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"_DATABITS_7",Swig_var__DATABITS_7_get, Swig_var__DATABITS_7_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"_DATABITS_8",Swig_var__DATABITS_8_get, Swig_var__DATABITS_8_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"_FLOWCONTROL_NONE",Swig_var__FLOWCONTROL_NONE_get, Swig_var__FLOWCONTROL_NONE_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"_FLOWCONTROL_RTSCTS_IN",Swig_var__FLOWCONTROL_RTSCTS_IN_get, Swig_var__FLOWCONTROL_RTSCTS_IN_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"_FLOWCONTROL_RTSCTS_OUT",Swig_var__FLOWCONTROL_RTSCTS_OUT_get, Swig_var__FLOWCONTROL_RTSCTS_OUT_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"_FLOWCONTROL_XONXOFF_IN",Swig_var__FLOWCONTROL_XONXOFF_IN_get, Swig_var__FLOWCONTROL_XONXOFF_IN_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"_FLOWCONTROL_XONXOFF_OUT",Swig_var__FLOWCONTROL_XONXOFF_OUT_get, Swig_var__FLOWCONTROL_XONXOFF_OUT_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"_PARITY_EVEN",Swig_var__PARITY_EVEN_get, Swig_var__PARITY_EVEN_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"_PARITY_MARK",Swig_var__PARITY_MARK_get, Swig_var__PARITY_MARK_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"_PARITY_NONE",Swig_var__PARITY_NONE_get, Swig_var__PARITY_NONE_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"_PARITY_ODD",Swig_var__PARITY_ODD_get, Swig_var__PARITY_ODD_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"_PARITY_SPACE",Swig_var__PARITY_SPACE_get, Swig_var__PARITY_SPACE_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"_STOPBITS_1",Swig_var__STOPBITS_1_get, Swig_var__STOPBITS_1_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"_STOPBITS_1_5",Swig_var__STOPBITS_1_5_get, Swig_var__STOPBITS_1_5_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"_STOPBITS_2",Swig_var__STOPBITS_2_get, Swig_var__STOPBITS_2_set);
  SWIG_Python_SetConstant(d, "UnknownType",SWIG_From_int(static_cast< int >(MM::UnknownType)));
  SWIG_Python_SetConstant(d, "AnyType",SWIG_From_int(static_cast< int >(MM::AnyType)));
  SWIG_Python_SetConstant(d, "CameraDevice",SWIG_From_int(static_cast< int >(MM::CameraDevice)));
  SWIG_Python_SetConstant(d, "ShutterDevice",SWIG_From_int(static_cast< int >(MM::ShutterDevice)));
  SWIG_Python_SetConstant(d, "StateDevice",SWIG_From_int(static_cast< int >(MM::StateDevice)));
  SWIG_Python_SetConstant(d, "StageDevice",SWIG_From_int(static_cast< int >(MM::StageDevice)));
  SWIG_Python_SetConstant(d, "XYStageDevice",SWIG_From_int(static_cast< int >(MM::XYStageDevice)));
  SWIG_Python_SetConstant(d, "SerialDevice",SWIG_From_int(static_cast< int >(MM::SerialDevice)));
  SWIG_Python_SetConstant(d, "GenericDevice",SWIG_From_int(static_cast< int >(MM::GenericDevice)));
  SWIG_Python_SetConstant(d, "AutoFocusDevice",SWIG_From_int(static_cast< int >(MM::AutoFocusDevice)));
  SWIG_Python_SetConstant(d, "CoreDevice",SWIG_From_int(static_cast< int >(MM::CoreDevice)));
  SWIG_Python_SetConstant(d, "ImageProcessorDevice",SWIG_From_int(static_cast< int >(MM::ImageProcessorDevice)));
  SWIG_Python_SetConstant(d, "SignalIODevice",SWIG_From_int(static_cast< int >(MM::SignalIODevice)));
  SWIG_Python_SetConstant(d, "MagnifierDevice",SWIG_From_int(static_cast< int >(MM::MagnifierDevice)));
  SWIG_Python_SetConstant(d, "SLMDevice",SWIG_From_int(static_cast< int >(MM::SLMDevice)));
  SWIG_Python_SetConstant(d, "HubDevice",SWIG_From_int(static_cast< int >(MM::HubDevice)));
  SWIG_Python_SetConstant(d, "GalvoDevice",SWIG_From_int(static_cast< int >(MM::GalvoDevice)));
  SWIG_Python_SetConstant(d, "Undef",SWIG_From_int(static_cast< int >(MM::Undef)));
  SWIG_Python_SetConstant(d, "String",SWIG_From_int(static_cast< int >(MM::String)));
  SWIG_Python_SetConstant(d, "Float",SWIG_From_int(static_cast< int >(MM::Float)));
  SWIG_Python_SetConstant(d, "Integer",SWIG_From_int(static_cast< int >(MM::Integer)));
  SWIG_Python_SetConstant(d, "NoAction",SWIG_From_int(static_cast< int >(MM::NoAction)));
  SWIG_Python_SetConstant(d, "BeforeGet",SWIG_From_int(static_cast< int >(MM::BeforeGet)));
  SWIG_Python_SetConstant(d, "AfterSet",SWIG_From_int(static_cast< int >(MM::AfterSet)));
  SWIG_Python_SetConstant(d, "IsSequenceable",SWIG_From_int(static_cast< int >(MM::IsSequenceable)));
  SWIG_Python_SetConstant(d, "AfterLoadSequence",SWIG_From_int(static_cast< int >(MM::AfterLoadSequence)));
  SWIG_Python_SetConstant(d, "StartSequence",SWIG_From_int(static_cast< int >(MM::StartSequence)));
  SWIG_Python_SetConstant(d, "StopSequence",SWIG_From_int(static_cast< int >(MM::StopSequence)));
  SWIG_Python_SetConstant(d, "InvalidPort",SWIG_From_int(static_cast< int >(MM::InvalidPort)));
  SWIG_Python_SetConstant(d, "SerialPort",SWIG_From_int(static_cast< int >(MM::SerialPort)));
  SWIG_Python_SetConstant(d, "USBPort",SWIG_From_int(static_cast< int >(MM::USBPort)));
  SWIG_Python_SetConstant(d, "HIDPort",SWIG_From_int(static_cast< int >(MM::HIDPort)));
  SWIG_Python_SetConstant(d, "FocusDirectionUnknown",SWIG_From_int(static_cast< int >(MM::FocusDirectionUnknown)));
  SWIG_Python_SetConstant(d, "FocusDirectionTowardSample",SWIG_From_int(static_cast< int >(MM::FocusDirectionTowardSample)));
  SWIG_Python_SetConstant(d, "FocusDirectionAwayFromSample",SWIG_From_int(static_cast< int >(MM::FocusDirectionAwayFromSample)));
  SWIG_Python_SetConstant(d, "Attention",SWIG_From_int(static_cast< int >(MM::Attention)));
  SWIG_Python_SetConstant(d, "Done",SWIG_From_int(static_cast< int >(MM::Done)));
  SWIG_Python_SetConstant(d, "StatusChanged",SWIG_From_int(static_cast< int >(MM::StatusChanged)));
  SWIG_Python_SetConstant(d, "Unimplemented",SWIG_From_int(static_cast< int >(MM::Unimplemented)));
  SWIG_Python_SetConstant(d, "Misconfigured",SWIG_From_int(static_cast< int >(MM::Misconfigured)));
  SWIG_Python_SetConstant(d, "CanNotCommunicate",SWIG_From_int(static_cast< int >(MM::CanNotCommunicate)));
  SWIG_Python_SetConstant(d, "CanCommunicate",SWIG_From_int(static_cast< int >(MM::CanCommunicate)));
#if PY_VERSION_HEX >= 0x03000000
  return m;
#else
  return;
#endif
}

